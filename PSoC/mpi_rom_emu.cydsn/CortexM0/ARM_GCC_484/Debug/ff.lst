ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.mem_cpy,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  21              		.type	mem_cpy, %function
  22              	mem_cpy:
  23              	.LFB0:
  24              		.file 1 ".\\sd\\ff.c"
   1:.\sd/ff.c     **** /*----------------------------------------------------------------------------/
   2:.\sd/ff.c     **** /  FatFs - FAT file system module  R0.09                  (C)ChaN, 2011
   3:.\sd/ff.c     **** /-----------------------------------------------------------------------------/
   4:.\sd/ff.c     **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:.\sd/ff.c     **** / This is a free software that opened for education, research and commercial
   6:.\sd/ff.c     **** / developments under license policy of following terms.
   7:.\sd/ff.c     **** /
   8:.\sd/ff.c     **** /  Copyright (C) 2011, ChaN, all right reserved.
   9:.\sd/ff.c     **** /
  10:.\sd/ff.c     **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:.\sd/ff.c     **** / * No restriction on use. You can use, modify and redistribute it for
  12:.\sd/ff.c     **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:.\sd/ff.c     **** / * Redistributions of source code must retain the above copyright notice.
  14:.\sd/ff.c     **** /
  15:.\sd/ff.c     **** /-----------------------------------------------------------------------------/
  16:.\sd/ff.c     **** / Feb 26,'06 R0.00  Prototype.
  17:.\sd/ff.c     **** /
  18:.\sd/ff.c     **** / Apr 29,'06 R0.01  First stable version.
  19:.\sd/ff.c     **** /
  20:.\sd/ff.c     **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:.\sd/ff.c     **** /                   Removed unbuffered mode.
  22:.\sd/ff.c     **** /                   Fixed a problem on small (<32M) partition.
  23:.\sd/ff.c     **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:.\sd/ff.c     **** /
  25:.\sd/ff.c     **** / Sep 22,'06 R0.03  Added f_rename().
  26:.\sd/ff.c     **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:.\sd/ff.c     **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:.\sd/ff.c     **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:.\sd/ff.c     **** /
  30:.\sd/ff.c     **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:.\sd/ff.c     **** /                   Changed some interfaces for multiple drive system.
  32:.\sd/ff.c     **** /                   Changed f_mountdrv() to f_mount().
  33:.\sd/ff.c     **** /                   Added f_mkfs().
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 2


  34:.\sd/ff.c     **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:.\sd/ff.c     **** /                   Added a capability of extending file size to f_lseek().
  36:.\sd/ff.c     **** /                   Added minimization level 3.
  37:.\sd/ff.c     **** /                   Fixed an endian sensitive code in f_mkfs().
  38:.\sd/ff.c     **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:.\sd/ff.c     **** /                   Added FSInfo support.
  40:.\sd/ff.c     **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:.\sd/ff.c     **** /                   Fixed short seek (<= csize) collapses the file object.
  42:.\sd/ff.c     **** /
  43:.\sd/ff.c     **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:.\sd/ff.c     **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:.\sd/ff.c     **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:.\sd/ff.c     **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:.\sd/ff.c     **** /                   Fixed off by one error at FAT sub-type determination.
  48:.\sd/ff.c     **** /                   Fixed btr in f_read() can be mistruncated.
  49:.\sd/ff.c     **** /                   Fixed cached sector is not flushed when create and close without write.
  50:.\sd/ff.c     **** /
  51:.\sd/ff.c     **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:.\sd/ff.c     **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:.\sd/ff.c     **** /
  54:.\sd/ff.c     **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:.\sd/ff.c     **** /                   Added LONG_ file name feature.
  56:.\sd/ff.c     **** /                   Added multiple code page feature.
  57:.\sd/ff.c     **** /                   Added re-entrancy for multitask operation.
  58:.\sd/ff.c     **** /                   Added auto cluster size selection to f_mkfs().
  59:.\sd/ff.c     **** /                   Added rewind option to f_readdir().
  60:.\sd/ff.c     **** /                   Changed result code of critical errors.
  61:.\sd/ff.c     **** /                   Renamed string functions to avoid name collision.
  62:.\sd/ff.c     **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:.\sd/ff.c     **** /                   Added multiple sector size feature.
  64:.\sd/ff.c     **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:.\sd/ff.c     **** /                   Fixed wrong cache control in f_lseek().
  66:.\sd/ff.c     **** /                   Added relative path feature.
  67:.\sd/ff.c     **** /                   Added f_chdir() and f_chdrive().
  68:.\sd/ff.c     **** /                   Added proper case conversion to extended char.
  69:.\sd/ff.c     **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:.\sd/ff.c     **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:.\sd/ff.c     **** /                   Fixed name matching error on the 13 char boundary.
  72:.\sd/ff.c     **** /                   Added a configuration option, _LFN_UNICODE.
  73:.\sd/ff.c     **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:.\sd/ff.c     **** /
  75:.\sd/ff.c     **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:.\sd/ff.c     **** /                   Added file lock feature. (_FS_SHARE)
  77:.\sd/ff.c     **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:.\sd/ff.c     **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:.\sd/ff.c     **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:.\sd/ff.c     **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:.\sd/ff.c     **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:.\sd/ff.c     **** /                   Added sector erase feature. (_USE_ERASE)
  83:.\sd/ff.c     **** /                   Moved file lock semaphore table from fs object to the bss.
  84:.\sd/ff.c     **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:.\sd/ff.c     **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:.\sd/ff.c     **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:.\sd/ff.c     **** /                   f_lseek() reports required table size on creating CLMP.
  88:.\sd/ff.c     **** /                   Extended format syntax of f_printf function.
  89:.\sd/ff.c     **** /                   Ignores duplicated directory separators in given path names.
  90:.\sd/ff.c     **** /
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 3


  91:.\sd/ff.c     **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
  92:.\sd/ff.c     **** /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
  93:.\sd/ff.c     **** /---------------------------------------------------------------------------*/
  94:.\sd/ff.c     **** 
  95:.\sd/ff.c     **** #include "sd/ff.h"			/* FatFs configurations and declarations */
  96:.\sd/ff.c     **** #include "sd/diskio.h"		/* Declarations of low level disk I/O functions */
  97:.\sd/ff.c     **** 
  98:.\sd/ff.c     **** 
  99:.\sd/ff.c     **** /*--------------------------------------------------------------------------
 100:.\sd/ff.c     **** 
 101:.\sd/ff.c     ****    Module Private Definitions
 102:.\sd/ff.c     **** 
 103:.\sd/ff.c     **** ---------------------------------------------------------------------------*/
 104:.\sd/ff.c     **** 
 105:.\sd/ff.c     **** #if _FATFS != 6502	/* Revision ID */
 106:.\sd/ff.c     **** #error Wrong include file (ff.h).
 107:.\sd/ff.c     **** #endif
 108:.\sd/ff.c     **** 
 109:.\sd/ff.c     **** 
 110:.\sd/ff.c     **** /* Definitions on sector size */
 111:.\sd/ff.c     **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 112:.\sd/ff.c     **** #error Wrong sector size.
 113:.\sd/ff.c     **** #endif
 114:.\sd/ff.c     **** #if _MAX_SS != 512
 115:.\sd/ff.c     **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 116:.\sd/ff.c     **** #else
 117:.\sd/ff.c     **** #define	SS(fs)	512U			/* Fixed sector size */
 118:.\sd/ff.c     **** #endif
 119:.\sd/ff.c     **** 
 120:.\sd/ff.c     **** 
 121:.\sd/ff.c     **** /* Reentrancy related */
 122:.\sd/ff.c     **** #if _FS_REENTRANT
 123:.\sd/ff.c     **** #if _USE_LFN == 1
 124:.\sd/ff.c     **** #error Static LFN work area must not be used in re-entrant configuration.
 125:.\sd/ff.c     **** #endif
 126:.\sd/ff.c     **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 127:.\sd/ff.c     **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 128:.\sd/ff.c     **** #else
 129:.\sd/ff.c     **** #define	ENTER_FF(fs)
 130:.\sd/ff.c     **** #define LEAVE_FF(fs, res)	return res
 131:.\sd/ff.c     **** #endif
 132:.\sd/ff.c     **** 
 133:.\sd/ff.c     **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 134:.\sd/ff.c     **** 
 135:.\sd/ff.c     **** 
 136:.\sd/ff.c     **** /* File shareing feature */
 137:.\sd/ff.c     **** #if _FS_SHARE
 138:.\sd/ff.c     **** #if _FS_READONLY
 139:.\sd/ff.c     **** #error _FS_SHARE must be 0 on read-only cfg.
 140:.\sd/ff.c     **** #endif
 141:.\sd/ff.c     **** typedef struct {
 142:.\sd/ff.c     **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 143:.\sd/ff.c     **** 	DWORD clu;				/* File ID 2, directory */
 144:.\sd/ff.c     **** 	WORD idx;				/* File ID 3, directory index */
 145:.\sd/ff.c     **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 146:.\sd/ff.c     **** } FILESEM;
 147:.\sd/ff.c     **** #endif
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 4


 148:.\sd/ff.c     **** 
 149:.\sd/ff.c     **** 
 150:.\sd/ff.c     **** /* Misc definitions */
 151:.\sd/ff.c     **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 152:.\sd/ff.c     **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 153:.\sd/ff.c     **** 
 154:.\sd/ff.c     **** 
 155:.\sd/ff.c     **** /* DBCS code ranges and SBCS extend char conversion table */
 156:.\sd/ff.c     **** 
 157:.\sd/ff.c     **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 158:.\sd/ff.c     **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 159:.\sd/ff.c     **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 160:.\sd/ff.c     **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 161:.\sd/ff.c     **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 162:.\sd/ff.c     **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 163:.\sd/ff.c     **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 164:.\sd/ff.c     **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 165:.\sd/ff.c     **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 166:.\sd/ff.c     **** 
 167:.\sd/ff.c     **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 168:.\sd/ff.c     **** #define _DF1S	0x81
 169:.\sd/ff.c     **** #define _DF1E	0xFE
 170:.\sd/ff.c     **** #define _DS1S	0x40
 171:.\sd/ff.c     **** #define _DS1E	0x7E
 172:.\sd/ff.c     **** #define _DS2S	0x80
 173:.\sd/ff.c     **** #define _DS2E	0xFE
 174:.\sd/ff.c     **** 
 175:.\sd/ff.c     **** #elif _CODE_PAGE == 949	/* Korean */
 176:.\sd/ff.c     **** #define _DF1S	0x81
 177:.\sd/ff.c     **** #define _DF1E	0xFE
 178:.\sd/ff.c     **** #define _DS1S	0x41
 179:.\sd/ff.c     **** #define _DS1E	0x5A
 180:.\sd/ff.c     **** #define _DS2S	0x61
 181:.\sd/ff.c     **** #define _DS2E	0x7A
 182:.\sd/ff.c     **** #define _DS3S	0x81
 183:.\sd/ff.c     **** #define _DS3E	0xFE
 184:.\sd/ff.c     **** 
 185:.\sd/ff.c     **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 186:.\sd/ff.c     **** #define _DF1S	0x81
 187:.\sd/ff.c     **** #define _DF1E	0xFE
 188:.\sd/ff.c     **** #define _DS1S	0x40
 189:.\sd/ff.c     **** #define _DS1E	0x7E
 190:.\sd/ff.c     **** #define _DS2S	0xA1
 191:.\sd/ff.c     **** #define _DS2E	0xFE
 192:.\sd/ff.c     **** 
 193:.\sd/ff.c     **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 194:.\sd/ff.c     **** #define _DF1S	0
 195:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 196:.\sd/ff.c     **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 197:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 198:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 199:.\sd/ff.c     **** 
 200:.\sd/ff.c     **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 201:.\sd/ff.c     **** #define _DF1S	0
 202:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 203:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 204:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 5


 205:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 206:.\sd/ff.c     **** 
 207:.\sd/ff.c     **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 208:.\sd/ff.c     **** #define _DF1S	0
 209:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 210:.\sd/ff.c     **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 211:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 212:.\sd/ff.c     **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 213:.\sd/ff.c     **** 
 214:.\sd/ff.c     **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 215:.\sd/ff.c     **** #define _DF1S	0
 216:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 217:.\sd/ff.c     **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 218:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 219:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 220:.\sd/ff.c     **** 
 221:.\sd/ff.c     **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 222:.\sd/ff.c     **** #define _DF1S	0
 223:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 224:.\sd/ff.c     **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 225:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 226:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 227:.\sd/ff.c     **** 
 228:.\sd/ff.c     **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 229:.\sd/ff.c     **** #define _DF1S	0
 230:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 231:.\sd/ff.c     **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 232:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 233:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 234:.\sd/ff.c     **** 
 235:.\sd/ff.c     **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 236:.\sd/ff.c     **** #define _DF1S	0
 237:.\sd/ff.c     **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 238:.\sd/ff.c     **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 239:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 240:.\sd/ff.c     **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 241:.\sd/ff.c     **** 
 242:.\sd/ff.c     **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 243:.\sd/ff.c     **** #define _DF1S	0
 244:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 245:.\sd/ff.c     **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 246:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 247:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 248:.\sd/ff.c     **** 
 249:.\sd/ff.c     **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 250:.\sd/ff.c     **** #define _DF1S	0
 251:.\sd/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 252:.\sd/ff.c     **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 253:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 254:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 255:.\sd/ff.c     **** 
 256:.\sd/ff.c     **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 257:.\sd/ff.c     **** #define _DF1S	0
 258:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 259:.\sd/ff.c     **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 260:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 261:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 6


 262:.\sd/ff.c     **** 
 263:.\sd/ff.c     **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 264:.\sd/ff.c     **** #define _DF1S	0
 265:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 266:.\sd/ff.c     **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 267:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 268:.\sd/ff.c     **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 269:.\sd/ff.c     **** 
 270:.\sd/ff.c     **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 271:.\sd/ff.c     **** #define _DF1S	0
 272:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 273:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 274:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 275:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 276:.\sd/ff.c     **** 
 277:.\sd/ff.c     **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 278:.\sd/ff.c     **** #define _DF1S	0
 279:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 280:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 281:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 282:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 283:.\sd/ff.c     **** 
 284:.\sd/ff.c     **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 285:.\sd/ff.c     **** #define _DF1S	0
 286:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 287:.\sd/ff.c     **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 288:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 290:.\sd/ff.c     **** 
 291:.\sd/ff.c     **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 292:.\sd/ff.c     **** #define _DF1S	0
 293:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 294:.\sd/ff.c     **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 295:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 297:.\sd/ff.c     **** 
 298:.\sd/ff.c     **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 299:.\sd/ff.c     **** #define _DF1S	0
 300:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 301:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 302:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 303:.\sd/ff.c     **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 304:.\sd/ff.c     **** 
 305:.\sd/ff.c     **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 306:.\sd/ff.c     **** #define _DF1S	0
 307:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 308:.\sd/ff.c     **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 309:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 310:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 311:.\sd/ff.c     **** 
 312:.\sd/ff.c     **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 313:.\sd/ff.c     **** #define _DF1S	0
 314:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 315:.\sd/ff.c     **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 316:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 317:.\sd/ff.c     **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 318:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 7


 319:.\sd/ff.c     **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 320:.\sd/ff.c     **** #define _DF1S	0
 321:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 322:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 323:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 324:.\sd/ff.c     **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 325:.\sd/ff.c     **** 
 326:.\sd/ff.c     **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 327:.\sd/ff.c     **** #define _DF1S	0
 328:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 329:.\sd/ff.c     **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 330:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 331:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 332:.\sd/ff.c     **** 
 333:.\sd/ff.c     **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 334:.\sd/ff.c     **** #define _DF1S	0
 335:.\sd/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 336:.\sd/ff.c     **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 337:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 338:.\sd/ff.c     **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 339:.\sd/ff.c     **** 
 340:.\sd/ff.c     **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 341:.\sd/ff.c     **** #if _USE_LFN
 342:.\sd/ff.c     **** #error Cannot use LFN feature without valid code page.
 343:.\sd/ff.c     **** #endif
 344:.\sd/ff.c     **** #define _DF1S	0
 345:.\sd/ff.c     **** 
 346:.\sd/ff.c     **** #else
 347:.\sd/ff.c     **** #error Unknown code page
 348:.\sd/ff.c     **** 
 349:.\sd/ff.c     **** #endif
 350:.\sd/ff.c     **** 
 351:.\sd/ff.c     **** 
 352:.\sd/ff.c     **** /* Character code support macros */
 353:.\sd/ff.c     **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 354:.\sd/ff.c     **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 355:.\sd/ff.c     **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 356:.\sd/ff.c     **** 
 357:.\sd/ff.c     **** #if _DF1S		/* Code page is DBCS */
 358:.\sd/ff.c     **** 
 359:.\sd/ff.c     **** #ifdef _DF2S	/* Two 1st byte areas */
 360:.\sd/ff.c     **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 361:.\sd/ff.c     **** #else			/* One 1st byte area */
 362:.\sd/ff.c     **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 363:.\sd/ff.c     **** #endif
 364:.\sd/ff.c     **** 
 365:.\sd/ff.c     **** #ifdef _DS3S	/* Three 2nd byte areas */
 366:.\sd/ff.c     **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 367:.\sd/ff.c     **** #else			/* Two 2nd byte areas */
 368:.\sd/ff.c     **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 369:.\sd/ff.c     **** #endif
 370:.\sd/ff.c     **** 
 371:.\sd/ff.c     **** #else			/* Code page is SBCS */
 372:.\sd/ff.c     **** 
 373:.\sd/ff.c     **** #define IsDBCS1(c)	0
 374:.\sd/ff.c     **** #define IsDBCS2(c)	0
 375:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 8


 376:.\sd/ff.c     **** #endif /* _DF1S */
 377:.\sd/ff.c     **** 
 378:.\sd/ff.c     **** 
 379:.\sd/ff.c     **** /* Name status flags */
 380:.\sd/ff.c     **** #define NS			11		/* Index of name status byte in fn[] */
 381:.\sd/ff.c     **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 382:.\sd/ff.c     **** #define NS_LFN		0x02	/* Force to create LFN entry */
 383:.\sd/ff.c     **** #define NS_LAST		0x04	/* Last segment */
 384:.\sd/ff.c     **** #define NS_BODY		0x08	/* Lower case flag (body) */
 385:.\sd/ff.c     **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 386:.\sd/ff.c     **** #define NS_DOT		0x20	/* Dot entry */
 387:.\sd/ff.c     **** 
 388:.\sd/ff.c     **** 
 389:.\sd/ff.c     **** /* FAT sub-type boundaries */
 390:.\sd/ff.c     **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 391:.\sd/ff.c     **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 392:.\sd/ff.c     **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 393:.\sd/ff.c     **** 
 394:.\sd/ff.c     **** 
 395:.\sd/ff.c     **** /* FatFs refers the members in the FAT structures as byte array instead of
 396:.\sd/ff.c     **** / structure member because the structure is not binary compatible between
 397:.\sd/ff.c     **** / different platforms */
 398:.\sd/ff.c     **** 
 399:.\sd/ff.c     **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 400:.\sd/ff.c     **** #define BS_OEMName			3	/* OEM name (8) */
 401:.\sd/ff.c     **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 402:.\sd/ff.c     **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 403:.\sd/ff.c     **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 404:.\sd/ff.c     **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 405:.\sd/ff.c     **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 406:.\sd/ff.c     **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 407:.\sd/ff.c     **** #define BPB_Media			21	/* Media descriptor (1) */
 408:.\sd/ff.c     **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 409:.\sd/ff.c     **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 410:.\sd/ff.c     **** #define BPB_NumHeads		26	/* Number of heads (2) */
 411:.\sd/ff.c     **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 412:.\sd/ff.c     **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 413:.\sd/ff.c     **** #define BS_DrvNum			36	/* Physical drive number (2) */
 414:.\sd/ff.c     **** #define BS_BootSig			38	/* Extended boot signature (1) */
 415:.\sd/ff.c     **** #define BS_VolID			39	/* Volume serial number (4) */
 416:.\sd/ff.c     **** #define BS_VolLab			43	/* Volume label (8) */
 417:.\sd/ff.c     **** #define BS_FilSysType		54	/* File system type (1) */
 418:.\sd/ff.c     **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 419:.\sd/ff.c     **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 420:.\sd/ff.c     **** #define BPB_FSVer			42	/* File system version (2) */
 421:.\sd/ff.c     **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 422:.\sd/ff.c     **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 423:.\sd/ff.c     **** #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
 424:.\sd/ff.c     **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 425:.\sd/ff.c     **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 426:.\sd/ff.c     **** #define BS_VolID32			67	/* Volume serial number (4) */
 427:.\sd/ff.c     **** #define BS_VolLab32			71	/* Volume label (8) */
 428:.\sd/ff.c     **** #define BS_FilSysType32		82	/* File system type (1) */
 429:.\sd/ff.c     **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 430:.\sd/ff.c     **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 431:.\sd/ff.c     **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 432:.\sd/ff.c     **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 9


 433:.\sd/ff.c     **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 434:.\sd/ff.c     **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 435:.\sd/ff.c     **** #define BS_55AA				510	/* Boot sector signature (2) */
 436:.\sd/ff.c     **** 
 437:.\sd/ff.c     **** #define	DIR_Name			0	/* Short file name (11) */
 438:.\sd/ff.c     **** #define	DIR_Attr			11	/* Attribute (1) */
 439:.\sd/ff.c     **** #define	DIR_NTres			12	/* NT flag (1) */
 440:.\sd/ff.c     **** #define	DIR_CrtTime			14	/* Created time (2) */
 441:.\sd/ff.c     **** #define	DIR_CrtDate			16	/* Created date (2) */
 442:.\sd/ff.c     **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 443:.\sd/ff.c     **** #define	DIR_WrtTime			22	/* Modified time (2) */
 444:.\sd/ff.c     **** #define	DIR_WrtDate			24	/* Modified date (2) */
 445:.\sd/ff.c     **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 446:.\sd/ff.c     **** #define	DIR_FileSize		28	/* File size (4) */
 447:.\sd/ff.c     **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 448:.\sd/ff.c     **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 449:.\sd/ff.c     **** #define	LDIR_Type			12	/* LFN type (1) */
 450:.\sd/ff.c     **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 451:.\sd/ff.c     **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 452:.\sd/ff.c     **** #define	SZ_DIR				32		/* Size of a directory entry */
 453:.\sd/ff.c     **** #define	LLE					0x40	/* Last LONG_ entry flag in LDIR_Ord */
 454:.\sd/ff.c     **** #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
 455:.\sd/ff.c     **** #define	NDDE				0x05	/* Replacement of a character collides with DDE */
 456:.\sd/ff.c     **** 
 457:.\sd/ff.c     **** 
 458:.\sd/ff.c     **** /*------------------------------------------------------------*/
 459:.\sd/ff.c     **** /* Module private work area                                   */
 460:.\sd/ff.c     **** /*------------------------------------------------------------*/
 461:.\sd/ff.c     **** /* Note that uninitialized variables with static duration are
 462:.\sd/ff.c     **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 463:.\sd/ff.c     **** /  routine is out of ANSI-C standard.
 464:.\sd/ff.c     **** */
 465:.\sd/ff.c     **** 
 466:.\sd/ff.c     **** #if _VOLUMES
 467:.\sd/ff.c     **** static
 468:.\sd/ff.c     **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 469:.\sd/ff.c     **** #else
 470:.\sd/ff.c     **** #error Number of volumes must not be 0.
 471:.\sd/ff.c     **** #endif
 472:.\sd/ff.c     **** 
 473:.\sd/ff.c     **** static
 474:.\sd/ff.c     **** WORD Fsid;				/* File system mount ID */
 475:.\sd/ff.c     **** 
 476:.\sd/ff.c     **** #if _FS_RPATH
 477:.\sd/ff.c     **** static
 478:.\sd/ff.c     **** BYTE CurrVol;			/* Current drive */
 479:.\sd/ff.c     **** #endif
 480:.\sd/ff.c     **** 
 481:.\sd/ff.c     **** #if _FS_SHARE
 482:.\sd/ff.c     **** static
 483:.\sd/ff.c     **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 484:.\sd/ff.c     **** #endif
 485:.\sd/ff.c     **** 
 486:.\sd/ff.c     **** #if _USE_LFN == 0			/* No LFN feature */
 487:.\sd/ff.c     **** #define	DEF_NAMEBUF			BYTE sfn[12]
 488:.\sd/ff.c     **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 489:.\sd/ff.c     **** #define	FREE_BUF()
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 10


 490:.\sd/ff.c     **** 
 491:.\sd/ff.c     **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 492:.\sd/ff.c     **** static WCHAR LfnBuf[_MAX_LFN+1];
 493:.\sd/ff.c     **** #define	DEF_NAMEBUF			BYTE sfn[12]
 494:.\sd/ff.c     **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 495:.\sd/ff.c     **** #define	FREE_BUF()
 496:.\sd/ff.c     **** 
 497:.\sd/ff.c     **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 498:.\sd/ff.c     **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 499:.\sd/ff.c     **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 500:.\sd/ff.c     **** #define	FREE_BUF()
 501:.\sd/ff.c     **** 
 502:.\sd/ff.c     **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 503:.\sd/ff.c     **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 504:.\sd/ff.c     **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 505:.\sd/ff.c     **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 506:.\sd/ff.c     **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 507:.\sd/ff.c     **** #define	FREE_BUF()			ff_memfree(lfn)
 508:.\sd/ff.c     **** 
 509:.\sd/ff.c     **** #else
 510:.\sd/ff.c     **** #error Wrong LFN configuration.
 511:.\sd/ff.c     **** #endif
 512:.\sd/ff.c     **** 
 513:.\sd/ff.c     **** 
 514:.\sd/ff.c     **** 
 515:.\sd/ff.c     **** 
 516:.\sd/ff.c     **** /*--------------------------------------------------------------------------
 517:.\sd/ff.c     **** 
 518:.\sd/ff.c     ****    Module Private Functions
 519:.\sd/ff.c     **** 
 520:.\sd/ff.c     **** ---------------------------------------------------------------------------*/
 521:.\sd/ff.c     **** 
 522:.\sd/ff.c     **** 
 523:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 524:.\sd/ff.c     **** /* String functions                                                      */
 525:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 526:.\sd/ff.c     **** 
 527:.\sd/ff.c     **** /* Copy memory to memory */
 528:.\sd/ff.c     **** static
 529:.\sd/ff.c     **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  25              		.loc 1 529 0
  26              		.cfi_startproc
  27              	.LVL0:
 530:.\sd/ff.c     **** 	BYTE *d = (BYTE*)dst;
 531:.\sd/ff.c     **** 	const BYTE *s = (const BYTE*)src;
 532:.\sd/ff.c     **** 
 533:.\sd/ff.c     **** #if _WORD_ACCESS == 1
 534:.\sd/ff.c     **** 	while (cnt >= sizeof(int)) {
 535:.\sd/ff.c     **** 		*(int*)d = *(int*)s;
 536:.\sd/ff.c     **** 		d += sizeof(int); s += sizeof(int);
 537:.\sd/ff.c     **** 		cnt -= sizeof(int);
 538:.\sd/ff.c     **** 	}
 539:.\sd/ff.c     **** #endif
 540:.\sd/ff.c     **** 	while (cnt--)
  28              		.loc 1 540 0
  29 0000 04E0     		b	.L2
  30              	.LVL1:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 11


  31              	.L3:
 541:.\sd/ff.c     **** 		*d++ = *s++;
  32              		.loc 1 541 0
  33 0002 0A78     		ldrb	r2, [r1]
  34 0004 0270     		strb	r2, [r0]
 540:.\sd/ff.c     **** 	while (cnt--)
  35              		.loc 1 540 0
  36 0006 1A1C     		mov	r2, r3
  37              		.loc 1 541 0
  38 0008 0131     		add	r1, r1, #1
  39              	.LVL2:
  40 000a 0130     		add	r0, r0, #1
  41              	.LVL3:
  42              	.L2:
 540:.\sd/ff.c     **** 	while (cnt--)
  43              		.loc 1 540 0 discriminator 1
  44 000c 531E     		sub	r3, r2, #1
  45              	.LVL4:
  46 000e 002A     		cmp	r2, #0
  47 0010 F7D1     		bne	.L3
 542:.\sd/ff.c     **** }
  48              		.loc 1 542 0
  49              		@ sp needed
  50 0012 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE0:
  53              		.size	mem_cpy, .-mem_cpy
  54              		.section	.text.mem_set,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
  58              		.type	mem_set, %function
  59              	mem_set:
  60              	.LFB1:
 543:.\sd/ff.c     **** 
 544:.\sd/ff.c     **** /* Fill memory */
 545:.\sd/ff.c     **** static
 546:.\sd/ff.c     **** void mem_set (void* dst, int val, UINT cnt) {
  61              		.loc 1 546 0
  62              		.cfi_startproc
  63              	.LVL5:
 547:.\sd/ff.c     **** 	BYTE *d = (BYTE*)dst;
 548:.\sd/ff.c     **** 
 549:.\sd/ff.c     **** 	while (cnt--)
 550:.\sd/ff.c     **** 		*d++ = (BYTE)val;
  64              		.loc 1 550 0
  65 0000 C9B2     		uxtb	r1, r1
  66              	.LVL6:
 549:.\sd/ff.c     **** 	while (cnt--)
  67              		.loc 1 549 0
  68 0002 02E0     		b	.L5
  69              	.LVL7:
  70              	.L6:
  71              		.loc 1 550 0
  72 0004 0170     		strb	r1, [r0]
 549:.\sd/ff.c     **** 	while (cnt--)
  73              		.loc 1 549 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 12


  74 0006 1A1C     		mov	r2, r3
  75              		.loc 1 550 0
  76 0008 0130     		add	r0, r0, #1
  77              	.LVL8:
  78              	.L5:
 549:.\sd/ff.c     **** 	while (cnt--)
  79              		.loc 1 549 0 discriminator 1
  80 000a 531E     		sub	r3, r2, #1
  81              	.LVL9:
  82 000c 002A     		cmp	r2, #0
  83 000e F9D1     		bne	.L6
 551:.\sd/ff.c     **** }
  84              		.loc 1 551 0
  85              		@ sp needed
  86 0010 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE1:
  89              		.size	mem_set, .-mem_set
  90 0012 C046     		.section	.text.mem_cmp,"ax",%progbits
  91              		.align	2
  92              		.code	16
  93              		.thumb_func
  94              		.type	mem_cmp, %function
  95              	mem_cmp:
  96              	.LFB2:
 552:.\sd/ff.c     **** 
 553:.\sd/ff.c     **** /* Compare memory to memory */
 554:.\sd/ff.c     **** static
 555:.\sd/ff.c     **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
  97              		.loc 1 555 0
  98              		.cfi_startproc
  99              	.LVL10:
 100 0000 70B5     		push	{r4, r5, r6, lr}
 101              		.cfi_def_cfa_offset 16
 102              		.cfi_offset 4, -16
 103              		.cfi_offset 5, -12
 104              		.cfi_offset 6, -8
 105              		.cfi_offset 14, -4
 106 0002 031C     		mov	r3, r0
 107              	.LVL11:
 556:.\sd/ff.c     **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 557:.\sd/ff.c     **** 	int r = 0;
 108              		.loc 1 557 0
 109 0004 0020     		mov	r0, #0
 110              	.LVL12:
 558:.\sd/ff.c     **** 
 559:.\sd/ff.c     **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 111              		.loc 1 559 0
 112 0006 01E0     		b	.L9
 113              	.LVL13:
 114              	.L10:
 115 0008 291C     		mov	r1, r5
 116 000a 331C     		mov	r3, r6
 117              	.LVL14:
 118              	.L9:
 119              		.loc 1 559 0 is_stmt 0 discriminator 1
 120 000c 541E     		sub	r4, r2, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 13


 121              	.LVL15:
 122 000e 002A     		cmp	r2, #0
 123 0010 07D0     		beq	.L8
 124              		.loc 1 559 0 discriminator 2
 125 0012 5E1C     		add	r6, r3, #1
 126              	.LVL16:
 127 0014 1878     		ldrb	r0, [r3]
 128              	.LVL17:
 129 0016 4D1C     		add	r5, r1, #1
 130              	.LVL18:
 131 0018 0B78     		ldrb	r3, [r1]
 132 001a C01A     		sub	r0, r0, r3
 133              	.LVL19:
 134 001c 221C     		mov	r2, r4
 135 001e 0028     		cmp	r0, #0
 136 0020 F2D0     		beq	.L10
 137              	.LVL20:
 138              	.L8:
 560:.\sd/ff.c     **** 	return r;
 561:.\sd/ff.c     **** }
 139              		.loc 1 561 0 is_stmt 1
 140              		@ sp needed
 141              	.LVL21:
 142 0022 70BD     		pop	{r4, r5, r6, pc}
 143              		.cfi_endproc
 144              	.LFE2:
 145              		.size	mem_cmp, .-mem_cmp
 146              		.section	.text.chk_chr,"ax",%progbits
 147              		.align	2
 148              		.code	16
 149              		.thumb_func
 150              		.type	chk_chr, %function
 151              	chk_chr:
 152              	.LFB3:
 562:.\sd/ff.c     **** 
 563:.\sd/ff.c     **** /* Check if chr is contained in the string */
 564:.\sd/ff.c     **** static
 565:.\sd/ff.c     **** int chk_chr (const char* str, int chr) {
 153              		.loc 1 565 0
 154              		.cfi_startproc
 155              	.LVL22:
 566:.\sd/ff.c     **** 	while (*str && *str != chr) str++;
 156              		.loc 1 566 0
 157 0000 00E0     		b	.L12
 158              	.L14:
 159              		.loc 1 566 0 is_stmt 0 discriminator 1
 160 0002 0130     		add	r0, r0, #1
 161              	.LVL23:
 162              	.L12:
 163 0004 0378     		ldrb	r3, [r0]
 164 0006 002B     		cmp	r3, #0
 165 0008 01D0     		beq	.L13
 166              		.loc 1 566 0 discriminator 2
 167 000a 8B42     		cmp	r3, r1
 168 000c F9D1     		bne	.L14
 169              	.L13:
 567:.\sd/ff.c     **** 	return *str;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 14


 568:.\sd/ff.c     **** }
 170              		.loc 1 568 0 is_stmt 1
 171 000e 181C     		mov	r0, r3
 172              	.LVL24:
 173              		@ sp needed
 174 0010 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE3:
 177              		.size	chk_chr, .-chk_chr
 178 0012 C046     		.section	.text.chk_lock,"ax",%progbits
 179              		.align	2
 180              		.code	16
 181              		.thumb_func
 182              		.type	chk_lock, %function
 183              	chk_lock:
 184              	.LFB4:
 569:.\sd/ff.c     **** 
 570:.\sd/ff.c     **** 
 571:.\sd/ff.c     **** 
 572:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 573:.\sd/ff.c     **** /* Request/Release grant to access the volume                            */
 574:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 575:.\sd/ff.c     **** #if _FS_REENTRANT
 576:.\sd/ff.c     **** 
 577:.\sd/ff.c     **** static
 578:.\sd/ff.c     **** int lock_fs (
 579:.\sd/ff.c     **** 	FATFS *fs		/* File system object */
 580:.\sd/ff.c     **** )
 581:.\sd/ff.c     **** {
 582:.\sd/ff.c     **** 	return ff_req_grant(fs->sobj);
 583:.\sd/ff.c     **** }
 584:.\sd/ff.c     **** 
 585:.\sd/ff.c     **** 
 586:.\sd/ff.c     **** static
 587:.\sd/ff.c     **** void unlock_fs (
 588:.\sd/ff.c     **** 	FATFS *fs,		/* File system object */
 589:.\sd/ff.c     **** 	FRESULT res		/* Result code to be returned */
 590:.\sd/ff.c     **** )
 591:.\sd/ff.c     **** {
 592:.\sd/ff.c     **** 	if (res != FR_NOT_ENABLED &&
 593:.\sd/ff.c     **** 		res != FR_INVALID_DRIVE &&
 594:.\sd/ff.c     **** 		res != FR_INVALID_OBJECT &&
 595:.\sd/ff.c     **** 		res != FR_TIMEOUT) {
 596:.\sd/ff.c     **** 		ff_rel_grant(fs->sobj);
 597:.\sd/ff.c     **** 	}
 598:.\sd/ff.c     **** }
 599:.\sd/ff.c     **** #endif
 600:.\sd/ff.c     **** 
 601:.\sd/ff.c     **** 
 602:.\sd/ff.c     **** 
 603:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 604:.\sd/ff.c     **** /* File shareing control functions                                       */
 605:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 606:.\sd/ff.c     **** #if _FS_SHARE
 607:.\sd/ff.c     **** 
 608:.\sd/ff.c     **** static
 609:.\sd/ff.c     **** FRESULT chk_lock (	/* Check if the file can be accessed */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 15


 610:.\sd/ff.c     **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 611:.\sd/ff.c     **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 612:.\sd/ff.c     **** )
 613:.\sd/ff.c     **** {
 185              		.loc 1 613 0
 186              		.cfi_startproc
 187              	.LVL25:
 188 0000 70B5     		push	{r4, r5, r6, lr}
 189              		.cfi_def_cfa_offset 16
 190              		.cfi_offset 4, -16
 191              		.cfi_offset 5, -12
 192              		.cfi_offset 6, -8
 193              		.cfi_offset 14, -4
 194              	.LVL26:
 614:.\sd/ff.c     **** 	UINT i, be;
 615:.\sd/ff.c     **** 
 616:.\sd/ff.c     **** 	/* Search file semaphore table */
 617:.\sd/ff.c     **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 195              		.loc 1 617 0
 196 0002 0025     		mov	r5, #0
 197 0004 0023     		mov	r3, #0
 618:.\sd/ff.c     **** 		if (Files[i].fs) {	/* Existing entry */
 198              		.loc 1 618 0
 199 0006 204C     		ldr	r4, .L29
 617:.\sd/ff.c     **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 200              		.loc 1 617 0
 201 0008 1DE0     		b	.L16
 202              	.LVL27:
 203              	.L20:
 204              		.loc 1 618 0
 205 000a 5A00     		lsl	r2, r3, #1
 206 000c D218     		add	r2, r2, r3
 207 000e 9200     		lsl	r2, r2, #2
 208 0010 1259     		ldr	r2, [r2, r4]
 209 0012 002A     		cmp	r2, #0
 210 0014 15D0     		beq	.L17
 619:.\sd/ff.c     **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 211              		.loc 1 619 0
 212 0016 0668     		ldr	r6, [r0]
 213 0018 B242     		cmp	r2, r6
 214 001a 13D1     		bne	.L18
 620:.\sd/ff.c     **** 				Files[i].clu == dj->sclust &&
 215              		.loc 1 620 0 discriminator 1
 216 001c 5A00     		lsl	r2, r3, #1
 217 001e D218     		add	r2, r2, r3
 218 0020 9200     		lsl	r2, r2, #2
 219 0022 194E     		ldr	r6, .L29
 220 0024 B218     		add	r2, r6, r2
 221 0026 5268     		ldr	r2, [r2, #4]
 619:.\sd/ff.c     **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 222              		.loc 1 619 0 discriminator 1
 223 0028 8668     		ldr	r6, [r0, #8]
 224 002a B242     		cmp	r2, r6
 225 002c 0AD1     		bne	.L18
 621:.\sd/ff.c     **** 				Files[i].idx == dj->index) break;
 226              		.loc 1 621 0
 227 002e 5A00     		lsl	r2, r3, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 16


 228 0030 D218     		add	r2, r2, r3
 229 0032 9200     		lsl	r2, r2, #2
 230 0034 144E     		ldr	r6, .L29
 231 0036 B218     		add	r2, r6, r2
 232 0038 1689     		ldrh	r6, [r2, #8]
 233 003a C288     		ldrh	r2, [r0, #6]
 620:.\sd/ff.c     **** 				Files[i].clu == dj->sclust &&
 234              		.loc 1 620 0
 235 003c 9642     		cmp	r6, r2
 236 003e 01D1     		bne	.L18
 237 0040 03E0     		b	.L19
 238              	.L17:
 622:.\sd/ff.c     **** 		} else {			/* Blank entry */
 623:.\sd/ff.c     **** 			be++;
 239              		.loc 1 623 0
 240 0042 0135     		add	r5, r5, #1
 241              	.LVL28:
 242              	.L18:
 617:.\sd/ff.c     **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 243              		.loc 1 617 0
 244 0044 0133     		add	r3, r3, #1
 245              	.LVL29:
 246              	.L16:
 617:.\sd/ff.c     **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 247              		.loc 1 617 0 is_stmt 0 discriminator 1
 248 0046 022B     		cmp	r3, #2
 249 0048 DFD9     		bls	.L20
 250              	.L19:
 624:.\sd/ff.c     **** 		}
 625:.\sd/ff.c     **** 	}
 626:.\sd/ff.c     **** 	if (i == _FS_SHARE)	/* The file is not opened */
 251              		.loc 1 626 0 is_stmt 1
 252 004a 032B     		cmp	r3, #3
 253 004c 09D1     		bne	.L21
 627:.\sd/ff.c     **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 254              		.loc 1 627 0
 255 004e 002D     		cmp	r5, #0
 256 0050 03D1     		bne	.L25
 257              		.loc 1 627 0 is_stmt 0 discriminator 2
 258 0052 0229     		cmp	r1, #2
 259 0054 03D1     		bne	.L26
 260              		.loc 1 627 0
 261 0056 0020     		mov	r0, #0
 262              	.LVL30:
 263 0058 14E0     		b	.L23
 264              	.LVL31:
 265              	.L25:
 266 005a 0020     		mov	r0, #0
 267              	.LVL32:
 268 005c 12E0     		b	.L23
 269              	.LVL33:
 270              	.L26:
 271 005e 1220     		mov	r0, #18
 272              	.LVL34:
 273 0060 10E0     		b	.L23
 274              	.LVL35:
 275              	.L21:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 17


 628:.\sd/ff.c     **** 
 629:.\sd/ff.c     **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 630:.\sd/ff.c     **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 276              		.loc 1 630 0 is_stmt 1
 277 0062 0029     		cmp	r1, #0
 278 0064 0BD1     		bne	.L27
 279              		.loc 1 630 0 is_stmt 0 discriminator 2
 280 0066 5A00     		lsl	r2, r3, #1
 281 0068 D318     		add	r3, r2, r3
 282              	.LVL36:
 283 006a 9B00     		lsl	r3, r3, #2
 284 006c 064A     		ldr	r2, .L29
 285 006e D318     		add	r3, r2, r3
 286 0070 5A89     		ldrh	r2, [r3, #10]
 287 0072 8023     		mov	r3, #128
 288 0074 5B00     		lsl	r3, r3, #1
 289 0076 9A42     		cmp	r2, r3
 290 0078 03D1     		bne	.L28
 291              		.loc 1 630 0
 292 007a 1020     		mov	r0, #16
 293              	.LVL37:
 294 007c 02E0     		b	.L23
 295              	.LVL38:
 296              	.L27:
 297 007e 1020     		mov	r0, #16
 298              	.LVL39:
 299 0080 00E0     		b	.L23
 300              	.LVL40:
 301              	.L28:
 302 0082 0020     		mov	r0, #0
 303              	.LVL41:
 304              	.L23:
 631:.\sd/ff.c     **** }
 305              		.loc 1 631 0 is_stmt 1
 306              		@ sp needed
 307              	.LVL42:
 308 0084 70BD     		pop	{r4, r5, r6, pc}
 309              	.L30:
 310 0086 C046     		.align	2
 311              	.L29:
 312 0088 00000000 		.word	.LANCHOR0
 313              		.cfi_endproc
 314              	.LFE4:
 315              		.size	chk_lock, .-chk_lock
 316              		.section	.text.enq_lock,"ax",%progbits
 317              		.align	2
 318              		.code	16
 319              		.thumb_func
 320              		.type	enq_lock, %function
 321              	enq_lock:
 322              	.LFB5:
 632:.\sd/ff.c     **** 
 633:.\sd/ff.c     **** 
 634:.\sd/ff.c     **** static
 635:.\sd/ff.c     **** int enq_lock (void)	/* Check if an entry is available for a new file */
 636:.\sd/ff.c     **** {
 323              		.loc 1 636 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 18


 324              		.cfi_startproc
 325              	.LVL43:
 637:.\sd/ff.c     **** 	UINT i;
 638:.\sd/ff.c     **** 
 639:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 326              		.loc 1 639 0
 327 0000 0020     		mov	r0, #0
 328 0002 084A     		ldr	r2, .L35
 329 0004 00E0     		b	.L32
 330              	.LVL44:
 331              	.L34:
 332              		.loc 1 639 0 is_stmt 0 discriminator 1
 333 0006 0130     		add	r0, r0, #1
 334              	.LVL45:
 335              	.L32:
 336 0008 0228     		cmp	r0, #2
 337 000a 05D8     		bhi	.L33
 338              		.loc 1 639 0 discriminator 2
 339 000c 4300     		lsl	r3, r0, #1
 340 000e 1B18     		add	r3, r3, r0
 341 0010 9B00     		lsl	r3, r3, #2
 342 0012 9B58     		ldr	r3, [r3, r2]
 343 0014 002B     		cmp	r3, #0
 344 0016 F6D1     		bne	.L34
 345              	.L33:
 640:.\sd/ff.c     **** 	return (i == _FS_SHARE) ? 0 : 1;
 346              		.loc 1 640 0 is_stmt 1
 347 0018 0338     		sub	r0, r0, #3
 348              	.LVL46:
 349 001a 431E     		sub	r3, r0, #1
 350 001c 9841     		sbc	r0, r0, r3
 351              	.LVL47:
 352 001e C0B2     		uxtb	r0, r0
 641:.\sd/ff.c     **** }
 353              		.loc 1 641 0
 354              		@ sp needed
 355 0020 7047     		bx	lr
 356              	.L36:
 357 0022 C046     		.align	2
 358              	.L35:
 359 0024 00000000 		.word	.LANCHOR0
 360              		.cfi_endproc
 361              	.LFE5:
 362              		.size	enq_lock, .-enq_lock
 363              		.section	.text.inc_lock,"ax",%progbits
 364              		.align	2
 365              		.code	16
 366              		.thumb_func
 367              		.type	inc_lock, %function
 368              	inc_lock:
 369              	.LFB6:
 642:.\sd/ff.c     **** 
 643:.\sd/ff.c     **** 
 644:.\sd/ff.c     **** static
 645:.\sd/ff.c     **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 646:.\sd/ff.c     **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 647:.\sd/ff.c     **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 19


 648:.\sd/ff.c     **** )
 649:.\sd/ff.c     **** {
 370              		.loc 1 649 0
 371              		.cfi_startproc
 372              	.LVL48:
 373 0000 70B5     		push	{r4, r5, r6, lr}
 374              		.cfi_def_cfa_offset 16
 375              		.cfi_offset 4, -16
 376              		.cfi_offset 5, -12
 377              		.cfi_offset 6, -8
 378              		.cfi_offset 14, -4
 379              	.LVL49:
 650:.\sd/ff.c     **** 	UINT i;
 651:.\sd/ff.c     **** 
 652:.\sd/ff.c     **** 
 653:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 380              		.loc 1 653 0
 381 0002 0023     		mov	r3, #0
 654:.\sd/ff.c     **** 		if (Files[i].fs == dj->fs &&
 382              		.loc 1 654 0
 383 0004 2F4C     		ldr	r4, .L53
 653:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 384              		.loc 1 653 0
 385 0006 18E0     		b	.L38
 386              	.LVL50:
 387              	.L41:
 388              		.loc 1 654 0
 389 0008 5A00     		lsl	r2, r3, #1
 390 000a D218     		add	r2, r2, r3
 391 000c 9200     		lsl	r2, r2, #2
 392 000e 1259     		ldr	r2, [r2, r4]
 393 0010 0568     		ldr	r5, [r0]
 394 0012 AA42     		cmp	r2, r5
 395 0014 10D1     		bne	.L39
 655:.\sd/ff.c     **** 			Files[i].clu == dj->sclust &&
 396              		.loc 1 655 0 discriminator 1
 397 0016 5A00     		lsl	r2, r3, #1
 398 0018 D218     		add	r2, r2, r3
 399 001a 9200     		lsl	r2, r2, #2
 400 001c 294E     		ldr	r6, .L53
 401 001e B218     		add	r2, r6, r2
 402 0020 5268     		ldr	r2, [r2, #4]
 654:.\sd/ff.c     **** 		if (Files[i].fs == dj->fs &&
 403              		.loc 1 654 0 discriminator 1
 404 0022 8568     		ldr	r5, [r0, #8]
 405 0024 AA42     		cmp	r2, r5
 406 0026 07D1     		bne	.L39
 656:.\sd/ff.c     **** 			Files[i].idx == dj->index) break;
 407              		.loc 1 656 0
 408 0028 5A00     		lsl	r2, r3, #1
 409 002a D218     		add	r2, r2, r3
 410 002c 9200     		lsl	r2, r2, #2
 411 002e B218     		add	r2, r6, r2
 412 0030 1589     		ldrh	r5, [r2, #8]
 413 0032 C288     		ldrh	r2, [r0, #6]
 655:.\sd/ff.c     **** 			Files[i].clu == dj->sclust &&
 414              		.loc 1 655 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 20


 415 0034 9542     		cmp	r5, r2
 416 0036 02D0     		beq	.L40
 417              	.L39:
 653:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 418              		.loc 1 653 0
 419 0038 0133     		add	r3, r3, #1
 420              	.LVL51:
 421              	.L38:
 653:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 422              		.loc 1 653 0 is_stmt 0 discriminator 1
 423 003a 022B     		cmp	r3, #2
 424 003c E4D9     		bls	.L41
 425              	.L40:
 657:.\sd/ff.c     **** 	}
 658:.\sd/ff.c     **** 
 659:.\sd/ff.c     **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 426              		.loc 1 659 0 is_stmt 1
 427 003e 032B     		cmp	r3, #3
 428 0040 1CD1     		bne	.L43
 429 0042 01E0     		b	.L49
 430              	.L45:
 660:.\sd/ff.c     **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 431              		.loc 1 660 0 discriminator 1
 432 0044 0133     		add	r3, r3, #1
 433              	.LVL52:
 434 0046 01E0     		b	.L42
 435              	.L49:
 436 0048 0023     		mov	r3, #0
 437              	.LVL53:
 438              		.loc 1 660 0 is_stmt 0
 439 004a 1E4C     		ldr	r4, .L53
 440              	.L42:
 441              	.LVL54:
 442              		.loc 1 660 0 discriminator 1
 443 004c 022B     		cmp	r3, #2
 444 004e 05D8     		bhi	.L44
 445              		.loc 1 660 0 discriminator 2
 446 0050 5A00     		lsl	r2, r3, #1
 447 0052 D218     		add	r2, r2, r3
 448 0054 9200     		lsl	r2, r2, #2
 449 0056 1259     		ldr	r2, [r2, r4]
 450 0058 002A     		cmp	r2, #0
 451 005a F3D1     		bne	.L45
 452              	.L44:
 661:.\sd/ff.c     **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 453              		.loc 1 661 0 is_stmt 1
 454 005c 032B     		cmp	r3, #3
 455 005e 2CD0     		beq	.L50
 662:.\sd/ff.c     **** 		Files[i].fs = dj->fs;
 456              		.loc 1 662 0
 457 0060 184D     		ldr	r5, .L53
 458 0062 5A00     		lsl	r2, r3, #1
 459 0064 D418     		add	r4, r2, r3
 460 0066 A400     		lsl	r4, r4, #2
 461 0068 0668     		ldr	r6, [r0]
 462 006a 6651     		str	r6, [r4, r5]
 663:.\sd/ff.c     **** 		Files[i].clu = dj->sclust;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 21


 463              		.loc 1 663 0
 464 006c 2A19     		add	r2, r5, r4
 465 006e 8468     		ldr	r4, [r0, #8]
 466 0070 5460     		str	r4, [r2, #4]
 664:.\sd/ff.c     **** 		Files[i].idx = dj->index;
 467              		.loc 1 664 0
 468 0072 C488     		ldrh	r4, [r0, #6]
 469 0074 101C     		mov	r0, r2
 470              	.LVL55:
 471 0076 1481     		strh	r4, [r2, #8]
 665:.\sd/ff.c     **** 		Files[i].ctr = 0;
 472              		.loc 1 665 0
 473 0078 0022     		mov	r2, #0
 474 007a 4281     		strh	r2, [r0, #10]
 475              	.L43:
 666:.\sd/ff.c     **** 	}
 667:.\sd/ff.c     **** 
 668:.\sd/ff.c     **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 476              		.loc 1 668 0
 477 007c 0029     		cmp	r1, #0
 478 007e 07D0     		beq	.L47
 479              		.loc 1 668 0 is_stmt 0 discriminator 1
 480 0080 5A00     		lsl	r2, r3, #1
 481 0082 D218     		add	r2, r2, r3
 482 0084 9200     		lsl	r2, r2, #2
 483 0086 0F48     		ldr	r0, .L53
 484 0088 8218     		add	r2, r0, r2
 485 008a 5289     		ldrh	r2, [r2, #10]
 486 008c 002A     		cmp	r2, #0
 487 008e 16D1     		bne	.L51
 488              	.L47:
 669:.\sd/ff.c     **** 
 670:.\sd/ff.c     **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 489              		.loc 1 670 0 is_stmt 1
 490 0090 0029     		cmp	r1, #0
 491 0092 08D1     		bne	.L52
 492              		.loc 1 670 0 is_stmt 0 discriminator 1
 493 0094 5A00     		lsl	r2, r3, #1
 494 0096 D218     		add	r2, r2, r3
 495 0098 9200     		lsl	r2, r2, #2
 496 009a 0A49     		ldr	r1, .L53
 497              	.LVL56:
 498 009c 8A18     		add	r2, r1, r2
 499 009e 5089     		ldrh	r0, [r2, #10]
 500 00a0 0130     		add	r0, r0, #1
 501 00a2 80B2     		uxth	r0, r0
 502 00a4 01E0     		b	.L48
 503              	.LVL57:
 504              	.L52:
 505              		.loc 1 670 0
 506 00a6 8020     		mov	r0, #128
 507 00a8 4000     		lsl	r0, r0, #1
 508              	.LVL58:
 509              	.L48:
 510              		.loc 1 670 0 discriminator 3
 511 00aa 5A00     		lsl	r2, r3, #1
 512 00ac D218     		add	r2, r2, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 22


 513 00ae 9200     		lsl	r2, r2, #2
 514 00b0 0449     		ldr	r1, .L53
 515 00b2 8A18     		add	r2, r1, r2
 516 00b4 5081     		strh	r0, [r2, #10]
 671:.\sd/ff.c     **** 
 672:.\sd/ff.c     **** 	return i + 1;
 517              		.loc 1 672 0 is_stmt 1 discriminator 3
 518 00b6 581C     		add	r0, r3, #1
 519 00b8 02E0     		b	.L46
 520              	.LVL59:
 521              	.L50:
 661:.\sd/ff.c     **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 522              		.loc 1 661 0
 523 00ba 0020     		mov	r0, #0
 524              	.LVL60:
 525 00bc 00E0     		b	.L46
 526              	.L51:
 668:.\sd/ff.c     **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 527              		.loc 1 668 0
 528 00be 0020     		mov	r0, #0
 529              	.LVL61:
 530              	.L46:
 673:.\sd/ff.c     **** }
 531              		.loc 1 673 0
 532              		@ sp needed
 533 00c0 70BD     		pop	{r4, r5, r6, pc}
 534              	.L54:
 535 00c2 C046     		.align	2
 536              	.L53:
 537 00c4 00000000 		.word	.LANCHOR0
 538              		.cfi_endproc
 539              	.LFE6:
 540              		.size	inc_lock, .-inc_lock
 541              		.section	.text.dec_lock,"ax",%progbits
 542              		.align	2
 543              		.code	16
 544              		.thumb_func
 545              		.type	dec_lock, %function
 546              	dec_lock:
 547              	.LFB7:
 674:.\sd/ff.c     **** 
 675:.\sd/ff.c     **** 
 676:.\sd/ff.c     **** static
 677:.\sd/ff.c     **** FRESULT dec_lock (	/* Decrement file open counter */
 678:.\sd/ff.c     **** 	UINT i			/* Semaphore index */
 679:.\sd/ff.c     **** )
 680:.\sd/ff.c     **** {
 548              		.loc 1 680 0
 549              		.cfi_startproc
 550              	.LVL62:
 681:.\sd/ff.c     **** 	WORD n;
 682:.\sd/ff.c     **** 	FRESULT res;
 683:.\sd/ff.c     **** 
 684:.\sd/ff.c     **** 
 685:.\sd/ff.c     **** 	if (--i < _FS_SHARE) {
 551              		.loc 1 685 0
 552 0000 0138     		sub	r0, r0, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 23


 553              	.LVL63:
 554 0002 0228     		cmp	r0, #2
 555 0004 1DD8     		bhi	.L59
 686:.\sd/ff.c     **** 		n = Files[i].ctr;
 556              		.loc 1 686 0
 557 0006 4300     		lsl	r3, r0, #1
 558 0008 1B18     		add	r3, r3, r0
 559 000a 9B00     		lsl	r3, r3, #2
 560 000c 0F4A     		ldr	r2, .L62
 561 000e D318     		add	r3, r2, r3
 562 0010 5B89     		ldrh	r3, [r3, #10]
 563              	.LVL64:
 687:.\sd/ff.c     **** 		if (n == 0x100) n = 0;
 564              		.loc 1 687 0
 565 0012 8022     		mov	r2, #128
 566              	.LVL65:
 567 0014 5200     		lsl	r2, r2, #1
 568 0016 9342     		cmp	r3, r2
 569 0018 00D1     		bne	.L57
 570 001a 0023     		mov	r3, #0
 571              	.L57:
 572              	.LVL66:
 688:.\sd/ff.c     **** 		if (n) n--;
 573              		.loc 1 688 0
 574 001c 002B     		cmp	r3, #0
 575 001e 01D0     		beq	.L58
 576              		.loc 1 688 0 is_stmt 0 discriminator 1
 577 0020 013B     		sub	r3, r3, #1
 578              	.LVL67:
 579 0022 9BB2     		uxth	r3, r3
 580              	.LVL68:
 581              	.L58:
 689:.\sd/ff.c     **** 		Files[i].ctr = n;
 582              		.loc 1 689 0 is_stmt 1
 583 0024 4200     		lsl	r2, r0, #1
 584 0026 1218     		add	r2, r2, r0
 585 0028 9200     		lsl	r2, r2, #2
 586 002a 0849     		ldr	r1, .L62
 587 002c 8A18     		add	r2, r1, r2
 588 002e 5381     		strh	r3, [r2, #10]
 690:.\sd/ff.c     **** 		if (!n) Files[i].fs = 0;
 589              		.loc 1 690 0
 590 0030 002B     		cmp	r3, #0
 591 0032 08D1     		bne	.L61
 592              		.loc 1 690 0 is_stmt 0 discriminator 1
 593 0034 4300     		lsl	r3, r0, #1
 594              	.LVL69:
 595 0036 1818     		add	r0, r3, r0
 596              	.LVL70:
 597 0038 8000     		lsl	r0, r0, #2
 598 003a 0022     		mov	r2, #0
 599 003c 4250     		str	r2, [r0, r1]
 691:.\sd/ff.c     **** 		res = FR_OK;
 600              		.loc 1 691 0 is_stmt 1 discriminator 1
 601 003e 0020     		mov	r0, #0
 602 0040 02E0     		b	.L56
 603              	.LVL71:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 24


 604              	.L59:
 692:.\sd/ff.c     **** 	} else {
 693:.\sd/ff.c     **** 		res = FR_INT_ERR;
 605              		.loc 1 693 0
 606 0042 0220     		mov	r0, #2
 607              	.LVL72:
 608 0044 00E0     		b	.L56
 609              	.LVL73:
 610              	.L61:
 691:.\sd/ff.c     **** 		res = FR_OK;
 611              		.loc 1 691 0
 612 0046 0020     		mov	r0, #0
 613              	.LVL74:
 614              	.L56:
 694:.\sd/ff.c     **** 	}
 695:.\sd/ff.c     **** 	return res;
 696:.\sd/ff.c     **** }
 615              		.loc 1 696 0
 616              		@ sp needed
 617 0048 7047     		bx	lr
 618              	.L63:
 619 004a C046     		.align	2
 620              	.L62:
 621 004c 00000000 		.word	.LANCHOR0
 622              		.cfi_endproc
 623              	.LFE7:
 624              		.size	dec_lock, .-dec_lock
 625              		.section	.text.clear_lock,"ax",%progbits
 626              		.align	2
 627              		.code	16
 628              		.thumb_func
 629              		.type	clear_lock, %function
 630              	clear_lock:
 631              	.LFB8:
 697:.\sd/ff.c     **** 
 698:.\sd/ff.c     **** 
 699:.\sd/ff.c     **** static
 700:.\sd/ff.c     **** void clear_lock (	/* Clear lock entries of the volume */
 701:.\sd/ff.c     **** 	FATFS *fs
 702:.\sd/ff.c     **** )
 703:.\sd/ff.c     **** {
 632              		.loc 1 703 0
 633              		.cfi_startproc
 634              	.LVL75:
 635 0000 30B5     		push	{r4, r5, lr}
 636              		.cfi_def_cfa_offset 12
 637              		.cfi_offset 4, -12
 638              		.cfi_offset 5, -8
 639              		.cfi_offset 14, -4
 640              	.LVL76:
 704:.\sd/ff.c     **** 	UINT i;
 705:.\sd/ff.c     **** 
 706:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {
 641              		.loc 1 706 0
 642 0002 0023     		mov	r3, #0
 707:.\sd/ff.c     **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 643              		.loc 1 707 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 25


 644 0004 0849     		ldr	r1, .L68
 645 0006 0024     		mov	r4, #0
 706:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {
 646              		.loc 1 706 0
 647 0008 0BE0     		b	.L65
 648              	.LVL77:
 649              	.L67:
 650              		.loc 1 707 0
 651 000a 5A00     		lsl	r2, r3, #1
 652 000c D218     		add	r2, r2, r3
 653 000e 9200     		lsl	r2, r2, #2
 654 0010 5258     		ldr	r2, [r2, r1]
 655 0012 8242     		cmp	r2, r0
 656 0014 04D1     		bne	.L66
 657              		.loc 1 707 0 is_stmt 0 discriminator 1
 658 0016 5A00     		lsl	r2, r3, #1
 659 0018 D218     		add	r2, r2, r3
 660 001a 9200     		lsl	r2, r2, #2
 661 001c 024D     		ldr	r5, .L68
 662 001e 5451     		str	r4, [r2, r5]
 663              	.L66:
 706:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {
 664              		.loc 1 706 0 is_stmt 1
 665 0020 0133     		add	r3, r3, #1
 666              	.LVL78:
 667              	.L65:
 706:.\sd/ff.c     **** 	for (i = 0; i < _FS_SHARE; i++) {
 668              		.loc 1 706 0 is_stmt 0 discriminator 1
 669 0022 022B     		cmp	r3, #2
 670 0024 F1D9     		bls	.L67
 708:.\sd/ff.c     **** 	}
 709:.\sd/ff.c     **** }
 671              		.loc 1 709 0 is_stmt 1
 672              		@ sp needed
 673 0026 30BD     		pop	{r4, r5, pc}
 674              	.L69:
 675              		.align	2
 676              	.L68:
 677 0028 00000000 		.word	.LANCHOR0
 678              		.cfi_endproc
 679              	.LFE8:
 680              		.size	clear_lock, .-clear_lock
 681              		.section	.text.create_name,"ax",%progbits
 682              		.align	2
 683              		.code	16
 684              		.thumb_func
 685              		.type	create_name, %function
 686              	create_name:
 687              	.LFB22:
 710:.\sd/ff.c     **** #endif
 711:.\sd/ff.c     **** 
 712:.\sd/ff.c     **** 
 713:.\sd/ff.c     **** 
 714:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 715:.\sd/ff.c     **** /* Change window offset                                                  */
 716:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 717:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 26


 718:.\sd/ff.c     **** static
 719:.\sd/ff.c     **** FRESULT move_window (
 720:.\sd/ff.c     **** 	FATFS *fs,		/* File system object */
 721:.\sd/ff.c     **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 722:.\sd/ff.c     **** )					/* Move to zero only writes back dirty window */
 723:.\sd/ff.c     **** {
 724:.\sd/ff.c     **** 	DWORD wsect;
 725:.\sd/ff.c     **** 
 726:.\sd/ff.c     **** 
 727:.\sd/ff.c     **** 	wsect = fs->winsect;
 728:.\sd/ff.c     **** 	if (wsect != sector) {	/* Changed current window */
 729:.\sd/ff.c     **** #if !_FS_READONLY
 730:.\sd/ff.c     **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 731:.\sd/ff.c     **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 732:.\sd/ff.c     **** 				return FR_DISK_ERR;
 733:.\sd/ff.c     **** 			fs->wflag = 0;
 734:.\sd/ff.c     **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 735:.\sd/ff.c     **** 				BYTE nf;
 736:.\sd/ff.c     **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 737:.\sd/ff.c     **** 					wsect += fs->fsize;
 738:.\sd/ff.c     **** 					disk_write(fs->drv, fs->win, wsect, 1);
 739:.\sd/ff.c     **** 				}
 740:.\sd/ff.c     **** 			}
 741:.\sd/ff.c     **** 		}
 742:.\sd/ff.c     **** #endif
 743:.\sd/ff.c     **** 		if (sector) {
 744:.\sd/ff.c     **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 745:.\sd/ff.c     **** 				return FR_DISK_ERR;
 746:.\sd/ff.c     **** 			fs->winsect = sector;
 747:.\sd/ff.c     **** 		}
 748:.\sd/ff.c     **** 	}
 749:.\sd/ff.c     **** 
 750:.\sd/ff.c     **** 	return FR_OK;
 751:.\sd/ff.c     **** }
 752:.\sd/ff.c     **** 
 753:.\sd/ff.c     **** 
 754:.\sd/ff.c     **** 
 755:.\sd/ff.c     **** 
 756:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 757:.\sd/ff.c     **** /* Clean-up cached data                                                  */
 758:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 759:.\sd/ff.c     **** #if !_FS_READONLY
 760:.\sd/ff.c     **** static
 761:.\sd/ff.c     **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 762:.\sd/ff.c     **** 	FATFS *fs	/* File system object */
 763:.\sd/ff.c     **** )
 764:.\sd/ff.c     **** {
 765:.\sd/ff.c     **** 	FRESULT res;
 766:.\sd/ff.c     **** 
 767:.\sd/ff.c     **** 
 768:.\sd/ff.c     **** 	res = move_window(fs, 0);
 769:.\sd/ff.c     **** 	if (res == FR_OK) {
 770:.\sd/ff.c     **** 		/* Update FSInfo sector if needed */
 771:.\sd/ff.c     **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 772:.\sd/ff.c     **** 			fs->winsect = 0;
 773:.\sd/ff.c     **** 			/* Create FSInfo structure */
 774:.\sd/ff.c     **** 			mem_set(fs->win, 0, 512);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 27


 775:.\sd/ff.c     **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 776:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 777:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 778:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 779:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 780:.\sd/ff.c     **** 			/* Write it into the FSInfo sector */
 781:.\sd/ff.c     **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 782:.\sd/ff.c     **** 			fs->fsi_flag = 0;
 783:.\sd/ff.c     **** 		}
 784:.\sd/ff.c     **** 		/* Make sure that no pending write process in the physical drive */
 785:.\sd/ff.c     **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 786:.\sd/ff.c     **** 			res = FR_DISK_ERR;
 787:.\sd/ff.c     **** 	}
 788:.\sd/ff.c     **** 
 789:.\sd/ff.c     **** 	return res;
 790:.\sd/ff.c     **** }
 791:.\sd/ff.c     **** #endif
 792:.\sd/ff.c     **** 
 793:.\sd/ff.c     **** 
 794:.\sd/ff.c     **** 
 795:.\sd/ff.c     **** 
 796:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 797:.\sd/ff.c     **** /* Get sector# from cluster#                                             */
 798:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 799:.\sd/ff.c     **** 
 800:.\sd/ff.c     **** 
 801:.\sd/ff.c     **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 802:.\sd/ff.c     **** 	FATFS *fs,		/* File system object */
 803:.\sd/ff.c     **** 	DWORD clst		/* Cluster# to be converted */
 804:.\sd/ff.c     **** )
 805:.\sd/ff.c     **** {
 806:.\sd/ff.c     **** 	clst -= 2;
 807:.\sd/ff.c     **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 808:.\sd/ff.c     **** 	return clst * fs->csize + fs->database;
 809:.\sd/ff.c     **** }
 810:.\sd/ff.c     **** 
 811:.\sd/ff.c     **** 
 812:.\sd/ff.c     **** 
 813:.\sd/ff.c     **** 
 814:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 815:.\sd/ff.c     **** /* FAT access - Read value of a FAT entry                                */
 816:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 817:.\sd/ff.c     **** 
 818:.\sd/ff.c     **** 
 819:.\sd/ff.c     **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 820:.\sd/ff.c     **** 	FATFS *fs,	/* File system object */
 821:.\sd/ff.c     **** 	DWORD clst	/* Cluster# to get the link information */
 822:.\sd/ff.c     **** )
 823:.\sd/ff.c     **** {
 824:.\sd/ff.c     **** 	UINT wc, bc;
 825:.\sd/ff.c     **** 	BYTE *p;
 826:.\sd/ff.c     **** 
 827:.\sd/ff.c     **** 
 828:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 829:.\sd/ff.c     **** 		return 1;
 830:.\sd/ff.c     **** 
 831:.\sd/ff.c     **** 	switch (fs->fs_type) {
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 28


 832:.\sd/ff.c     **** 	case FS_FAT12 :
 833:.\sd/ff.c     **** 		bc = (UINT)clst; bc += bc / 2;
 834:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 835:.\sd/ff.c     **** 		wc = fs->win[bc % SS(fs)]; bc++;
 836:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 837:.\sd/ff.c     **** 		wc |= fs->win[bc % SS(fs)] << 8;
 838:.\sd/ff.c     **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 839:.\sd/ff.c     **** 
 840:.\sd/ff.c     **** 	case FS_FAT16 :
 841:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 842:.\sd/ff.c     **** 		p = &fs->win[clst * 2 % SS(fs)];
 843:.\sd/ff.c     **** 		return LD_WORD(p);
 844:.\sd/ff.c     **** 
 845:.\sd/ff.c     **** 	case FS_FAT32 :
 846:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 847:.\sd/ff.c     **** 		p = &fs->win[clst * 4 % SS(fs)];
 848:.\sd/ff.c     **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 849:.\sd/ff.c     **** 	}
 850:.\sd/ff.c     **** 
 851:.\sd/ff.c     **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 852:.\sd/ff.c     **** }
 853:.\sd/ff.c     **** 
 854:.\sd/ff.c     **** 
 855:.\sd/ff.c     **** 
 856:.\sd/ff.c     **** 
 857:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 858:.\sd/ff.c     **** /* FAT access - Change value of a FAT entry                              */
 859:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 860:.\sd/ff.c     **** #if !_FS_READONLY
 861:.\sd/ff.c     **** 
 862:.\sd/ff.c     **** FRESULT put_fat (
 863:.\sd/ff.c     **** 	FATFS *fs,	/* File system object */
 864:.\sd/ff.c     **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 865:.\sd/ff.c     **** 	DWORD val	/* New value to mark the cluster */
 866:.\sd/ff.c     **** )
 867:.\sd/ff.c     **** {
 868:.\sd/ff.c     **** 	UINT bc;
 869:.\sd/ff.c     **** 	BYTE *p;
 870:.\sd/ff.c     **** 	FRESULT res;
 871:.\sd/ff.c     **** 
 872:.\sd/ff.c     **** 
 873:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 874:.\sd/ff.c     **** 		res = FR_INT_ERR;
 875:.\sd/ff.c     **** 
 876:.\sd/ff.c     **** 	} else {
 877:.\sd/ff.c     **** 		switch (fs->fs_type) {
 878:.\sd/ff.c     **** 		case FS_FAT12 :
 879:.\sd/ff.c     **** 			bc = clst; bc += bc / 2;
 880:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 881:.\sd/ff.c     **** 			if (res != FR_OK) break;
 882:.\sd/ff.c     **** 			p = &fs->win[bc % SS(fs)];
 883:.\sd/ff.c     **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 884:.\sd/ff.c     **** 			bc++;
 885:.\sd/ff.c     **** 			fs->wflag = 1;
 886:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 887:.\sd/ff.c     **** 			if (res != FR_OK) break;
 888:.\sd/ff.c     **** 			p = &fs->win[bc % SS(fs)];
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 29


 889:.\sd/ff.c     **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 890:.\sd/ff.c     **** 			break;
 891:.\sd/ff.c     **** 
 892:.\sd/ff.c     **** 		case FS_FAT16 :
 893:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 894:.\sd/ff.c     **** 			if (res != FR_OK) break;
 895:.\sd/ff.c     **** 			p = &fs->win[clst * 2 % SS(fs)];
 896:.\sd/ff.c     **** 			ST_WORD(p, (WORD)val);
 897:.\sd/ff.c     **** 			break;
 898:.\sd/ff.c     **** 
 899:.\sd/ff.c     **** 		case FS_FAT32 :
 900:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 901:.\sd/ff.c     **** 			if (res != FR_OK) break;
 902:.\sd/ff.c     **** 			p = &fs->win[clst * 4 % SS(fs)];
 903:.\sd/ff.c     **** 			val |= LD_DWORD(p) & 0xF0000000;
 904:.\sd/ff.c     **** 			ST_DWORD(p, val);
 905:.\sd/ff.c     **** 			break;
 906:.\sd/ff.c     **** 
 907:.\sd/ff.c     **** 		default :
 908:.\sd/ff.c     **** 			res = FR_INT_ERR;
 909:.\sd/ff.c     **** 		}
 910:.\sd/ff.c     **** 		fs->wflag = 1;
 911:.\sd/ff.c     **** 	}
 912:.\sd/ff.c     **** 
 913:.\sd/ff.c     **** 	return res;
 914:.\sd/ff.c     **** }
 915:.\sd/ff.c     **** #endif /* !_FS_READONLY */
 916:.\sd/ff.c     **** 
 917:.\sd/ff.c     **** 
 918:.\sd/ff.c     **** 
 919:.\sd/ff.c     **** 
 920:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 921:.\sd/ff.c     **** /* FAT handling - Remove a cluster chain                                 */
 922:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 923:.\sd/ff.c     **** #if !_FS_READONLY
 924:.\sd/ff.c     **** static
 925:.\sd/ff.c     **** FRESULT remove_chain (
 926:.\sd/ff.c     **** 	FATFS *fs,			/* File system object */
 927:.\sd/ff.c     **** 	DWORD clst			/* Cluster# to remove a chain from */
 928:.\sd/ff.c     **** )
 929:.\sd/ff.c     **** {
 930:.\sd/ff.c     **** 	FRESULT res;
 931:.\sd/ff.c     **** 	DWORD nxt;
 932:.\sd/ff.c     **** #if _USE_ERASE
 933:.\sd/ff.c     **** 	DWORD scl = clst, ecl = clst, resion[2];
 934:.\sd/ff.c     **** #endif
 935:.\sd/ff.c     **** 
 936:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 937:.\sd/ff.c     **** 		res = FR_INT_ERR;
 938:.\sd/ff.c     **** 
 939:.\sd/ff.c     **** 	} else {
 940:.\sd/ff.c     **** 		res = FR_OK;
 941:.\sd/ff.c     **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 942:.\sd/ff.c     **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 943:.\sd/ff.c     **** 			if (nxt == 0) break;				/* Empty cluster? */
 944:.\sd/ff.c     **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 945:.\sd/ff.c     **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 30


 946:.\sd/ff.c     **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 947:.\sd/ff.c     **** 			if (res != FR_OK) break;
 948:.\sd/ff.c     **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 949:.\sd/ff.c     **** 				fs->free_clust++;
 950:.\sd/ff.c     **** 				fs->fsi_flag = 1;
 951:.\sd/ff.c     **** 			}
 952:.\sd/ff.c     **** #if _USE_ERASE
 953:.\sd/ff.c     **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 954:.\sd/ff.c     **** 				ecl = nxt;
 955:.\sd/ff.c     **** 			} else {				/* End of contiguous clusters */ 
 956:.\sd/ff.c     **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 957:.\sd/ff.c     **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 958:.\sd/ff.c     **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 959:.\sd/ff.c     **** 				scl = ecl = nxt;
 960:.\sd/ff.c     **** 			}
 961:.\sd/ff.c     **** #endif
 962:.\sd/ff.c     **** 			clst = nxt;	/* Next cluster */
 963:.\sd/ff.c     **** 		}
 964:.\sd/ff.c     **** 	}
 965:.\sd/ff.c     **** 
 966:.\sd/ff.c     **** 	return res;
 967:.\sd/ff.c     **** }
 968:.\sd/ff.c     **** #endif
 969:.\sd/ff.c     **** 
 970:.\sd/ff.c     **** 
 971:.\sd/ff.c     **** 
 972:.\sd/ff.c     **** 
 973:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 974:.\sd/ff.c     **** /* FAT handling - Stretch or Create a cluster chain                      */
 975:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
 976:.\sd/ff.c     **** #if !_FS_READONLY
 977:.\sd/ff.c     **** static
 978:.\sd/ff.c     **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 979:.\sd/ff.c     **** 	FATFS *fs,			/* File system object */
 980:.\sd/ff.c     **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 981:.\sd/ff.c     **** )
 982:.\sd/ff.c     **** {
 983:.\sd/ff.c     **** 	DWORD cs, ncl, scl;
 984:.\sd/ff.c     **** 	FRESULT res;
 985:.\sd/ff.c     **** 
 986:.\sd/ff.c     **** 
 987:.\sd/ff.c     **** 	if (clst == 0) {		/* Create a new chain */
 988:.\sd/ff.c     **** 		scl = fs->last_clust;			/* Get suggested start point */
 989:.\sd/ff.c     **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 990:.\sd/ff.c     **** 	}
 991:.\sd/ff.c     **** 	else {					/* Stretch the current chain */
 992:.\sd/ff.c     **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 993:.\sd/ff.c     **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 994:.\sd/ff.c     **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 995:.\sd/ff.c     **** 		scl = clst;
 996:.\sd/ff.c     **** 	}
 997:.\sd/ff.c     **** 
 998:.\sd/ff.c     **** 	ncl = scl;				/* Start cluster */
 999:.\sd/ff.c     **** 	for (;;) {
1000:.\sd/ff.c     **** 		ncl++;							/* Next cluster */
1001:.\sd/ff.c     **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
1002:.\sd/ff.c     **** 			ncl = 2;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 31


1003:.\sd/ff.c     **** 			if (ncl > scl) return 0;	/* No free cluster */
1004:.\sd/ff.c     **** 		}
1005:.\sd/ff.c     **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1006:.\sd/ff.c     **** 		if (cs == 0) break;				/* Found a free cluster */
1007:.\sd/ff.c     **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1008:.\sd/ff.c     **** 			return cs;
1009:.\sd/ff.c     **** 		if (ncl == scl) return 0;		/* No free cluster */
1010:.\sd/ff.c     **** 	}
1011:.\sd/ff.c     **** 
1012:.\sd/ff.c     **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1013:.\sd/ff.c     **** 	if (res == FR_OK && clst != 0) {
1014:.\sd/ff.c     **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1015:.\sd/ff.c     **** 	}
1016:.\sd/ff.c     **** 	if (res == FR_OK) {
1017:.\sd/ff.c     **** 		fs->last_clust = ncl;			/* Update FSINFO */
1018:.\sd/ff.c     **** 		if (fs->free_clust != 0xFFFFFFFF) {
1019:.\sd/ff.c     **** 			fs->free_clust--;
1020:.\sd/ff.c     **** 			fs->fsi_flag = 1;
1021:.\sd/ff.c     **** 		}
1022:.\sd/ff.c     **** 	} else {
1023:.\sd/ff.c     **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1024:.\sd/ff.c     **** 	}
1025:.\sd/ff.c     **** 
1026:.\sd/ff.c     **** 	return ncl;		/* Return new cluster number or error code */
1027:.\sd/ff.c     **** }
1028:.\sd/ff.c     **** #endif /* !_FS_READONLY */
1029:.\sd/ff.c     **** 
1030:.\sd/ff.c     **** 
1031:.\sd/ff.c     **** 
1032:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1033:.\sd/ff.c     **** /* FAT handling - Convert offset into cluster with link map table        */
1034:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1035:.\sd/ff.c     **** 
1036:.\sd/ff.c     **** #if _USE_FASTSEEK
1037:.\sd/ff.c     **** static
1038:.\sd/ff.c     **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1039:.\sd/ff.c     **** 	FIL* fp,		/* Pointer to the file object */
1040:.\sd/ff.c     **** 	DWORD ofs		/* File offset to be converted to cluster# */
1041:.\sd/ff.c     **** )
1042:.\sd/ff.c     **** {
1043:.\sd/ff.c     **** 	DWORD cl, ncl, *tbl;
1044:.\sd/ff.c     **** 
1045:.\sd/ff.c     **** 
1046:.\sd/ff.c     **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1047:.\sd/ff.c     **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1048:.\sd/ff.c     **** 	for (;;) {
1049:.\sd/ff.c     **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1050:.\sd/ff.c     **** 		if (!ncl) return 0;		/* End of table? (error) */
1051:.\sd/ff.c     **** 		if (cl < ncl) break;	/* In this fragment? */
1052:.\sd/ff.c     **** 		cl -= ncl; tbl++;		/* Next fragment */
1053:.\sd/ff.c     **** 	}
1054:.\sd/ff.c     **** 	return cl + *tbl;	/* Return the cluster number */
1055:.\sd/ff.c     **** }
1056:.\sd/ff.c     **** #endif	/* _USE_FASTSEEK */
1057:.\sd/ff.c     **** 
1058:.\sd/ff.c     **** 
1059:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 32


1060:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1061:.\sd/ff.c     **** /* Directory handling - Set directory index                              */
1062:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1063:.\sd/ff.c     **** 
1064:.\sd/ff.c     **** static
1065:.\sd/ff.c     **** FRESULT dir_sdi (
1066:.\sd/ff.c     **** 	DIR *dj,		/* Pointer to directory object */
1067:.\sd/ff.c     **** 	WORD idx		/* Directory index number */
1068:.\sd/ff.c     **** )
1069:.\sd/ff.c     **** {
1070:.\sd/ff.c     **** 	DWORD clst;
1071:.\sd/ff.c     **** 	WORD ic;
1072:.\sd/ff.c     **** 
1073:.\sd/ff.c     **** 
1074:.\sd/ff.c     **** 	dj->index = idx;
1075:.\sd/ff.c     **** 	clst = dj->sclust;
1076:.\sd/ff.c     **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1077:.\sd/ff.c     **** 		return FR_INT_ERR;
1078:.\sd/ff.c     **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1079:.\sd/ff.c     **** 		clst = dj->fs->dirbase;
1080:.\sd/ff.c     **** 
1081:.\sd/ff.c     **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1082:.\sd/ff.c     **** 		dj->clust = clst;
1083:.\sd/ff.c     **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1084:.\sd/ff.c     **** 			return FR_INT_ERR;
1085:.\sd/ff.c     **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1086:.\sd/ff.c     **** 	}
1087:.\sd/ff.c     **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1088:.\sd/ff.c     **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1089:.\sd/ff.c     **** 		while (idx >= ic) {	/* Follow cluster chain */
1090:.\sd/ff.c     **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1091:.\sd/ff.c     **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1092:.\sd/ff.c     **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1093:.\sd/ff.c     **** 				return FR_INT_ERR;
1094:.\sd/ff.c     **** 			idx -= ic;
1095:.\sd/ff.c     **** 		}
1096:.\sd/ff.c     **** 		dj->clust = clst;
1097:.\sd/ff.c     **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1098:.\sd/ff.c     **** 	}
1099:.\sd/ff.c     **** 
1100:.\sd/ff.c     **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1101:.\sd/ff.c     **** 
1102:.\sd/ff.c     **** 	return FR_OK;	/* Seek succeeded */
1103:.\sd/ff.c     **** }
1104:.\sd/ff.c     **** 
1105:.\sd/ff.c     **** 
1106:.\sd/ff.c     **** 
1107:.\sd/ff.c     **** 
1108:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1109:.\sd/ff.c     **** /* Directory handling - Move directory index next                        */
1110:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1111:.\sd/ff.c     **** 
1112:.\sd/ff.c     **** static
1113:.\sd/ff.c     **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
1114:.\sd/ff.c     **** 	DIR *dj,		/* Pointer to directory object */
1115:.\sd/ff.c     **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1116:.\sd/ff.c     **** )
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 33


1117:.\sd/ff.c     **** {
1118:.\sd/ff.c     **** 	DWORD clst;
1119:.\sd/ff.c     **** 	WORD i;
1120:.\sd/ff.c     **** 
1121:.\sd/ff.c     **** 
1122:.\sd/ff.c     **** 	stretch = stretch;		/* To suppress warning on read-only cfg. */
1123:.\sd/ff.c     **** 	i = dj->index + 1;
1124:.\sd/ff.c     **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1125:.\sd/ff.c     **** 		return FR_NO_FILE;
1126:.\sd/ff.c     **** 
1127:.\sd/ff.c     **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1128:.\sd/ff.c     **** 		dj->sect++;					/* Next sector */
1129:.\sd/ff.c     **** 
1130:.\sd/ff.c     **** 		if (dj->clust == 0) {	/* Static table */
1131:.\sd/ff.c     **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1132:.\sd/ff.c     **** 				return FR_NO_FILE;
1133:.\sd/ff.c     **** 		}
1134:.\sd/ff.c     **** 		else {					/* Dynamic table */
1135:.\sd/ff.c     **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1136:.\sd/ff.c     **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1137:.\sd/ff.c     **** 				if (clst <= 1) return FR_INT_ERR;
1138:.\sd/ff.c     **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1139:.\sd/ff.c     **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1140:.\sd/ff.c     **** #if !_FS_READONLY
1141:.\sd/ff.c     **** 					BYTE c;
1142:.\sd/ff.c     **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1143:.\sd/ff.c     **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1144:.\sd/ff.c     **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1145:.\sd/ff.c     **** 					if (clst == 1) return FR_INT_ERR;
1146:.\sd/ff.c     **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1147:.\sd/ff.c     **** 					/* Clean-up stretched table */
1148:.\sd/ff.c     **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1149:.\sd/ff.c     **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1150:.\sd/ff.c     **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1151:.\sd/ff.c     **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1152:.\sd/ff.c     **** 						dj->fs->wflag = 1;
1153:.\sd/ff.c     **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1154:.\sd/ff.c     **** 						dj->fs->winsect++;
1155:.\sd/ff.c     **** 					}
1156:.\sd/ff.c     **** 					dj->fs->winsect -= c;						/* Rewind window address */
1157:.\sd/ff.c     **** #else
1158:.\sd/ff.c     **** 					return FR_NO_FILE;			/* Report EOT */
1159:.\sd/ff.c     **** #endif
1160:.\sd/ff.c     **** 				}
1161:.\sd/ff.c     **** 				dj->clust = clst;				/* Initialize data for new cluster */
1162:.\sd/ff.c     **** 				dj->sect = clust2sect(dj->fs, clst);
1163:.\sd/ff.c     **** 			}
1164:.\sd/ff.c     **** 		}
1165:.\sd/ff.c     **** 	}
1166:.\sd/ff.c     **** 
1167:.\sd/ff.c     **** 	dj->index = i;
1168:.\sd/ff.c     **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1169:.\sd/ff.c     **** 
1170:.\sd/ff.c     **** 	return FR_OK;
1171:.\sd/ff.c     **** }
1172:.\sd/ff.c     **** 
1173:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 34


1174:.\sd/ff.c     **** 
1175:.\sd/ff.c     **** 
1176:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1177:.\sd/ff.c     **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1178:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1179:.\sd/ff.c     **** #if _USE_LFN
1180:.\sd/ff.c     **** static
1181:.\sd/ff.c     **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1182:.\sd/ff.c     **** 
1183:.\sd/ff.c     **** 
1184:.\sd/ff.c     **** static
1185:.\sd/ff.c     **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1186:.\sd/ff.c     **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1187:.\sd/ff.c     **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1188:.\sd/ff.c     **** )
1189:.\sd/ff.c     **** {
1190:.\sd/ff.c     **** 	UINT i, s;
1191:.\sd/ff.c     **** 	WCHAR wc, uc;
1192:.\sd/ff.c     **** 
1193:.\sd/ff.c     **** 
1194:.\sd/ff.c     **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1195:.\sd/ff.c     **** 	s = 0; wc = 1;
1196:.\sd/ff.c     **** 	do {
1197:.\sd/ff.c     **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1198:.\sd/ff.c     **** 		if (wc) {	/* Last char has not been processed */
1199:.\sd/ff.c     **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1200:.\sd/ff.c     **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1201:.\sd/ff.c     **** 				return 0;				/* Not matched */
1202:.\sd/ff.c     **** 		} else {
1203:.\sd/ff.c     **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1204:.\sd/ff.c     **** 		}
1205:.\sd/ff.c     **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1206:.\sd/ff.c     **** 
1207:.\sd/ff.c     **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1208:.\sd/ff.c     **** 		return 0;
1209:.\sd/ff.c     **** 
1210:.\sd/ff.c     **** 	return 1;						/* The part of LFN matched */
1211:.\sd/ff.c     **** }
1212:.\sd/ff.c     **** 
1213:.\sd/ff.c     **** 
1214:.\sd/ff.c     **** 
1215:.\sd/ff.c     **** static
1216:.\sd/ff.c     **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1217:.\sd/ff.c     **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1218:.\sd/ff.c     **** 	BYTE *dir			/* Pointer to the directory entry */
1219:.\sd/ff.c     **** )
1220:.\sd/ff.c     **** {
1221:.\sd/ff.c     **** 	UINT i, s;
1222:.\sd/ff.c     **** 	WCHAR wc, uc;
1223:.\sd/ff.c     **** 
1224:.\sd/ff.c     **** 
1225:.\sd/ff.c     **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1226:.\sd/ff.c     **** 
1227:.\sd/ff.c     **** 	s = 0; wc = 1;
1228:.\sd/ff.c     **** 	do {
1229:.\sd/ff.c     **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1230:.\sd/ff.c     **** 		if (wc) {	/* Last char has not been processed */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 35


1231:.\sd/ff.c     **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1232:.\sd/ff.c     **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1233:.\sd/ff.c     **** 		} else {
1234:.\sd/ff.c     **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1235:.\sd/ff.c     **** 		}
1236:.\sd/ff.c     **** 	} while (++s < 13);						/* Read all character in the entry */
1237:.\sd/ff.c     **** 
1238:.\sd/ff.c     **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1239:.\sd/ff.c     **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1240:.\sd/ff.c     **** 		lfnbuf[i] = 0;
1241:.\sd/ff.c     **** 	}
1242:.\sd/ff.c     **** 
1243:.\sd/ff.c     **** 	return 1;
1244:.\sd/ff.c     **** }
1245:.\sd/ff.c     **** 
1246:.\sd/ff.c     **** 
1247:.\sd/ff.c     **** #if !_FS_READONLY
1248:.\sd/ff.c     **** static
1249:.\sd/ff.c     **** void fit_lfn (
1250:.\sd/ff.c     **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1251:.\sd/ff.c     **** 	BYTE *dir,				/* Pointer to the directory entry */
1252:.\sd/ff.c     **** 	BYTE ord,				/* LFN order (1-20) */
1253:.\sd/ff.c     **** 	BYTE sum				/* SFN sum */
1254:.\sd/ff.c     **** )
1255:.\sd/ff.c     **** {
1256:.\sd/ff.c     **** 	UINT i, s;
1257:.\sd/ff.c     **** 	WCHAR wc;
1258:.\sd/ff.c     **** 
1259:.\sd/ff.c     **** 
1260:.\sd/ff.c     **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1261:.\sd/ff.c     **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1262:.\sd/ff.c     **** 	dir[LDIR_Type] = 0;
1263:.\sd/ff.c     **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1264:.\sd/ff.c     **** 
1265:.\sd/ff.c     **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1266:.\sd/ff.c     **** 	s = wc = 0;
1267:.\sd/ff.c     **** 	do {
1268:.\sd/ff.c     **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1269:.\sd/ff.c     **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1270:.\sd/ff.c     **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1271:.\sd/ff.c     **** 	} while (++s < 13);
1272:.\sd/ff.c     **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1273:.\sd/ff.c     **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1274:.\sd/ff.c     **** }
1275:.\sd/ff.c     **** 
1276:.\sd/ff.c     **** #endif
1277:.\sd/ff.c     **** #endif
1278:.\sd/ff.c     **** 
1279:.\sd/ff.c     **** 
1280:.\sd/ff.c     **** 
1281:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1282:.\sd/ff.c     **** /* Create numbered name                                                  */
1283:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1284:.\sd/ff.c     **** #if _USE_LFN
1285:.\sd/ff.c     **** void gen_numname (
1286:.\sd/ff.c     **** 	BYTE *dst,			/* Pointer to generated SFN */
1287:.\sd/ff.c     **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 36


1288:.\sd/ff.c     **** 	const WCHAR *lfn,	/* Pointer to LFN */
1289:.\sd/ff.c     **** 	WORD seq			/* Sequence number */
1290:.\sd/ff.c     **** )
1291:.\sd/ff.c     **** {
1292:.\sd/ff.c     **** 	BYTE ns[8], c;
1293:.\sd/ff.c     **** 	UINT i, j;
1294:.\sd/ff.c     **** 
1295:.\sd/ff.c     **** 
1296:.\sd/ff.c     **** 	mem_cpy(dst, src, 11);
1297:.\sd/ff.c     **** 
1298:.\sd/ff.c     **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1299:.\sd/ff.c     **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1300:.\sd/ff.c     **** 	}
1301:.\sd/ff.c     **** 
1302:.\sd/ff.c     **** 	/* itoa (hexdecimal) */
1303:.\sd/ff.c     **** 	i = 7;
1304:.\sd/ff.c     **** 	do {
1305:.\sd/ff.c     **** 		c = (seq % 16) + '0';
1306:.\sd/ff.c     **** 		if (c > '9') c += 7;
1307:.\sd/ff.c     **** 		ns[i--] = c;
1308:.\sd/ff.c     **** 		seq /= 16;
1309:.\sd/ff.c     **** 	} while (seq);
1310:.\sd/ff.c     **** 	ns[i] = '~';
1311:.\sd/ff.c     **** 
1312:.\sd/ff.c     **** 	/* Append the number */
1313:.\sd/ff.c     **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1314:.\sd/ff.c     **** 		if (IsDBCS1(dst[j])) {
1315:.\sd/ff.c     **** 			if (j == i - 1) break;
1316:.\sd/ff.c     **** 			j++;
1317:.\sd/ff.c     **** 		}
1318:.\sd/ff.c     **** 	}
1319:.\sd/ff.c     **** 	do {
1320:.\sd/ff.c     **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1321:.\sd/ff.c     **** 	} while (j < 8);
1322:.\sd/ff.c     **** }
1323:.\sd/ff.c     **** #endif
1324:.\sd/ff.c     **** 
1325:.\sd/ff.c     **** 
1326:.\sd/ff.c     **** 
1327:.\sd/ff.c     **** 
1328:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1329:.\sd/ff.c     **** /* Calculate sum of an SFN                                               */
1330:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1331:.\sd/ff.c     **** #if _USE_LFN
1332:.\sd/ff.c     **** static
1333:.\sd/ff.c     **** BYTE sum_sfn (
1334:.\sd/ff.c     **** 	const BYTE *dir		/* Ptr to directory entry */
1335:.\sd/ff.c     **** )
1336:.\sd/ff.c     **** {
1337:.\sd/ff.c     **** 	BYTE sum = 0;
1338:.\sd/ff.c     **** 	UINT n = 11;
1339:.\sd/ff.c     **** 
1340:.\sd/ff.c     **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1341:.\sd/ff.c     **** 	return sum;
1342:.\sd/ff.c     **** }
1343:.\sd/ff.c     **** #endif
1344:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 37


1345:.\sd/ff.c     **** 
1346:.\sd/ff.c     **** 
1347:.\sd/ff.c     **** 
1348:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1349:.\sd/ff.c     **** /* Directory handling - Find an object in the directory                  */
1350:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1351:.\sd/ff.c     **** 
1352:.\sd/ff.c     **** static
1353:.\sd/ff.c     **** FRESULT dir_find (
1354:.\sd/ff.c     **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1355:.\sd/ff.c     **** )
1356:.\sd/ff.c     **** {
1357:.\sd/ff.c     **** 	FRESULT res;
1358:.\sd/ff.c     **** 	BYTE c, *dir;
1359:.\sd/ff.c     **** #if _USE_LFN
1360:.\sd/ff.c     **** 	BYTE a, ord, sum;
1361:.\sd/ff.c     **** #endif
1362:.\sd/ff.c     **** 
1363:.\sd/ff.c     **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1364:.\sd/ff.c     **** 	if (res != FR_OK) return res;
1365:.\sd/ff.c     **** 
1366:.\sd/ff.c     **** #if _USE_LFN
1367:.\sd/ff.c     **** 	ord = sum = 0xFF;
1368:.\sd/ff.c     **** #endif
1369:.\sd/ff.c     **** 	do {
1370:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
1371:.\sd/ff.c     **** 		if (res != FR_OK) break;
1372:.\sd/ff.c     **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1373:.\sd/ff.c     **** 		c = dir[DIR_Name];
1374:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1375:.\sd/ff.c     **** #if _USE_LFN	/* LFN configuration */
1376:.\sd/ff.c     **** 		a = dir[DIR_Attr] & AM_MASK;
1377:.\sd/ff.c     **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1378:.\sd/ff.c     **** 			ord = 0xFF;
1379:.\sd/ff.c     **** 		} else {
1380:.\sd/ff.c     **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1381:.\sd/ff.c     **** 				if (dj->lfn) {
1382:.\sd/ff.c     **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1383:.\sd/ff.c     **** 						sum = dir[LDIR_Chksum];
1384:.\sd/ff.c     **** 						c &= ~LLE; ord = c;	/* LFN start order */
1385:.\sd/ff.c     **** 						dj->lfn_idx = dj->index;
1386:.\sd/ff.c     **** 					}
1387:.\sd/ff.c     **** 					/* Check validity of the LFN entry and compare it with given name */
1388:.\sd/ff.c     **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1389:.\sd/ff.c     **** 				}
1390:.\sd/ff.c     **** 			} else {					/* An SFN entry is found */
1391:.\sd/ff.c     **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1392:.\sd/ff.c     **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1393:.\sd/ff.c     **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1394:.\sd/ff.c     **** 			}
1395:.\sd/ff.c     **** 		}
1396:.\sd/ff.c     **** #else		/* Non LFN configuration */
1397:.\sd/ff.c     **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1398:.\sd/ff.c     **** 			break;
1399:.\sd/ff.c     **** #endif
1400:.\sd/ff.c     **** 		res = dir_next(dj, 0);		/* Next entry */
1401:.\sd/ff.c     **** 	} while (res == FR_OK);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 38


1402:.\sd/ff.c     **** 
1403:.\sd/ff.c     **** 	return res;
1404:.\sd/ff.c     **** }
1405:.\sd/ff.c     **** 
1406:.\sd/ff.c     **** 
1407:.\sd/ff.c     **** 
1408:.\sd/ff.c     **** 
1409:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1410:.\sd/ff.c     **** /* Read an object from the directory                                     */
1411:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1412:.\sd/ff.c     **** #if _FS_MINIMIZE <= 1
1413:.\sd/ff.c     **** static
1414:.\sd/ff.c     **** FRESULT dir_read (
1415:.\sd/ff.c     **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1416:.\sd/ff.c     **** )
1417:.\sd/ff.c     **** {
1418:.\sd/ff.c     **** 	FRESULT res;
1419:.\sd/ff.c     **** 	BYTE c, *dir;
1420:.\sd/ff.c     **** #if _USE_LFN
1421:.\sd/ff.c     **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1422:.\sd/ff.c     **** #endif
1423:.\sd/ff.c     **** 
1424:.\sd/ff.c     **** 	res = FR_NO_FILE;
1425:.\sd/ff.c     **** 	while (dj->sect) {
1426:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
1427:.\sd/ff.c     **** 		if (res != FR_OK) break;
1428:.\sd/ff.c     **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1429:.\sd/ff.c     **** 		c = dir[DIR_Name];
1430:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1431:.\sd/ff.c     **** #if _USE_LFN	/* LFN configuration */
1432:.\sd/ff.c     **** 		a = dir[DIR_Attr] & AM_MASK;
1433:.\sd/ff.c     **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1434:.\sd/ff.c     **** 			ord = 0xFF;
1435:.\sd/ff.c     **** 		} else {
1436:.\sd/ff.c     **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1437:.\sd/ff.c     **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1438:.\sd/ff.c     **** 					sum = dir[LDIR_Chksum];
1439:.\sd/ff.c     **** 					c &= ~LLE; ord = c;
1440:.\sd/ff.c     **** 					dj->lfn_idx = dj->index;
1441:.\sd/ff.c     **** 				}
1442:.\sd/ff.c     **** 				/* Check LFN validity and capture it */
1443:.\sd/ff.c     **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1444:.\sd/ff.c     **** 			} else {					/* An SFN entry is found */
1445:.\sd/ff.c     **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1446:.\sd/ff.c     **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1447:.\sd/ff.c     **** 				break;
1448:.\sd/ff.c     **** 			}
1449:.\sd/ff.c     **** 		}
1450:.\sd/ff.c     **** #else		/* Non LFN configuration */
1451:.\sd/ff.c     **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1452:.\sd/ff.c     **** 			break;
1453:.\sd/ff.c     **** #endif
1454:.\sd/ff.c     **** 		res = dir_next(dj, 0);				/* Next entry */
1455:.\sd/ff.c     **** 		if (res != FR_OK) break;
1456:.\sd/ff.c     **** 	}
1457:.\sd/ff.c     **** 
1458:.\sd/ff.c     **** 	if (res != FR_OK) dj->sect = 0;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 39


1459:.\sd/ff.c     **** 
1460:.\sd/ff.c     **** 	return res;
1461:.\sd/ff.c     **** }
1462:.\sd/ff.c     **** #endif
1463:.\sd/ff.c     **** 
1464:.\sd/ff.c     **** 
1465:.\sd/ff.c     **** 
1466:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1467:.\sd/ff.c     **** /* Register an object to the directory                                   */
1468:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1469:.\sd/ff.c     **** #if !_FS_READONLY
1470:.\sd/ff.c     **** static
1471:.\sd/ff.c     **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1472:.\sd/ff.c     **** 	DIR *dj				/* Target directory with object name to be created */
1473:.\sd/ff.c     **** )
1474:.\sd/ff.c     **** {
1475:.\sd/ff.c     **** 	FRESULT res;
1476:.\sd/ff.c     **** 	BYTE c, *dir;
1477:.\sd/ff.c     **** #if _USE_LFN	/* LFN configuration */
1478:.\sd/ff.c     **** 	WORD n, ne, is;
1479:.\sd/ff.c     **** 	BYTE sn[12], *fn, sum;
1480:.\sd/ff.c     **** 	WCHAR *lfn;
1481:.\sd/ff.c     **** 
1482:.\sd/ff.c     **** 
1483:.\sd/ff.c     **** 	fn = dj->fn; lfn = dj->lfn;
1484:.\sd/ff.c     **** 	mem_cpy(sn, fn, 12);
1485:.\sd/ff.c     **** 
1486:.\sd/ff.c     **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1487:.\sd/ff.c     **** 		return FR_INVALID_NAME;
1488:.\sd/ff.c     **** 
1489:.\sd/ff.c     **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1490:.\sd/ff.c     **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1491:.\sd/ff.c     **** 		for (n = 1; n < 100; n++) {
1492:.\sd/ff.c     **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1493:.\sd/ff.c     **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1494:.\sd/ff.c     **** 			if (res != FR_OK) break;
1495:.\sd/ff.c     **** 		}
1496:.\sd/ff.c     **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1497:.\sd/ff.c     **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1498:.\sd/ff.c     **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1499:.\sd/ff.c     **** 	}
1500:.\sd/ff.c     **** 
1501:.\sd/ff.c     **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1502:.\sd/ff.c     **** 		for (ne = 0; lfn[ne]; ne++) ;
1503:.\sd/ff.c     **** 		ne = (ne + 25) / 13;
1504:.\sd/ff.c     **** 	} else {						/* Otherwise reserve only an SFN entry. */
1505:.\sd/ff.c     **** 		ne = 1;
1506:.\sd/ff.c     **** 	}
1507:.\sd/ff.c     **** 
1508:.\sd/ff.c     **** 	/* Reserve contiguous entries */
1509:.\sd/ff.c     **** 	res = dir_sdi(dj, 0);
1510:.\sd/ff.c     **** 	if (res != FR_OK) return res;
1511:.\sd/ff.c     **** 	n = is = 0;
1512:.\sd/ff.c     **** 	do {
1513:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
1514:.\sd/ff.c     **** 		if (res != FR_OK) break;
1515:.\sd/ff.c     **** 		c = *dj->dir;				/* Check the entry status */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 40


1516:.\sd/ff.c     **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1517:.\sd/ff.c     **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1518:.\sd/ff.c     **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1519:.\sd/ff.c     **** 		} else {
1520:.\sd/ff.c     **** 			n = 0;					/* Not a blank entry. Restart to search */
1521:.\sd/ff.c     **** 		}
1522:.\sd/ff.c     **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1523:.\sd/ff.c     **** 	} while (res == FR_OK);
1524:.\sd/ff.c     **** 
1525:.\sd/ff.c     **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1526:.\sd/ff.c     **** 		res = dir_sdi(dj, is);
1527:.\sd/ff.c     **** 		if (res == FR_OK) {
1528:.\sd/ff.c     **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1529:.\sd/ff.c     **** 			ne--;
1530:.\sd/ff.c     **** 			do {					/* Store LFN entries in bottom first */
1531:.\sd/ff.c     **** 				res = move_window(dj->fs, dj->sect);
1532:.\sd/ff.c     **** 				if (res != FR_OK) break;
1533:.\sd/ff.c     **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1534:.\sd/ff.c     **** 				dj->fs->wflag = 1;
1535:.\sd/ff.c     **** 				res = dir_next(dj, 0);	/* Next entry */
1536:.\sd/ff.c     **** 			} while (res == FR_OK && --ne);
1537:.\sd/ff.c     **** 		}
1538:.\sd/ff.c     **** 	}
1539:.\sd/ff.c     **** 
1540:.\sd/ff.c     **** #else	/* Non LFN configuration */
1541:.\sd/ff.c     **** 	res = dir_sdi(dj, 0);
1542:.\sd/ff.c     **** 	if (res == FR_OK) {
1543:.\sd/ff.c     **** 		do {	/* Find a blank entry for the SFN */
1544:.\sd/ff.c     **** 			res = move_window(dj->fs, dj->sect);
1545:.\sd/ff.c     **** 			if (res != FR_OK) break;
1546:.\sd/ff.c     **** 			c = *dj->dir;
1547:.\sd/ff.c     **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1548:.\sd/ff.c     **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1549:.\sd/ff.c     **** 		} while (res == FR_OK);
1550:.\sd/ff.c     **** 	}
1551:.\sd/ff.c     **** #endif
1552:.\sd/ff.c     **** 
1553:.\sd/ff.c     **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1554:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
1555:.\sd/ff.c     **** 		if (res == FR_OK) {
1556:.\sd/ff.c     **** 			dir = dj->dir;
1557:.\sd/ff.c     **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1558:.\sd/ff.c     **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1559:.\sd/ff.c     **** #if _USE_LFN
1560:.\sd/ff.c     **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1561:.\sd/ff.c     **** #endif
1562:.\sd/ff.c     **** 			dj->fs->wflag = 1;
1563:.\sd/ff.c     **** 		}
1564:.\sd/ff.c     **** 	}
1565:.\sd/ff.c     **** 
1566:.\sd/ff.c     **** 	return res;
1567:.\sd/ff.c     **** }
1568:.\sd/ff.c     **** #endif /* !_FS_READONLY */
1569:.\sd/ff.c     **** 
1570:.\sd/ff.c     **** 
1571:.\sd/ff.c     **** 
1572:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 41


1573:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1574:.\sd/ff.c     **** /* Remove an object from the directory                                   */
1575:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1576:.\sd/ff.c     **** #if !_FS_READONLY && !_FS_MINIMIZE
1577:.\sd/ff.c     **** static
1578:.\sd/ff.c     **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1579:.\sd/ff.c     **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1580:.\sd/ff.c     **** )
1581:.\sd/ff.c     **** {
1582:.\sd/ff.c     **** 	FRESULT res;
1583:.\sd/ff.c     **** #if _USE_LFN	/* LFN configuration */
1584:.\sd/ff.c     **** 	WORD i;
1585:.\sd/ff.c     **** 
1586:.\sd/ff.c     **** 	i = dj->index;	/* SFN index */
1587:.\sd/ff.c     **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1588:.\sd/ff.c     **** 	if (res == FR_OK) {
1589:.\sd/ff.c     **** 		do {
1590:.\sd/ff.c     **** 			res = move_window(dj->fs, dj->sect);
1591:.\sd/ff.c     **** 			if (res != FR_OK) break;
1592:.\sd/ff.c     **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1593:.\sd/ff.c     **** 			dj->fs->wflag = 1;
1594:.\sd/ff.c     **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1595:.\sd/ff.c     **** 			res = dir_next(dj, 0);		/* Next entry */
1596:.\sd/ff.c     **** 		} while (res == FR_OK);
1597:.\sd/ff.c     **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1598:.\sd/ff.c     **** 	}
1599:.\sd/ff.c     **** 
1600:.\sd/ff.c     **** #else			/* Non LFN configuration */
1601:.\sd/ff.c     **** 	res = dir_sdi(dj, dj->index);
1602:.\sd/ff.c     **** 	if (res == FR_OK) {
1603:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
1604:.\sd/ff.c     **** 		if (res == FR_OK) {
1605:.\sd/ff.c     **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1606:.\sd/ff.c     **** 			dj->fs->wflag = 1;
1607:.\sd/ff.c     **** 		}
1608:.\sd/ff.c     **** 	}
1609:.\sd/ff.c     **** #endif
1610:.\sd/ff.c     **** 
1611:.\sd/ff.c     **** 	return res;
1612:.\sd/ff.c     **** }
1613:.\sd/ff.c     **** #endif /* !_FS_READONLY */
1614:.\sd/ff.c     **** 
1615:.\sd/ff.c     **** 
1616:.\sd/ff.c     **** 
1617:.\sd/ff.c     **** 
1618:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1619:.\sd/ff.c     **** /* Pick a segment and create the object name in directory form           */
1620:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1621:.\sd/ff.c     **** 
1622:.\sd/ff.c     **** static
1623:.\sd/ff.c     **** FRESULT create_name (
1624:.\sd/ff.c     **** 	DIR *dj,			/* Pointer to the directory object */
1625:.\sd/ff.c     **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1626:.\sd/ff.c     **** )
1627:.\sd/ff.c     **** {
 688              		.loc 1 1627 0
 689              		.cfi_startproc
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 42


 690              	.LVL79:
 691 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 692              		.cfi_def_cfa_offset 24
 693              		.cfi_offset 3, -24
 694              		.cfi_offset 4, -20
 695              		.cfi_offset 5, -16
 696              		.cfi_offset 6, -12
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0002 5F46     		mov	r7, fp
 700 0004 5646     		mov	r6, r10
 701 0006 4D46     		mov	r5, r9
 702 0008 4446     		mov	r4, r8
 703 000a F0B4     		push	{r4, r5, r6, r7}
 704              		.cfi_def_cfa_offset 40
 705              		.cfi_offset 8, -40
 706              		.cfi_offset 9, -36
 707              		.cfi_offset 10, -32
 708              		.cfi_offset 11, -28
 709 000c 8B46     		mov	fp, r1
1628:.\sd/ff.c     **** #ifdef _EXCVT
1629:.\sd/ff.c     **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1630:.\sd/ff.c     **** #endif
1631:.\sd/ff.c     **** 
1632:.\sd/ff.c     **** #if _USE_LFN	/* LFN configuration */
1633:.\sd/ff.c     **** 	BYTE b, cf;
1634:.\sd/ff.c     **** 	WCHAR w, *lfn;
1635:.\sd/ff.c     **** 	UINT i, ni, si, di;
1636:.\sd/ff.c     **** 	const TCHAR *p;
1637:.\sd/ff.c     **** 
1638:.\sd/ff.c     **** 	/* Create LFN in Unicode */
1639:.\sd/ff.c     **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1640:.\sd/ff.c     **** 	lfn = dj->lfn;
1641:.\sd/ff.c     **** 	si = di = 0;
1642:.\sd/ff.c     **** 	for (;;) {
1643:.\sd/ff.c     **** 		w = p[si++];					/* Get a character */
1644:.\sd/ff.c     **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1645:.\sd/ff.c     **** 		if (di >= _MAX_LFN)				/* Reject too LONG_ name */
1646:.\sd/ff.c     **** 			return FR_INVALID_NAME;
1647:.\sd/ff.c     **** #if !_LFN_UNICODE
1648:.\sd/ff.c     **** 		w &= 0xFF;
1649:.\sd/ff.c     **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1650:.\sd/ff.c     **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1651:.\sd/ff.c     **** 			if (!IsDBCS2(b))
1652:.\sd/ff.c     **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1653:.\sd/ff.c     **** 			w = (w << 8) + b;			/* Create a DBC */
1654:.\sd/ff.c     **** 		}
1655:.\sd/ff.c     **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1656:.\sd/ff.c     **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1657:.\sd/ff.c     **** #endif
1658:.\sd/ff.c     **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1659:.\sd/ff.c     **** 			return FR_INVALID_NAME;
1660:.\sd/ff.c     **** 		lfn[di++] = w;					/* Store the Unicode char */
1661:.\sd/ff.c     **** 	}
1662:.\sd/ff.c     **** 	*path = &p[si];						/* Return pointer to the next segment */
1663:.\sd/ff.c     **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1664:.\sd/ff.c     **** #if _FS_RPATH
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 43


1665:.\sd/ff.c     **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1666:.\sd/ff.c     **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1667:.\sd/ff.c     **** 		lfn[di] = 0;
1668:.\sd/ff.c     **** 		for (i = 0; i < 11; i++)
1669:.\sd/ff.c     **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1670:.\sd/ff.c     **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1671:.\sd/ff.c     **** 		return FR_OK;
1672:.\sd/ff.c     **** 	}
1673:.\sd/ff.c     **** #endif
1674:.\sd/ff.c     **** 	while (di) {						/* Strip trailing spaces and dots */
1675:.\sd/ff.c     **** 		w = lfn[di-1];
1676:.\sd/ff.c     **** 		if (w != ' ' && w != '.') break;
1677:.\sd/ff.c     **** 		di--;
1678:.\sd/ff.c     **** 	}
1679:.\sd/ff.c     **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1680:.\sd/ff.c     **** 
1681:.\sd/ff.c     **** 	lfn[di] = 0;						/* LFN is created */
1682:.\sd/ff.c     **** 
1683:.\sd/ff.c     **** 	/* Create SFN in directory form */
1684:.\sd/ff.c     **** 	mem_set(dj->fn, ' ', 11);
1685:.\sd/ff.c     **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1686:.\sd/ff.c     **** 	if (si) cf |= NS_LOSS | NS_LFN;
1687:.\sd/ff.c     **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1688:.\sd/ff.c     **** 
1689:.\sd/ff.c     **** 	b = i = 0; ni = 8;
1690:.\sd/ff.c     **** 	for (;;) {
1691:.\sd/ff.c     **** 		w = lfn[si++];					/* Get an LFN char */
1692:.\sd/ff.c     **** 		if (!w) break;					/* Break on end of the LFN */
1693:.\sd/ff.c     **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1694:.\sd/ff.c     **** 			cf |= NS_LOSS | NS_LFN; continue;
1695:.\sd/ff.c     **** 		}
1696:.\sd/ff.c     **** 
1697:.\sd/ff.c     **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1698:.\sd/ff.c     **** 			if (ni == 11) {				/* LONG_ extension */
1699:.\sd/ff.c     **** 				cf |= NS_LOSS | NS_LFN; break;
1700:.\sd/ff.c     **** 			}
1701:.\sd/ff.c     **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1702:.\sd/ff.c     **** 			if (si > di) break;			/* No extension */
1703:.\sd/ff.c     **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1704:.\sd/ff.c     **** 			b <<= 2; continue;
1705:.\sd/ff.c     **** 		}
1706:.\sd/ff.c     **** 
1707:.\sd/ff.c     **** 		if (w >= 0x80) {				/* Non ASCII char */
1708:.\sd/ff.c     **** #ifdef _EXCVT
1709:.\sd/ff.c     **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1710:.\sd/ff.c     **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1711:.\sd/ff.c     **** #else
1712:.\sd/ff.c     **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1713:.\sd/ff.c     **** #endif
1714:.\sd/ff.c     **** 			cf |= NS_LFN;				/* Force create LFN entry */
1715:.\sd/ff.c     **** 		}
1716:.\sd/ff.c     **** 
1717:.\sd/ff.c     **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1718:.\sd/ff.c     **** 			if (i >= ni - 1) {
1719:.\sd/ff.c     **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1720:.\sd/ff.c     **** 			}
1721:.\sd/ff.c     **** 			dj->fn[i++] = (BYTE)(w >> 8);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 44


1722:.\sd/ff.c     **** 		} else {						/* Single byte char */
1723:.\sd/ff.c     **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1724:.\sd/ff.c     **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1725:.\sd/ff.c     **** 			} else {
1726:.\sd/ff.c     **** 				if (IsUpper(w)) {		/* ASCII large capital */
1727:.\sd/ff.c     **** 					b |= 2;
1728:.\sd/ff.c     **** 				} else {
1729:.\sd/ff.c     **** 					if (IsLower(w)) {	/* ASCII small capital */
1730:.\sd/ff.c     **** 						b |= 1; w -= 0x20;
1731:.\sd/ff.c     **** 					}
1732:.\sd/ff.c     **** 				}
1733:.\sd/ff.c     **** 			}
1734:.\sd/ff.c     **** 		}
1735:.\sd/ff.c     **** 		dj->fn[i++] = (BYTE)w;
1736:.\sd/ff.c     **** 	}
1737:.\sd/ff.c     **** 
1738:.\sd/ff.c     **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1739:.\sd/ff.c     **** 
1740:.\sd/ff.c     **** 	if (ni == 8) b <<= 2;
1741:.\sd/ff.c     **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1742:.\sd/ff.c     **** 		cf |= NS_LFN;
1743:.\sd/ff.c     **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1744:.\sd/ff.c     **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1745:.\sd/ff.c     **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1746:.\sd/ff.c     **** 	}
1747:.\sd/ff.c     **** 
1748:.\sd/ff.c     **** 	dj->fn[NS] = cf;	/* SFN is created */
1749:.\sd/ff.c     **** 
1750:.\sd/ff.c     **** 	return FR_OK;
1751:.\sd/ff.c     **** 
1752:.\sd/ff.c     **** 
1753:.\sd/ff.c     **** #else	/* Non-LFN configuration */
1754:.\sd/ff.c     **** 	BYTE b, c, d, *sfn;
1755:.\sd/ff.c     **** 	UINT ni, si, i;
1756:.\sd/ff.c     **** 	const char *p;
1757:.\sd/ff.c     **** 
1758:.\sd/ff.c     **** 	/* Create file name in directory form */
1759:.\sd/ff.c     **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 710              		.loc 1 1759 0
 711 000e 0C68     		ldr	r4, [r1]
 712              	.LVL80:
 713 0010 00E0     		b	.L71
 714              	.L72:
 715              		.loc 1 1759 0 is_stmt 0 discriminator 2
 716 0012 0134     		add	r4, r4, #1
 717              	.LVL81:
 718              	.L71:
 719              		.loc 1 1759 0 discriminator 1
 720 0014 2378     		ldrb	r3, [r4]
 721 0016 2F2B     		cmp	r3, #47
 722 0018 FBD0     		beq	.L72
 723              		.loc 1 1759 0 discriminator 3
 724 001a 5C2B     		cmp	r3, #92
 725 001c F9D0     		beq	.L72
1760:.\sd/ff.c     **** 	sfn = dj->fn;
 726              		.loc 1 1760 0 is_stmt 1
 727 001e 8169     		ldr	r1, [r0, #24]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 45


 728              	.LVL82:
 729 0020 8846     		mov	r8, r1
 730              	.LVL83:
1761:.\sd/ff.c     **** 	mem_set(sfn, ' ', 11);
 731              		.loc 1 1761 0
 732 0022 081C     		mov	r0, r1
 733              	.LVL84:
 734 0024 2021     		mov	r1, #32
 735              	.LVL85:
 736 0026 0B22     		mov	r2, #11
 737 0028 FFF7FEFF 		bl	mem_set
 738              	.LVL86:
1762:.\sd/ff.c     **** 	si = i = b = 0; ni = 8;
 739              		.loc 1 1762 0
 740 002c 0026     		mov	r6, #0
 741 002e 0023     		mov	r3, #0
 742 0030 0827     		mov	r7, #8
 743 0032 9A46     		mov	r10, r3
 744 0034 00E0     		b	.L73
 745              	.LVL87:
 746              	.L78:
 747 0036 4B46     		mov	r3, r9
 748              	.LVL88:
 749              	.L73:
1763:.\sd/ff.c     **** #if _FS_RPATH
1764:.\sd/ff.c     **** 	if (p[si] == '.') { /* Is this a dot entry? */
1765:.\sd/ff.c     **** 		for (;;) {
1766:.\sd/ff.c     **** 			c = (BYTE)p[si++];
1767:.\sd/ff.c     **** 			if (c != '.' || si >= 3) break;
1768:.\sd/ff.c     **** 			sfn[i++] = c;
1769:.\sd/ff.c     **** 		}
1770:.\sd/ff.c     **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1771:.\sd/ff.c     **** 		*path = &p[si];									/* Return pointer to the next segment */
1772:.\sd/ff.c     **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1773:.\sd/ff.c     **** 		return FR_OK;
1774:.\sd/ff.c     **** 	}
1775:.\sd/ff.c     **** #endif
1776:.\sd/ff.c     **** 	for (;;) {
1777:.\sd/ff.c     **** 		c = (BYTE)p[si++];
 750              		.loc 1 1777 0
 751 0038 591C     		add	r1, r3, #1
 752 003a 8946     		mov	r9, r1
 753              	.LVL89:
 754 003c E55C     		ldrb	r5, [r4, r3]
 755              	.LVL90:
1778:.\sd/ff.c     **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 756              		.loc 1 1778 0
 757 003e 202D     		cmp	r5, #32
 758 0040 39D9     		bls	.L74
 759              		.loc 1 1778 0 is_stmt 0 discriminator 1
 760 0042 2F2D     		cmp	r5, #47
 761 0044 37D0     		beq	.L74
 762 0046 5C2D     		cmp	r5, #92
 763 0048 35D0     		beq	.L74
1779:.\sd/ff.c     **** 		if (c == '.' || i >= ni) {
 764              		.loc 1 1779 0 is_stmt 1
 765 004a 2E2D     		cmp	r5, #46
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 46


 766 004c 01D0     		beq	.L75
 767              		.loc 1 1779 0 is_stmt 0 discriminator 1
 768 004e BE42     		cmp	r6, r7
 769 0050 0AD3     		bcc	.L76
 770              	.L75:
1780:.\sd/ff.c     **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 771              		.loc 1 1780 0 is_stmt 1
 772 0052 082F     		cmp	r7, #8
 773 0054 57D1     		bne	.L87
 774              		.loc 1 1780 0 is_stmt 0 discriminator 2
 775 0056 2E2D     		cmp	r5, #46
 776 0058 57D1     		bne	.L88
 777              	.LVL91:
1781:.\sd/ff.c     **** 			i = 8; ni = 11;
1782:.\sd/ff.c     **** 			b <<= 2; continue;
 778              		.loc 1 1782 0 is_stmt 1
 779 005a 5246     		mov	r2, r10
 780 005c 9300     		lsl	r3, r2, #2
 781              	.LVL92:
 782 005e DBB2     		uxtb	r3, r3
 783 0060 9A46     		mov	r10, r3
 784              	.LVL93:
1781:.\sd/ff.c     **** 			i = 8; ni = 11;
 785              		.loc 1 1781 0
 786 0062 0826     		mov	r6, #8
 787 0064 0B27     		mov	r7, #11
 788              		.loc 1 1782 0
 789 0066 E6E7     		b	.L78
 790              	.LVL94:
 791              	.L76:
1783:.\sd/ff.c     **** 		}
1784:.\sd/ff.c     **** 		if (c >= 0x80) {				/* Extended char? */
 792              		.loc 1 1784 0
 793 0068 6BB2     		sxtb	r3, r5
 794              	.LVL95:
 795 006a 002B     		cmp	r3, #0
 796 006c 06DA     		bge	.L79
1785:.\sd/ff.c     **** 			b |= 3;						/* Eliminate NT flag */
 797              		.loc 1 1785 0
 798 006e 0323     		mov	r3, #3
 799 0070 5146     		mov	r1, r10
 800              	.LVL96:
 801 0072 1943     		orr	r1, r3
 802 0074 8A46     		mov	r10, r1
 803              	.LVL97:
1786:.\sd/ff.c     **** #ifdef _EXCVT
1787:.\sd/ff.c     **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 804              		.loc 1 1787 0
 805 0076 803D     		sub	r5, r5, #128
 806 0078 294A     		ldr	r2, .L92
 807 007a 555D     		ldrb	r5, [r2, r5]
 808              	.LVL98:
 809              	.L79:
1788:.\sd/ff.c     **** #else
1789:.\sd/ff.c     **** #if !_DF1S	/* ASCII only cfg */
1790:.\sd/ff.c     **** 			return FR_INVALID_NAME;
1791:.\sd/ff.c     **** #endif
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 47


1792:.\sd/ff.c     **** #endif
1793:.\sd/ff.c     **** 		}
1794:.\sd/ff.c     **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1795:.\sd/ff.c     **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1796:.\sd/ff.c     **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1797:.\sd/ff.c     **** 				return FR_INVALID_NAME;
1798:.\sd/ff.c     **** 			sfn[i++] = c;
1799:.\sd/ff.c     **** 			sfn[i++] = d;
1800:.\sd/ff.c     **** 		} else {						/* Single byte code */
1801:.\sd/ff.c     **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 810              		.loc 1 1801 0
 811 007c 2948     		ldr	r0, .L92+4
 812 007e 291C     		mov	r1, r5
 813 0080 FFF7FEFF 		bl	chk_chr
 814              	.LVL99:
 815 0084 0028     		cmp	r0, #0
 816 0086 42D1     		bne	.L89
1802:.\sd/ff.c     **** 				return FR_INVALID_NAME;
1803:.\sd/ff.c     **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 817              		.loc 1 1803 0
 818 0088 2B1C     		mov	r3, r5
 819 008a 413B     		sub	r3, r3, #65
 820 008c 192B     		cmp	r3, #25
 821 008e 04D8     		bhi	.L80
1804:.\sd/ff.c     **** 				b |= 2;
 822              		.loc 1 1804 0
 823 0090 0223     		mov	r3, #2
 824 0092 5146     		mov	r1, r10
 825 0094 1943     		orr	r1, r3
 826 0096 8A46     		mov	r10, r1
 827              	.LVL100:
 828 0098 09E0     		b	.L81
 829              	.LVL101:
 830              	.L80:
1805:.\sd/ff.c     **** 			} else {
1806:.\sd/ff.c     **** 				if (IsLower(c)) {		/* ASCII small capital? */
 831              		.loc 1 1806 0
 832 009a 2B1C     		mov	r3, r5
 833 009c 613B     		sub	r3, r3, #97
 834 009e 192B     		cmp	r3, #25
 835 00a0 05D8     		bhi	.L81
1807:.\sd/ff.c     **** 					b |= 1; c -= 0x20;
 836              		.loc 1 1807 0
 837 00a2 0123     		mov	r3, #1
 838 00a4 5246     		mov	r2, r10
 839 00a6 1A43     		orr	r2, r3
 840 00a8 9246     		mov	r10, r2
 841              	.LVL102:
 842 00aa 203D     		sub	r5, r5, #32
 843              	.LVL103:
 844 00ac EDB2     		uxtb	r5, r5
 845              	.LVL104:
 846              	.L81:
1808:.\sd/ff.c     **** 				}
1809:.\sd/ff.c     **** 			}
1810:.\sd/ff.c     **** 			sfn[i++] = c;
 847              		.loc 1 1810 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 48


 848 00ae 4346     		mov	r3, r8
 849 00b0 9D55     		strb	r5, [r3, r6]
 850 00b2 0136     		add	r6, r6, #1
 851              	.LVL105:
 852 00b4 BFE7     		b	.L78
 853              	.LVL106:
 854              	.L74:
1811:.\sd/ff.c     **** 		}
1812:.\sd/ff.c     **** 	}
1813:.\sd/ff.c     **** 	*path = &p[si];						/* Return pointer to the next segment */
 855              		.loc 1 1813 0
 856 00b6 4C44     		add	r4, r4, r9
 857              	.LVL107:
 858 00b8 5946     		mov	r1, fp
 859              	.LVL108:
 860 00ba 0C60     		str	r4, [r1]
1814:.\sd/ff.c     **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 861              		.loc 1 1814 0
 862 00bc 202D     		cmp	r5, #32
 863 00be 01D8     		bhi	.L90
 864              	.LVL109:
 865 00c0 0423     		mov	r3, #4
 866 00c2 00E0     		b	.L82
 867              	.L90:
 868 00c4 0023     		mov	r3, #0
 869              	.L82:
 870              	.LVL110:
1815:.\sd/ff.c     **** 
1816:.\sd/ff.c     **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 871              		.loc 1 1816 0 discriminator 3
 872 00c6 002E     		cmp	r6, #0
 873 00c8 23D0     		beq	.L91
1817:.\sd/ff.c     **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 874              		.loc 1 1817 0
 875 00ca 4146     		mov	r1, r8
 876              	.LVL111:
 877 00cc 0A78     		ldrb	r2, [r1]
 878 00ce E52A     		cmp	r2, #229
 879 00d0 01D1     		bne	.L83
 880              	.LVL112:
 881              		.loc 1 1817 0 is_stmt 0 discriminator 1
 882 00d2 0522     		mov	r2, #5
 883 00d4 0A70     		strb	r2, [r1]
 884              	.L83:
1818:.\sd/ff.c     **** 
1819:.\sd/ff.c     **** 	if (ni == 8) b <<= 2;
 885              		.loc 1 1819 0 is_stmt 1
 886 00d6 082F     		cmp	r7, #8
 887 00d8 03D1     		bne	.L84
 888              		.loc 1 1819 0 is_stmt 0 discriminator 1
 889 00da 5146     		mov	r1, r10
 890              	.LVL113:
 891 00dc 8A00     		lsl	r2, r1, #2
 892 00de D2B2     		uxtb	r2, r2
 893 00e0 9246     		mov	r10, r2
 894              	.LVL114:
 895              	.L84:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 49


1820:.\sd/ff.c     **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 896              		.loc 1 1820 0 is_stmt 1
 897 00e2 0322     		mov	r2, #3
 898 00e4 5146     		mov	r1, r10
 899 00e6 0A40     		and	r2, r1
 900 00e8 012A     		cmp	r2, #1
 901 00ea 01D1     		bne	.L85
 902              		.loc 1 1820 0 is_stmt 0 discriminator 1
 903 00ec 1022     		mov	r2, #16
 904 00ee 1343     		orr	r3, r2
 905              	.LVL115:
 906              	.L85:
1821:.\sd/ff.c     **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 907              		.loc 1 1821 0 is_stmt 1
 908 00f0 0C22     		mov	r2, #12
 909 00f2 5146     		mov	r1, r10
 910 00f4 0A40     		and	r2, r1
 911 00f6 042A     		cmp	r2, #4
 912 00f8 01D1     		bne	.L86
 913              	.LVL116:
 914              		.loc 1 1821 0 is_stmt 0 discriminator 1
 915 00fa 0822     		mov	r2, #8
 916 00fc 1343     		orr	r3, r2
 917              	.LVL117:
 918              	.L86:
1822:.\sd/ff.c     **** 
1823:.\sd/ff.c     **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
 919              		.loc 1 1823 0 is_stmt 1
 920 00fe 4246     		mov	r2, r8
 921 0100 D372     		strb	r3, [r2, #11]
1824:.\sd/ff.c     **** 
1825:.\sd/ff.c     **** 	return FR_OK;
 922              		.loc 1 1825 0
 923 0102 0020     		mov	r0, #0
 924 0104 06E0     		b	.L77
 925              	.LVL118:
 926              	.L87:
1780:.\sd/ff.c     **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 927              		.loc 1 1780 0
 928 0106 0620     		mov	r0, #6
 929 0108 04E0     		b	.L77
 930              	.L88:
 931 010a 0620     		mov	r0, #6
 932 010c 02E0     		b	.L77
 933              	.LVL119:
 934              	.L89:
1802:.\sd/ff.c     **** 				return FR_INVALID_NAME;
 935              		.loc 1 1802 0
 936 010e 0620     		mov	r0, #6
 937 0110 00E0     		b	.L77
 938              	.LVL120:
 939              	.L91:
1816:.\sd/ff.c     **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 940              		.loc 1 1816 0
 941 0112 0620     		mov	r0, #6
 942              	.LVL121:
 943              	.L77:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 50


1826:.\sd/ff.c     **** #endif
1827:.\sd/ff.c     **** }
 944              		.loc 1 1827 0
 945              		@ sp needed
 946              	.LVL122:
 947              	.LVL123:
 948              	.LVL124:
 949              	.LVL125:
 950              	.LVL126:
 951 0114 3CBC     		pop	{r2, r3, r4, r5}
 952 0116 9046     		mov	r8, r2
 953 0118 9946     		mov	r9, r3
 954 011a A246     		mov	r10, r4
 955 011c AB46     		mov	fp, r5
 956 011e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 957              	.L93:
 958              		.align	2
 959              	.L92:
 960 0120 00000000 		.word	.LANCHOR1
 961 0124 00000000 		.word	.LC6
 962              		.cfi_endproc
 963              	.LFE22:
 964              		.size	create_name, .-create_name
 965              		.section	.text.get_fileinfo,"ax",%progbits
 966              		.align	2
 967              		.code	16
 968              		.thumb_func
 969              		.type	get_fileinfo, %function
 970              	get_fileinfo:
 971              	.LFB23:
1828:.\sd/ff.c     **** 
1829:.\sd/ff.c     **** 
1830:.\sd/ff.c     **** 
1831:.\sd/ff.c     **** 
1832:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1833:.\sd/ff.c     **** /* Get file information from directory entry                             */
1834:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1835:.\sd/ff.c     **** #if _FS_MINIMIZE <= 1
1836:.\sd/ff.c     **** static
1837:.\sd/ff.c     **** void get_fileinfo (		/* No return code */
1838:.\sd/ff.c     **** 	DIR *dj,			/* Pointer to the directory object */
1839:.\sd/ff.c     **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1840:.\sd/ff.c     **** )
1841:.\sd/ff.c     **** {
 972              		.loc 1 1841 0
 973              		.cfi_startproc
 974              	.LVL127:
 975 0000 30B5     		push	{r4, r5, lr}
 976              		.cfi_def_cfa_offset 12
 977              		.cfi_offset 4, -12
 978              		.cfi_offset 5, -8
 979              		.cfi_offset 14, -4
1842:.\sd/ff.c     **** 	UINT i;
1843:.\sd/ff.c     **** 	BYTE nt, *dir;
1844:.\sd/ff.c     **** 	TCHAR *p, c;
1845:.\sd/ff.c     **** 
1846:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 51


1847:.\sd/ff.c     **** 	p = fno->fname;
 980              		.loc 1 1847 0
 981 0002 0B1C     		mov	r3, r1
 982 0004 0933     		add	r3, r3, #9
 983              	.LVL128:
1848:.\sd/ff.c     **** 	if (dj->sect) {
 984              		.loc 1 1848 0
 985 0006 0269     		ldr	r2, [r0, #16]
 986 0008 002A     		cmp	r2, #0
 987 000a 35D0     		beq	.L95
1849:.\sd/ff.c     **** 		dir = dj->dir;
 988              		.loc 1 1849 0
 989 000c 4469     		ldr	r4, [r0, #20]
 990              	.LVL129:
1850:.\sd/ff.c     **** 		nt = dir[DIR_NTres];		/* NT flag */
1851:.\sd/ff.c     **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 991              		.loc 1 1851 0
 992 000e 0022     		mov	r2, #0
1852:.\sd/ff.c     **** 			c = dir[i];
1853:.\sd/ff.c     **** 			if (c == ' ') break;
1854:.\sd/ff.c     **** 			if (c == NDDE) c = (TCHAR)DDE;
 993              		.loc 1 1854 0
 994 0010 E525     		mov	r5, #229
1851:.\sd/ff.c     **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 995              		.loc 1 1851 0
 996 0012 08E0     		b	.L96
 997              	.LVL130:
 998              	.L99:
1852:.\sd/ff.c     **** 			c = dir[i];
 999              		.loc 1 1852 0
 1000 0014 A05C     		ldrb	r0, [r4, r2]
 1001              	.LVL131:
1853:.\sd/ff.c     **** 			if (c == ' ') break;
 1002              		.loc 1 1853 0
 1003 0016 2028     		cmp	r0, #32
 1004 0018 07D0     		beq	.L97
 1005              		.loc 1 1854 0
 1006 001a 0528     		cmp	r0, #5
 1007 001c 00D1     		bne	.L98
 1008 001e 281C     		mov	r0, r5
 1009              	.L98:
 1010              	.LVL132:
1855:.\sd/ff.c     **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1856:.\sd/ff.c     **** #if _LFN_UNICODE
1857:.\sd/ff.c     **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1858:.\sd/ff.c     **** 				c = (c << 8) | dir[++i];
1859:.\sd/ff.c     **** 			c = ff_convert(c, 1);
1860:.\sd/ff.c     **** 			if (!c) c = '?';
1861:.\sd/ff.c     **** #endif
1862:.\sd/ff.c     **** 			*p++ = c;
 1011              		.loc 1 1862 0
 1012 0020 1870     		strb	r0, [r3]
1851:.\sd/ff.c     **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1013              		.loc 1 1851 0
 1014 0022 0132     		add	r2, r2, #1
 1015              	.LVL133:
 1016              		.loc 1 1862 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 52


 1017 0024 0133     		add	r3, r3, #1
 1018              	.LVL134:
 1019              	.L96:
1851:.\sd/ff.c     **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1020              		.loc 1 1851 0 discriminator 1
 1021 0026 072A     		cmp	r2, #7
 1022 0028 F4D9     		bls	.L99
 1023              	.L97:
1863:.\sd/ff.c     **** 		}
1864:.\sd/ff.c     **** 		if (dir[8] != ' ') {		/* Copy name extension */
 1024              		.loc 1 1864 0
 1025 002a 227A     		ldrb	r2, [r4, #8]
 1026              	.LVL135:
 1027 002c 202A     		cmp	r2, #32
 1028 002e 0CD0     		beq	.L100
 1029              	.LVL136:
1865:.\sd/ff.c     **** 			*p++ = '.';
 1030              		.loc 1 1865 0
 1031 0030 2E22     		mov	r2, #46
 1032 0032 1A70     		strb	r2, [r3]
 1033              	.LVL137:
 1034 0034 0133     		add	r3, r3, #1
 1035              	.LVL138:
1866:.\sd/ff.c     **** 			for (i = 8; i < 11; i++) {
 1036              		.loc 1 1866 0
 1037 0036 0822     		mov	r2, #8
 1038 0038 05E0     		b	.L101
 1039              	.LVL139:
 1040              	.L102:
1867:.\sd/ff.c     **** 				c = dir[i];
 1041              		.loc 1 1867 0
 1042 003a A05C     		ldrb	r0, [r4, r2]
 1043              	.LVL140:
1868:.\sd/ff.c     **** 				if (c == ' ') break;
 1044              		.loc 1 1868 0
 1045 003c 2028     		cmp	r0, #32
 1046 003e 04D0     		beq	.L100
 1047              	.LVL141:
1869:.\sd/ff.c     **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1870:.\sd/ff.c     **** #if _LFN_UNICODE
1871:.\sd/ff.c     **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1872:.\sd/ff.c     **** 					c = (c << 8) | dir[++i];
1873:.\sd/ff.c     **** 				c = ff_convert(c, 1);
1874:.\sd/ff.c     **** 				if (!c) c = '?';
1875:.\sd/ff.c     **** #endif
1876:.\sd/ff.c     **** 				*p++ = c;
 1048              		.loc 1 1876 0
 1049 0040 1870     		strb	r0, [r3]
 1050              	.LVL142:
1866:.\sd/ff.c     **** 			for (i = 8; i < 11; i++) {
 1051              		.loc 1 1866 0
 1052 0042 0132     		add	r2, r2, #1
 1053              	.LVL143:
 1054              		.loc 1 1876 0
 1055 0044 0133     		add	r3, r3, #1
 1056              	.LVL144:
 1057              	.L101:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 53


1866:.\sd/ff.c     **** 			for (i = 8; i < 11; i++) {
 1058              		.loc 1 1866 0 discriminator 1
 1059 0046 0A2A     		cmp	r2, #10
 1060 0048 F7D9     		bls	.L102
 1061              	.LVL145:
 1062              	.L100:
1877:.\sd/ff.c     **** 			}
1878:.\sd/ff.c     **** 		}
1879:.\sd/ff.c     **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 1063              		.loc 1 1879 0
 1064 004a E27A     		ldrb	r2, [r4, #11]
 1065 004c 0A72     		strb	r2, [r1, #8]
1880:.\sd/ff.c     **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 1066              		.loc 1 1880 0
 1067 004e E07F     		ldrb	r0, [r4, #31]
 1068 0050 0006     		lsl	r0, r0, #24
 1069 0052 A27F     		ldrb	r2, [r4, #30]
 1070 0054 1204     		lsl	r2, r2, #16
 1071 0056 0243     		orr	r2, r0
 1072 0058 607F     		ldrb	r0, [r4, #29]
 1073 005a 0002     		lsl	r0, r0, #8
 1074 005c 0243     		orr	r2, r0
 1075 005e 207F     		ldrb	r0, [r4, #28]
 1076 0060 0243     		orr	r2, r0
 1077 0062 0A60     		str	r2, [r1]
1881:.\sd/ff.c     **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 1078              		.loc 1 1881 0
 1079 0064 627E     		ldrb	r2, [r4, #25]
 1080 0066 1202     		lsl	r2, r2, #8
 1081 0068 207E     		ldrb	r0, [r4, #24]
 1082 006a 0243     		orr	r2, r0
 1083 006c 8A80     		strh	r2, [r1, #4]
1882:.\sd/ff.c     **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 1084              		.loc 1 1882 0
 1085 006e E27D     		ldrb	r2, [r4, #23]
 1086 0070 1202     		lsl	r2, r2, #8
 1087 0072 A07D     		ldrb	r0, [r4, #22]
 1088 0074 0243     		orr	r2, r0
 1089 0076 CA80     		strh	r2, [r1, #6]
 1090              	.LVL146:
 1091              	.L95:
1883:.\sd/ff.c     **** 	}
1884:.\sd/ff.c     **** 	*p = 0;		/* Terminate SFN str by a \0 */
 1092              		.loc 1 1884 0
 1093 0078 0022     		mov	r2, #0
 1094 007a 1A70     		strb	r2, [r3]
1885:.\sd/ff.c     **** 
1886:.\sd/ff.c     **** #if _USE_LFN
1887:.\sd/ff.c     **** 	if (fno->lfname && fno->lfsize) {
1888:.\sd/ff.c     **** 		TCHAR *tp = fno->lfname;
1889:.\sd/ff.c     **** 		WCHAR w, *lfn;
1890:.\sd/ff.c     **** 
1891:.\sd/ff.c     **** 		i = 0;
1892:.\sd/ff.c     **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1893:.\sd/ff.c     **** 			lfn = dj->lfn;
1894:.\sd/ff.c     **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1895:.\sd/ff.c     **** #if !_LFN_UNICODE
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 54


1896:.\sd/ff.c     **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1897:.\sd/ff.c     **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1898:.\sd/ff.c     **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1899:.\sd/ff.c     **** 					tp[i++] = (TCHAR)(w >> 8);
1900:.\sd/ff.c     **** #endif
1901:.\sd/ff.c     **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1902:.\sd/ff.c     **** 				tp[i++] = (TCHAR)w;
1903:.\sd/ff.c     **** 			}
1904:.\sd/ff.c     **** 		}
1905:.\sd/ff.c     **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1906:.\sd/ff.c     **** 	}
1907:.\sd/ff.c     **** #endif
1908:.\sd/ff.c     **** }
 1095              		.loc 1 1908 0
 1096              		@ sp needed
 1097 007c 30BD     		pop	{r4, r5, pc}
 1098              		.cfi_endproc
 1099              	.LFE23:
 1100              		.size	get_fileinfo, .-get_fileinfo
 1101 007e C046     		.section	.text.move_window,"ax",%progbits
 1102              		.align	2
 1103              		.code	16
 1104              		.thumb_func
 1105              		.type	move_window, %function
 1106              	move_window:
 1107              	.LFB9:
 723:.\sd/ff.c     **** {
 1108              		.loc 1 723 0
 1109              		.cfi_startproc
 1110              	.LVL147:
 1111 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1112              		.cfi_def_cfa_offset 20
 1113              		.cfi_offset 4, -20
 1114              		.cfi_offset 5, -16
 1115              		.cfi_offset 6, -12
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118 0002 4746     		mov	r7, r8
 1119 0004 80B4     		push	{r7}
 1120              		.cfi_def_cfa_offset 24
 1121              		.cfi_offset 8, -24
 1122 0006 041C     		mov	r4, r0
 1123 0008 0E1C     		mov	r6, r1
 727:.\sd/ff.c     **** 	wsect = fs->winsect;
 1124              		.loc 1 727 0
 1125 000a C56A     		ldr	r5, [r0, #44]
 1126              	.LVL148:
 728:.\sd/ff.c     **** 	if (wsect != sector) {	/* Changed current window */
 1127              		.loc 1 728 0
 1128 000c 8D42     		cmp	r5, r1
 1129 000e 2ED0     		beq	.L109
 730:.\sd/ff.c     **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 1130              		.loc 1 730 0
 1131 0010 0379     		ldrb	r3, [r0, #4]
 1132 0012 002B     		cmp	r3, #0
 1133 0014 1ED0     		beq	.L106
 731:.\sd/ff.c     **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 55


 1134              		.loc 1 731 0
 1135 0016 3021     		mov	r1, #48
 1136              	.LVL149:
 1137 0018 0918     		add	r1, r1, r0
 1138 001a 8846     		mov	r8, r1
 1139 001c 4078     		ldrb	r0, [r0, #1]
 1140              	.LVL150:
 1141 001e 2A1C     		mov	r2, r5
 1142 0020 0123     		mov	r3, #1
 1143 0022 FFF7FEFF 		bl	disk_write
 1144              	.LVL151:
 1145 0026 0028     		cmp	r0, #0
 1146 0028 23D1     		bne	.L110
 733:.\sd/ff.c     **** 			fs->wflag = 0;
 1147              		.loc 1 733 0
 1148 002a 0023     		mov	r3, #0
 1149 002c 2371     		strb	r3, [r4, #4]
 734:.\sd/ff.c     **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 1150              		.loc 1 734 0
 1151 002e 226A     		ldr	r2, [r4, #32]
 1152 0030 E169     		ldr	r1, [r4, #28]
 1153 0032 5318     		add	r3, r2, r1
 1154 0034 AB42     		cmp	r3, r5
 1155 0036 0DD9     		bls	.L106
 1156              	.LBB2:
 736:.\sd/ff.c     **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1157              		.loc 1 736 0
 1158 0038 E778     		ldrb	r7, [r4, #3]
 1159              	.LVL152:
 1160 003a 09E0     		b	.L107
 1161              	.LVL153:
 1162              	.L108:
 737:.\sd/ff.c     **** 					wsect += fs->fsize;
 1163              		.loc 1 737 0 discriminator 2
 1164 003c E269     		ldr	r2, [r4, #28]
 1165 003e AD18     		add	r5, r5, r2
 1166              	.LVL154:
 738:.\sd/ff.c     **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1167              		.loc 1 738 0 discriminator 2
 1168 0040 6078     		ldrb	r0, [r4, #1]
 1169 0042 4146     		mov	r1, r8
 1170 0044 2A1C     		mov	r2, r5
 1171 0046 0123     		mov	r3, #1
 1172 0048 FFF7FEFF 		bl	disk_write
 1173              	.LVL155:
 736:.\sd/ff.c     **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1174              		.loc 1 736 0 discriminator 2
 1175 004c 013F     		sub	r7, r7, #1
 1176              	.LVL156:
 1177 004e FFB2     		uxtb	r7, r7
 1178              	.LVL157:
 1179              	.L107:
 736:.\sd/ff.c     **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1180              		.loc 1 736 0 is_stmt 0 discriminator 1
 1181 0050 012F     		cmp	r7, #1
 1182 0052 F3D8     		bhi	.L108
 1183              	.LVL158:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 56


 1184              	.L106:
 1185              	.LBE2:
 743:.\sd/ff.c     **** 		if (sector) {
 1186              		.loc 1 743 0 is_stmt 1
 1187 0054 002E     		cmp	r6, #0
 1188 0056 0ED0     		beq	.L111
 744:.\sd/ff.c     **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 1189              		.loc 1 744 0
 1190 0058 211C     		mov	r1, r4
 1191 005a 3031     		add	r1, r1, #48
 1192 005c 6078     		ldrb	r0, [r4, #1]
 1193 005e 321C     		mov	r2, r6
 1194 0060 0123     		mov	r3, #1
 1195 0062 FFF7FEFF 		bl	disk_read
 1196              	.LVL159:
 1197 0066 0028     		cmp	r0, #0
 1198 0068 07D1     		bne	.L112
 746:.\sd/ff.c     **** 			fs->winsect = sector;
 1199              		.loc 1 746 0
 1200 006a E662     		str	r6, [r4, #44]
 1201 006c 06E0     		b	.L105
 1202              	.LVL160:
 1203              	.L109:
 750:.\sd/ff.c     **** 	return FR_OK;
 1204              		.loc 1 750 0
 1205 006e 0020     		mov	r0, #0
 1206              	.LVL161:
 1207 0070 04E0     		b	.L105
 1208              	.LVL162:
 1209              	.L110:
 732:.\sd/ff.c     **** 				return FR_DISK_ERR;
 1210              		.loc 1 732 0
 1211 0072 0120     		mov	r0, #1
 1212 0074 02E0     		b	.L105
 1213              	.L111:
 750:.\sd/ff.c     **** 	return FR_OK;
 1214              		.loc 1 750 0
 1215 0076 0020     		mov	r0, #0
 1216 0078 00E0     		b	.L105
 1217              	.L112:
 745:.\sd/ff.c     **** 				return FR_DISK_ERR;
 1218              		.loc 1 745 0
 1219 007a 0120     		mov	r0, #1
 1220              	.L105:
 751:.\sd/ff.c     **** }
 1221              		.loc 1 751 0
 1222              		@ sp needed
 1223              	.LVL163:
 1224              	.LVL164:
 1225              	.LVL165:
 1226 007c 04BC     		pop	{r2}
 1227 007e 9046     		mov	r8, r2
 1228 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 1229              		.cfi_endproc
 1230              	.LFE9:
 1231              		.size	move_window, .-move_window
 1232 0082 C046     		.section	.text.check_fs,"ax",%progbits
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 57


 1233              		.align	2
 1234              		.code	16
 1235              		.thumb_func
 1236              		.type	check_fs, %function
 1237              	check_fs:
 1238              	.LFB25:
1909:.\sd/ff.c     **** #endif /* _FS_MINIMIZE <= 1 */
1910:.\sd/ff.c     **** 
1911:.\sd/ff.c     **** 
1912:.\sd/ff.c     **** 
1913:.\sd/ff.c     **** 
1914:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1915:.\sd/ff.c     **** /* Follow a file path                                                    */
1916:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1917:.\sd/ff.c     **** 
1918:.\sd/ff.c     **** static
1919:.\sd/ff.c     **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1920:.\sd/ff.c     **** 	DIR *dj,			/* Directory object to return last directory and found object */
1921:.\sd/ff.c     **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1922:.\sd/ff.c     **** )
1923:.\sd/ff.c     **** {
1924:.\sd/ff.c     **** 	FRESULT res;
1925:.\sd/ff.c     **** 	BYTE *dir, ns;
1926:.\sd/ff.c     **** 
1927:.\sd/ff.c     **** 
1928:.\sd/ff.c     **** #if _FS_RPATH
1929:.\sd/ff.c     **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1930:.\sd/ff.c     **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1931:.\sd/ff.c     **** 	} else {							/* No heading separator */
1932:.\sd/ff.c     **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1933:.\sd/ff.c     **** 	}
1934:.\sd/ff.c     **** #else
1935:.\sd/ff.c     **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1936:.\sd/ff.c     **** 		path++;
1937:.\sd/ff.c     **** 	dj->sclust = 0;						/* Start from the root dir */
1938:.\sd/ff.c     **** #endif
1939:.\sd/ff.c     **** 
1940:.\sd/ff.c     **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1941:.\sd/ff.c     **** 		res = dir_sdi(dj, 0);
1942:.\sd/ff.c     **** 		dj->dir = 0;
1943:.\sd/ff.c     **** 
1944:.\sd/ff.c     **** 	} else {							/* Follow path */
1945:.\sd/ff.c     **** 		for (;;) {
1946:.\sd/ff.c     **** 			res = create_name(dj, &path);	/* Get a segment */
1947:.\sd/ff.c     **** 			if (res != FR_OK) break;
1948:.\sd/ff.c     **** 			res = dir_find(dj);				/* Find it */
1949:.\sd/ff.c     **** 			ns = *(dj->fn+NS);
1950:.\sd/ff.c     **** 			if (res != FR_OK) {				/* Failed to find the object */
1951:.\sd/ff.c     **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1952:.\sd/ff.c     **** 				/* Object not found */
1953:.\sd/ff.c     **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1954:.\sd/ff.c     **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1955:.\sd/ff.c     **** 					res = FR_OK;
1956:.\sd/ff.c     **** 					if (!(ns & NS_LAST)) continue;
1957:.\sd/ff.c     **** 				} else {							/* Could not find the object */
1958:.\sd/ff.c     **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1959:.\sd/ff.c     **** 				}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 58


1960:.\sd/ff.c     **** 				break;
1961:.\sd/ff.c     **** 			}
1962:.\sd/ff.c     **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1963:.\sd/ff.c     **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1964:.\sd/ff.c     **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1965:.\sd/ff.c     **** 				res = FR_NO_PATH; break;
1966:.\sd/ff.c     **** 			}
1967:.\sd/ff.c     **** 			dj->sclust = LD_CLUST(dir);
1968:.\sd/ff.c     **** 		}
1969:.\sd/ff.c     **** 	}
1970:.\sd/ff.c     **** 
1971:.\sd/ff.c     **** 	return res;
1972:.\sd/ff.c     **** }
1973:.\sd/ff.c     **** 
1974:.\sd/ff.c     **** 
1975:.\sd/ff.c     **** 
1976:.\sd/ff.c     **** 
1977:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1978:.\sd/ff.c     **** /* Load a sector and check if it is an FAT Volume Boot Record            */
1979:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
1980:.\sd/ff.c     **** 
1981:.\sd/ff.c     **** static
1982:.\sd/ff.c     **** BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
1983:.\sd/ff.c     **** 	FATFS *fs,	/* File system object */
1984:.\sd/ff.c     **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1985:.\sd/ff.c     **** )
1986:.\sd/ff.c     **** {
 1239              		.loc 1 1986 0
 1240              		.cfi_startproc
 1241              	.LVL166:
 1242 0000 10B5     		push	{r4, lr}
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
 1246 0002 041C     		mov	r4, r0
 1247 0004 0A1C     		mov	r2, r1
1987:.\sd/ff.c     **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 1248              		.loc 1 1987 0
 1249 0006 011C     		mov	r1, r0
 1250              	.LVL167:
 1251 0008 3031     		add	r1, r1, #48
 1252 000a 4078     		ldrb	r0, [r0, #1]
 1253              	.LVL168:
 1254 000c 0123     		mov	r3, #1
 1255 000e FFF7FEFF 		bl	disk_read
 1256              	.LVL169:
 1257 0012 0028     		cmp	r0, #0
 1258 0014 30D1     		bne	.L115
1988:.\sd/ff.c     **** 		return 3;
1989:.\sd/ff.c     **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 1259              		.loc 1 1989 0
 1260 0016 1C4B     		ldr	r3, .L119
 1261 0018 E25C     		ldrb	r2, [r4, r3]
 1262 001a 1202     		lsl	r2, r2, #8
 1263 001c 1B4B     		ldr	r3, .L119+4
 1264 001e E35C     		ldrb	r3, [r4, r3]
 1265 0020 1A43     		orr	r2, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 59


 1266 0022 12B2     		sxth	r2, r2
 1267 0024 1A4B     		ldr	r3, .L119+8
 1268 0026 9A42     		cmp	r2, r3
 1269 0028 28D1     		bne	.L116
1990:.\sd/ff.c     **** 		return 2;
1991:.\sd/ff.c     **** 
1992:.\sd/ff.c     **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 1270              		.loc 1 1992 0
 1271 002a 6923     		mov	r3, #105
 1272 002c E25C     		ldrb	r2, [r4, r3]
 1273 002e 1206     		lsl	r2, r2, #24
 1274 0030 6823     		mov	r3, #104
 1275 0032 E35C     		ldrb	r3, [r4, r3]
 1276 0034 1B04     		lsl	r3, r3, #16
 1277 0036 1A43     		orr	r2, r3
 1278 0038 6723     		mov	r3, #103
 1279 003a E35C     		ldrb	r3, [r4, r3]
 1280 003c 1B02     		lsl	r3, r3, #8
 1281 003e 1A43     		orr	r2, r3
 1282 0040 6623     		mov	r3, #102
 1283 0042 E35C     		ldrb	r3, [r4, r3]
 1284 0044 1A43     		orr	r2, r3
 1285 0046 1202     		lsl	r2, r2, #8
 1286 0048 120A     		lsr	r2, r2, #8
 1287 004a 124B     		ldr	r3, .L119+12
 1288 004c 9A42     		cmp	r2, r3
 1289 004e 17D0     		beq	.L117
1993:.\sd/ff.c     **** 		return 0;
1994:.\sd/ff.c     **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 1290              		.loc 1 1994 0
 1291 0050 8523     		mov	r3, #133
 1292 0052 E25C     		ldrb	r2, [r4, r3]
 1293 0054 1206     		lsl	r2, r2, #24
 1294 0056 8423     		mov	r3, #132
 1295 0058 E35C     		ldrb	r3, [r4, r3]
 1296 005a 1B04     		lsl	r3, r3, #16
 1297 005c 1A43     		orr	r2, r3
 1298 005e 8323     		mov	r3, #131
 1299 0060 E35C     		ldrb	r3, [r4, r3]
 1300 0062 1B02     		lsl	r3, r3, #8
 1301 0064 1A43     		orr	r2, r3
 1302 0066 8223     		mov	r3, #130
 1303 0068 E35C     		ldrb	r3, [r4, r3]
 1304 006a 1A43     		orr	r2, r3
 1305 006c 1202     		lsl	r2, r2, #8
 1306 006e 120A     		lsr	r2, r2, #8
 1307 0070 084B     		ldr	r3, .L119+12
 1308 0072 9A42     		cmp	r2, r3
 1309 0074 06D1     		bne	.L118
 1310 0076 06E0     		b	.L114
 1311              	.L115:
1988:.\sd/ff.c     **** 		return 3;
 1312              		.loc 1 1988 0
 1313 0078 0320     		mov	r0, #3
 1314 007a 04E0     		b	.L114
 1315              	.L116:
1990:.\sd/ff.c     **** 		return 2;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 60


 1316              		.loc 1 1990 0
 1317 007c 0220     		mov	r0, #2
 1318 007e 02E0     		b	.L114
 1319              	.L117:
1993:.\sd/ff.c     **** 		return 0;
 1320              		.loc 1 1993 0
 1321 0080 0020     		mov	r0, #0
 1322 0082 00E0     		b	.L114
 1323              	.L118:
1995:.\sd/ff.c     **** 		return 0;
1996:.\sd/ff.c     **** 
1997:.\sd/ff.c     **** 	return 1;
 1324              		.loc 1 1997 0
 1325 0084 0120     		mov	r0, #1
 1326              	.L114:
1998:.\sd/ff.c     **** }
 1327              		.loc 1 1998 0
 1328              		@ sp needed
 1329              	.LVL170:
 1330 0086 10BD     		pop	{r4, pc}
 1331              	.L120:
 1332              		.align	2
 1333              	.L119:
 1334 0088 2F020000 		.word	559
 1335 008c 2E020000 		.word	558
 1336 0090 55AAFFFF 		.word	-21931
 1337 0094 46415400 		.word	5521734
 1338              		.cfi_endproc
 1339              	.LFE25:
 1340              		.size	check_fs, .-check_fs
 1341              		.section	.text.validate,"ax",%progbits
 1342              		.align	2
 1343              		.code	16
 1344              		.thumb_func
 1345              		.type	validate, %function
 1346              	validate:
 1347              	.LFB27:
1999:.\sd/ff.c     **** 
2000:.\sd/ff.c     **** 
2001:.\sd/ff.c     **** 
2002:.\sd/ff.c     **** 
2003:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2004:.\sd/ff.c     **** /* Check if the file system object is valid or not                       */
2005:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2006:.\sd/ff.c     **** 
2007:.\sd/ff.c     **** static
2008:.\sd/ff.c     **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2009:.\sd/ff.c     **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2010:.\sd/ff.c     **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2011:.\sd/ff.c     **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
2012:.\sd/ff.c     **** )
2013:.\sd/ff.c     **** {
2014:.\sd/ff.c     **** 	BYTE fmt, b, pi, *tbl;
2015:.\sd/ff.c     **** 	UINT vol;
2016:.\sd/ff.c     **** 	DSTATUS stat;
2017:.\sd/ff.c     **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2018:.\sd/ff.c     **** 	WORD nrsv;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 61


2019:.\sd/ff.c     **** 	const TCHAR *p = *path;
2020:.\sd/ff.c     **** 	FATFS *fs;
2021:.\sd/ff.c     **** 
2022:.\sd/ff.c     **** 	/* Get logical drive number from the path name */
2023:.\sd/ff.c     **** 	vol = p[0] - '0';					/* Is there a drive number? */
2024:.\sd/ff.c     **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
2025:.\sd/ff.c     **** 		p += 2; *path = p;				/* Return pointer to the path name */
2026:.\sd/ff.c     **** 	} else {							/* No drive number is given */
2027:.\sd/ff.c     **** #if _FS_RPATH
2028:.\sd/ff.c     **** 		vol = CurrVol;					/* Use current drive */
2029:.\sd/ff.c     **** #else
2030:.\sd/ff.c     **** 		vol = 0;						/* Use drive 0 */
2031:.\sd/ff.c     **** #endif
2032:.\sd/ff.c     **** 	}
2033:.\sd/ff.c     **** 
2034:.\sd/ff.c     **** 	/* Check if the file system object is valid or not */
2035:.\sd/ff.c     **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
2036:.\sd/ff.c     **** 		return FR_INVALID_DRIVE;
2037:.\sd/ff.c     **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
2038:.\sd/ff.c     **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2039:.\sd/ff.c     **** 
2040:.\sd/ff.c     **** 	ENTER_FF(fs);						/* Lock file system */
2041:.\sd/ff.c     **** 
2042:.\sd/ff.c     **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
2043:.\sd/ff.c     **** 		stat = disk_status(fs->drv);
2044:.\sd/ff.c     **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
2045:.\sd/ff.c     **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
2046:.\sd/ff.c     **** 				return FR_WRITE_PROTECTED;
2047:.\sd/ff.c     **** 			return FR_OK;				/* The file system object is valid */
2048:.\sd/ff.c     **** 		}
2049:.\sd/ff.c     **** 	}
2050:.\sd/ff.c     **** 
2051:.\sd/ff.c     **** 	/* The file system object is not valid. */
2052:.\sd/ff.c     **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2053:.\sd/ff.c     **** 
2054:.\sd/ff.c     **** 	fs->fs_type = 0;					/* Clear the file system object */
2055:.\sd/ff.c     **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2056:.\sd/ff.c     **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
2057:.\sd/ff.c     **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2058:.\sd/ff.c     **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
2059:.\sd/ff.c     **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2060:.\sd/ff.c     **** 		return FR_WRITE_PROTECTED;
2061:.\sd/ff.c     **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2062:.\sd/ff.c     **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2063:.\sd/ff.c     **** 		return FR_DISK_ERR;
2064:.\sd/ff.c     **** #endif
2065:.\sd/ff.c     **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
2066:.\sd/ff.c     **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
2067:.\sd/ff.c     **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
2068:.\sd/ff.c     **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
2069:.\sd/ff.c     **** 		/* Check the partition listed in the partition table */
2070:.\sd/ff.c     **** 		pi = LD2PT(vol);
2071:.\sd/ff.c     **** 		if (pi) pi--;
2072:.\sd/ff.c     **** 		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
2073:.\sd/ff.c     **** 		if (tbl[4]) {						/* Is the partition existing? */
2074:.\sd/ff.c     **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
2075:.\sd/ff.c     **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 62


2076:.\sd/ff.c     **** 		}
2077:.\sd/ff.c     **** 	}
2078:.\sd/ff.c     **** 	if (fmt == 3) return FR_DISK_ERR;
2079:.\sd/ff.c     **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
2080:.\sd/ff.c     **** 
2081:.\sd/ff.c     **** 	/* An FAT volume is found. Following code initializes the file system object */
2082:.\sd/ff.c     **** 
2083:.\sd/ff.c     **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
2084:.\sd/ff.c     **** 		return FR_NO_FILESYSTEM;
2085:.\sd/ff.c     **** 
2086:.\sd/ff.c     **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
2087:.\sd/ff.c     **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
2088:.\sd/ff.c     **** 	fs->fsize = fasize;
2089:.\sd/ff.c     **** 
2090:.\sd/ff.c     **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
2091:.\sd/ff.c     **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
2092:.\sd/ff.c     **** 	fasize *= b;										/* Number of sectors for FAT area */
2093:.\sd/ff.c     **** 
2094:.\sd/ff.c     **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
2095:.\sd/ff.c     **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2096:.\sd/ff.c     **** 
2097:.\sd/ff.c     **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
2098:.\sd/ff.c     **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
2099:.\sd/ff.c     **** 
2100:.\sd/ff.c     **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
2101:.\sd/ff.c     **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
2102:.\sd/ff.c     **** 
2103:.\sd/ff.c     **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
2104:.\sd/ff.c     **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
2105:.\sd/ff.c     **** 
2106:.\sd/ff.c     **** 	/* Determine the FAT sub type */
2107:.\sd/ff.c     **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
2108:.\sd/ff.c     **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2109:.\sd/ff.c     **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2110:.\sd/ff.c     **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2111:.\sd/ff.c     **** 	fmt = FS_FAT12;
2112:.\sd/ff.c     **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2113:.\sd/ff.c     **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2114:.\sd/ff.c     **** 
2115:.\sd/ff.c     **** 	/* Boundaries and Limits */
2116:.\sd/ff.c     **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2117:.\sd/ff.c     **** 	fs->database = bsect + sysect;						/* Data start sector */
2118:.\sd/ff.c     **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2119:.\sd/ff.c     **** 	if (fmt == FS_FAT32) {
2120:.\sd/ff.c     **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2121:.\sd/ff.c     **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
2122:.\sd/ff.c     **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
2123:.\sd/ff.c     **** 	} else {
2124:.\sd/ff.c     **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2125:.\sd/ff.c     **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2126:.\sd/ff.c     **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2127:.\sd/ff.c     **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2128:.\sd/ff.c     **** 	}
2129:.\sd/ff.c     **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
2130:.\sd/ff.c     **** 		return FR_NO_FILESYSTEM;
2131:.\sd/ff.c     **** 
2132:.\sd/ff.c     **** #if !_FS_READONLY
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 63


2133:.\sd/ff.c     **** 	/* Initialize cluster allocation information */
2134:.\sd/ff.c     **** 	fs->free_clust = 0xFFFFFFFF;
2135:.\sd/ff.c     **** 	fs->last_clust = 0;
2136:.\sd/ff.c     **** 
2137:.\sd/ff.c     **** 	/* Get fsinfo if available */
2138:.\sd/ff.c     **** 	if (fmt == FS_FAT32) {
2139:.\sd/ff.c     **** 	 	fs->fsi_flag = 0;
2140:.\sd/ff.c     **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
2141:.\sd/ff.c     **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
2142:.\sd/ff.c     **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
2143:.\sd/ff.c     **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
2144:.\sd/ff.c     **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
2145:.\sd/ff.c     **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
2146:.\sd/ff.c     **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
2147:.\sd/ff.c     **** 		}
2148:.\sd/ff.c     **** 	}
2149:.\sd/ff.c     **** #endif
2150:.\sd/ff.c     **** 	fs->fs_type = fmt;		/* FAT sub-type */
2151:.\sd/ff.c     **** 	fs->id = ++Fsid;		/* File system mount ID */
2152:.\sd/ff.c     **** 	fs->winsect = 0;		/* Invalidate sector cache */
2153:.\sd/ff.c     **** 	fs->wflag = 0;
2154:.\sd/ff.c     **** #if _FS_RPATH
2155:.\sd/ff.c     **** 	fs->cdir = 0;			/* Current directory (root dir) */
2156:.\sd/ff.c     **** #endif
2157:.\sd/ff.c     **** #if _FS_SHARE				/* Clear file lock semaphores */
2158:.\sd/ff.c     **** 	clear_lock(fs);
2159:.\sd/ff.c     **** #endif
2160:.\sd/ff.c     **** 
2161:.\sd/ff.c     **** 	return FR_OK;
2162:.\sd/ff.c     **** }
2163:.\sd/ff.c     **** 
2164:.\sd/ff.c     **** 
2165:.\sd/ff.c     **** 
2166:.\sd/ff.c     **** 
2167:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2168:.\sd/ff.c     **** /* Check if the file/dir object is valid or not                          */
2169:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2170:.\sd/ff.c     **** 
2171:.\sd/ff.c     **** static
2172:.\sd/ff.c     **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2173:.\sd/ff.c     **** 	FATFS *fs,		/* Pointer to the file system object */
2174:.\sd/ff.c     **** 	WORD id			/* Member id of the target object to be checked */
2175:.\sd/ff.c     **** )
2176:.\sd/ff.c     **** {
 1348              		.loc 1 2176 0
 1349              		.cfi_startproc
 1350              	.LVL171:
 1351 0000 08B5     		push	{r3, lr}
 1352              		.cfi_def_cfa_offset 8
 1353              		.cfi_offset 3, -8
 1354              		.cfi_offset 14, -4
2177:.\sd/ff.c     **** 	if (!fs || !fs->fs_type || fs->id != id)
 1355              		.loc 1 2177 0
 1356 0002 0028     		cmp	r0, #0
 1357 0004 0CD0     		beq	.L123
 1358              		.loc 1 2177 0 is_stmt 0 discriminator 1
 1359 0006 0378     		ldrb	r3, [r0]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 64


 1360 0008 002B     		cmp	r3, #0
 1361 000a 0BD0     		beq	.L124
 1362 000c C388     		ldrh	r3, [r0, #6]
 1363 000e 8B42     		cmp	r3, r1
 1364 0010 0AD1     		bne	.L125
2178:.\sd/ff.c     **** 		return FR_INVALID_OBJECT;
2179:.\sd/ff.c     **** 
2180:.\sd/ff.c     **** 	ENTER_FF(fs);		/* Lock file system */
2181:.\sd/ff.c     **** 
2182:.\sd/ff.c     **** 	if (disk_status(fs->drv) & STA_NOINIT)
 1365              		.loc 1 2182 0 is_stmt 1
 1366 0012 4078     		ldrb	r0, [r0, #1]
 1367              	.LVL172:
 1368 0014 FFF7FEFF 		bl	disk_status
 1369              	.LVL173:
 1370 0018 C307     		lsl	r3, r0, #31
 1371 001a 07D5     		bpl	.L126
2183:.\sd/ff.c     **** 		return FR_NOT_READY;
 1372              		.loc 1 2183 0
 1373 001c 0320     		mov	r0, #3
 1374 001e 06E0     		b	.L122
 1375              	.LVL174:
 1376              	.L123:
2178:.\sd/ff.c     **** 		return FR_INVALID_OBJECT;
 1377              		.loc 1 2178 0
 1378 0020 0920     		mov	r0, #9
 1379              	.LVL175:
 1380 0022 04E0     		b	.L122
 1381              	.LVL176:
 1382              	.L124:
 1383 0024 0920     		mov	r0, #9
 1384              	.LVL177:
 1385 0026 02E0     		b	.L122
 1386              	.LVL178:
 1387              	.L125:
 1388 0028 0920     		mov	r0, #9
 1389              	.LVL179:
 1390 002a 00E0     		b	.L122
 1391              	.LVL180:
 1392              	.L126:
2184:.\sd/ff.c     **** 
2185:.\sd/ff.c     **** 	return FR_OK;
 1393              		.loc 1 2185 0
 1394 002c 0020     		mov	r0, #0
 1395              	.L122:
2186:.\sd/ff.c     **** }
 1396              		.loc 1 2186 0
 1397              		@ sp needed
 1398 002e 08BD     		pop	{r3, pc}
 1399              		.cfi_endproc
 1400              	.LFE27:
 1401              		.size	validate, .-validate
 1402              		.global	__aeabi_uidiv
 1403              		.section	.text.chk_mounted,"ax",%progbits
 1404              		.align	2
 1405              		.code	16
 1406              		.thumb_func
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 65


 1407              		.type	chk_mounted, %function
 1408              	chk_mounted:
 1409              	.LFB26:
2013:.\sd/ff.c     **** {
 1410              		.loc 1 2013 0
 1411              		.cfi_startproc
 1412              	.LVL181:
 1413 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1414              		.cfi_def_cfa_offset 24
 1415              		.cfi_offset 3, -24
 1416              		.cfi_offset 4, -20
 1417              		.cfi_offset 5, -16
 1418              		.cfi_offset 6, -12
 1419              		.cfi_offset 7, -8
 1420              		.cfi_offset 14, -4
 1421 0002 5F46     		mov	r7, fp
 1422 0004 5646     		mov	r6, r10
 1423 0006 4D46     		mov	r5, r9
 1424 0008 4446     		mov	r4, r8
 1425 000a F0B4     		push	{r4, r5, r6, r7}
 1426              		.cfi_def_cfa_offset 40
 1427              		.cfi_offset 8, -40
 1428              		.cfi_offset 9, -36
 1429              		.cfi_offset 10, -32
 1430              		.cfi_offset 11, -28
 1431 000c 161C     		mov	r6, r2
2019:.\sd/ff.c     **** 	const TCHAR *p = *path;
 1432              		.loc 1 2019 0
 1433 000e 0368     		ldr	r3, [r0]
 1434              	.LVL182:
2023:.\sd/ff.c     **** 	vol = p[0] - '0';					/* Is there a drive number? */
 1435              		.loc 1 2023 0
 1436 0010 1C78     		ldrb	r4, [r3]
 1437 0012 303C     		sub	r4, r4, #48
 1438              	.LVL183:
2024:.\sd/ff.c     **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 1439              		.loc 1 2024 0
 1440 0014 092C     		cmp	r4, #9
 1441 0016 05D8     		bhi	.L142
2024:.\sd/ff.c     **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 1442              		.loc 1 2024 0 is_stmt 0 discriminator 1
 1443 0018 5A78     		ldrb	r2, [r3, #1]
 1444              	.LVL184:
 1445 001a 3A2A     		cmp	r2, #58
 1446 001c 04D1     		bne	.L143
2025:.\sd/ff.c     **** 		p += 2; *path = p;				/* Return pointer to the path name */
 1447              		.loc 1 2025 0 is_stmt 1
 1448 001e 0233     		add	r3, r3, #2
 1449              	.LVL185:
 1450 0020 0360     		str	r3, [r0]
 1451 0022 02E0     		b	.L128
 1452              	.LVL186:
 1453              	.L142:
2030:.\sd/ff.c     **** 		vol = 0;						/* Use drive 0 */
 1454              		.loc 1 2030 0
 1455 0024 0024     		mov	r4, #0
 1456              	.LVL187:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 66


 1457 0026 00E0     		b	.L128
 1458              	.LVL188:
 1459              	.L143:
 1460 0028 0024     		mov	r4, #0
 1461              	.LVL189:
 1462              	.L128:
2035:.\sd/ff.c     **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 1463              		.loc 1 2035 0
 1464 002a 002C     		cmp	r4, #0
 1465 002c 00D0     		beq	.LCB1667
 1466 002e 71E1     		b	.L144	@long jump
 1467              	.LCB1667:
2037:.\sd/ff.c     **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 1468              		.loc 1 2037 0
 1469 0030 A300     		lsl	r3, r4, #2
 1470              	.LVL190:
 1471 0032 CE4A     		ldr	r2, .L167
 1472 0034 D318     		add	r3, r2, r3
 1473 0036 5D6A     		ldr	r5, [r3, #36]
 1474              	.LVL191:
 1475 0038 0D60     		str	r5, [r1]
 1476              	.LVL192:
2038:.\sd/ff.c     **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1477              		.loc 1 2038 0
 1478 003a 002D     		cmp	r5, #0
 1479 003c 00D1     		bne	.LCB1677
 1480 003e 6BE1     		b	.L145	@long jump
 1481              	.LCB1677:
2042:.\sd/ff.c     **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
 1482              		.loc 1 2042 0
 1483 0040 2B78     		ldrb	r3, [r5]
 1484 0042 002B     		cmp	r3, #0
 1485 0044 0CD0     		beq	.L130
2043:.\sd/ff.c     **** 		stat = disk_status(fs->drv);
 1486              		.loc 1 2043 0
 1487 0046 6878     		ldrb	r0, [r5, #1]
 1488              	.LVL193:
 1489 0048 FFF7FEFF 		bl	disk_status
 1490              	.LVL194:
2044:.\sd/ff.c     **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 1491              		.loc 1 2044 0
 1492 004c C107     		lsl	r1, r0, #31
 1493 004e 07D4     		bmi	.L130
2045:.\sd/ff.c     **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 1494              		.loc 1 2045 0
 1495 0050 002E     		cmp	r6, #0
 1496 0052 00D1     		bne	.LCB1693
 1497 0054 62E1     		b	.L146	@long jump
 1498              	.LCB1693:
2045:.\sd/ff.c     **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 1499              		.loc 1 2045 0 is_stmt 0 discriminator 1
 1500 0056 4207     		lsl	r2, r0, #29
 1501 0058 00D5     		bpl	.LCB1698
 1502 005a 61E1     		b	.L147	@long jump
 1503              	.LCB1698:
2047:.\sd/ff.c     **** 			return FR_OK;				/* The file system object is valid */
 1504              		.loc 1 2047 0 is_stmt 1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 67


 1505 005c 0020     		mov	r0, #0
 1506              	.LVL195:
 1507 005e 7EE1     		b	.L129
 1508              	.L130:
2054:.\sd/ff.c     **** 	fs->fs_type = 0;					/* Clear the file system object */
 1509              		.loc 1 2054 0
 1510 0060 0023     		mov	r3, #0
 1511 0062 2B70     		strb	r3, [r5]
2055:.\sd/ff.c     **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1512              		.loc 1 2055 0
 1513 0064 E0B2     		uxtb	r0, r4
 1514 0066 6870     		strb	r0, [r5, #1]
2056:.\sd/ff.c     **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 1515              		.loc 1 2056 0
 1516 0068 FFF7FEFF 		bl	disk_initialize
 1517              	.LVL196:
2057:.\sd/ff.c     **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1518              		.loc 1 2057 0
 1519 006c C307     		lsl	r3, r0, #31
 1520 006e 00D5     		bpl	.LCB1717
 1521 0070 58E1     		b	.L148	@long jump
 1522              	.LCB1717:
2059:.\sd/ff.c     **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1523              		.loc 1 2059 0
 1524 0072 002E     		cmp	r6, #0
 1525 0074 02D0     		beq	.L131
2059:.\sd/ff.c     **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1526              		.loc 1 2059 0 is_stmt 0 discriminator 1
 1527 0076 4607     		lsl	r6, r0, #29
 1528 0078 00D5     		bpl	.LCB1724
 1529 007a 55E1     		b	.L149	@long jump
 1530              	.LCB1724:
 1531              	.L131:
 1532              	.LVL197:
2066:.\sd/ff.c     **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 1533              		.loc 1 2066 0 is_stmt 1
 1534 007c 281C     		mov	r0, r5
 1535              	.LVL198:
 1536 007e 0021     		mov	r1, #0
 1537 0080 FFF7FEFF 		bl	check_fs
 1538              	.LVL199:
2068:.\sd/ff.c     **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 1539              		.loc 1 2068 0
 1540 0084 0128     		cmp	r0, #1
 1541 0086 1BD1     		bne	.L150
 1542              	.LVL200:
2073:.\sd/ff.c     **** 		if (tbl[4]) {						/* Is the partition existing? */
 1543              		.loc 1 2073 0
 1544 0088 F923     		mov	r3, #249
 1545 008a 5B00     		lsl	r3, r3, #1
 1546 008c EB5C     		ldrb	r3, [r5, r3]
 1547 008e 002B     		cmp	r3, #0
 1548 0090 18D0     		beq	.L151
2074:.\sd/ff.c     **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 1549              		.loc 1 2074 0
 1550 0092 FA23     		mov	r3, #250
 1551 0094 FF33     		add	r3, r3, #255
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 68


 1552 0096 EC5C     		ldrb	r4, [r5, r3]
 1553              	.LVL201:
 1554 0098 2406     		lsl	r4, r4, #24
 1555 009a FC23     		mov	r3, #252
 1556 009c 5B00     		lsl	r3, r3, #1
 1557 009e EB5C     		ldrb	r3, [r5, r3]
 1558 00a0 1B04     		lsl	r3, r3, #16
 1559 00a2 1C43     		orr	r4, r3
 1560 00a4 F823     		mov	r3, #248
 1561 00a6 FF33     		add	r3, r3, #255
 1562 00a8 EB5C     		ldrb	r3, [r5, r3]
 1563 00aa 1B02     		lsl	r3, r3, #8
 1564 00ac 1C43     		orr	r4, r3
 1565 00ae FB23     		mov	r3, #251
 1566 00b0 5B00     		lsl	r3, r3, #1
 1567 00b2 EB5C     		ldrb	r3, [r5, r3]
 1568 00b4 1C43     		orr	r4, r3
 1569              	.LVL202:
2075:.\sd/ff.c     **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 1570              		.loc 1 2075 0
 1571 00b6 281C     		mov	r0, r5
 1572              	.LVL203:
 1573 00b8 211C     		mov	r1, r4
 1574 00ba FFF7FEFF 		bl	check_fs
 1575              	.LVL204:
 1576 00be 02E0     		b	.L132
 1577              	.LVL205:
 1578              	.L150:
2066:.\sd/ff.c     **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 1579              		.loc 1 2066 0
 1580 00c0 0024     		mov	r4, #0
 1581              	.LVL206:
 1582 00c2 00E0     		b	.L132
 1583              	.LVL207:
 1584              	.L151:
 1585 00c4 0024     		mov	r4, #0
 1586              	.LVL208:
 1587              	.L132:
2078:.\sd/ff.c     **** 	if (fmt == 3) return FR_DISK_ERR;
 1588              		.loc 1 2078 0
 1589 00c6 0328     		cmp	r0, #3
 1590 00c8 00D1     		bne	.LCB1797
 1591 00ca 2FE1     		b	.L152	@long jump
 1592              	.LCB1797:
2079:.\sd/ff.c     **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1593              		.loc 1 2079 0
 1594 00cc 0028     		cmp	r0, #0
 1595 00ce 00D0     		beq	.LCB1799
 1596 00d0 2EE1     		b	.L153	@long jump
 1597              	.LCB1799:
2083:.\sd/ff.c     **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
 1598              		.loc 1 2083 0
 1599 00d2 3C23     		mov	r3, #60
 1600 00d4 EA5C     		ldrb	r2, [r5, r3]
 1601 00d6 1202     		lsl	r2, r2, #8
 1602 00d8 3B23     		mov	r3, #59
 1603 00da EB5C     		ldrb	r3, [r5, r3]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 69


 1604 00dc 1A43     		orr	r2, r3
 1605 00de 12B2     		sxth	r2, r2
 1606 00e0 8023     		mov	r3, #128
 1607 00e2 9B00     		lsl	r3, r3, #2
 1608 00e4 9A42     		cmp	r2, r3
 1609 00e6 00D0     		beq	.LCB1811
 1610 00e8 24E1     		b	.L154	@long jump
 1611              	.LCB1811:
2086:.\sd/ff.c     **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 1612              		.loc 1 2086 0
 1613 00ea 4723     		mov	r3, #71
 1614 00ec EF5C     		ldrb	r7, [r5, r3]
 1615 00ee 3F02     		lsl	r7, r7, #8
 1616 00f0 4623     		mov	r3, #70
 1617 00f2 EB5C     		ldrb	r3, [r5, r3]
 1618 00f4 1F43     		orr	r7, r3
 1619              	.LVL209:
2087:.\sd/ff.c     **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 1620              		.loc 1 2087 0
 1621 00f6 0DD1     		bne	.L133
2087:.\sd/ff.c     **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 1622              		.loc 1 2087 0 is_stmt 0 discriminator 1
 1623 00f8 5723     		mov	r3, #87
 1624 00fa EF5C     		ldrb	r7, [r5, r3]
 1625              	.LVL210:
 1626 00fc 3F06     		lsl	r7, r7, #24
 1627 00fe 5623     		mov	r3, #86
 1628 0100 EB5C     		ldrb	r3, [r5, r3]
 1629 0102 1B04     		lsl	r3, r3, #16
 1630 0104 1F43     		orr	r7, r3
 1631 0106 5523     		mov	r3, #85
 1632 0108 EB5C     		ldrb	r3, [r5, r3]
 1633 010a 1B02     		lsl	r3, r3, #8
 1634 010c 1F43     		orr	r7, r3
 1635 010e 5423     		mov	r3, #84
 1636 0110 EB5C     		ldrb	r3, [r5, r3]
 1637 0112 1F43     		orr	r7, r3
 1638              	.LVL211:
 1639              	.L133:
2088:.\sd/ff.c     **** 	fs->fsize = fasize;
 1640              		.loc 1 2088 0 is_stmt 1
 1641 0114 EF61     		str	r7, [r5, #28]
2090:.\sd/ff.c     **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 1642              		.loc 1 2090 0
 1643 0116 4023     		mov	r3, #64
 1644 0118 EB5C     		ldrb	r3, [r5, r3]
 1645              	.LVL212:
 1646 011a EB70     		strb	r3, [r5, #3]
 1647              	.LVL213:
2091:.\sd/ff.c     **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 1648              		.loc 1 2091 0
 1649 011c 5A1E     		sub	r2, r3, #1
 1650 011e 012A     		cmp	r2, #1
 1651 0120 00D9     		bls	.LCB1851
 1652 0122 09E1     		b	.L155	@long jump
 1653              	.LCB1851:
2092:.\sd/ff.c     **** 	fasize *= b;										/* Number of sectors for FAT area */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 70


 1654              		.loc 1 2092 0
 1655 0124 7B43     		mul	r3, r7
 1656              	.LVL214:
 1657 0126 9B46     		mov	fp, r3
 1658              	.LVL215:
2094:.\sd/ff.c     **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 1659              		.loc 1 2094 0
 1660 0128 3D23     		mov	r3, #61
 1661              	.LVL216:
 1662 012a E95C     		ldrb	r1, [r5, r3]
 1663              	.LVL217:
 1664 012c A970     		strb	r1, [r5, #2]
 1665              	.LVL218:
2095:.\sd/ff.c     **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 1666              		.loc 1 2095 0
 1667 012e 0029     		cmp	r1, #0
 1668 0130 00D1     		bne	.LCB1864
 1669 0132 03E1     		b	.L156	@long jump
 1670              	.LCB1864:
2095:.\sd/ff.c     **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 1671              		.loc 1 2095 0 is_stmt 0 discriminator 2
 1672 0134 4B1E     		sub	r3, r1, #1
 1673 0136 0B42     		tst	r3, r1
 1674 0138 00D0     		beq	.LCB1868
 1675 013a 01E1     		b	.L157	@long jump
 1676              	.LCB1868:
2097:.\sd/ff.c     **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 1677              		.loc 1 2097 0 is_stmt 1
 1678 013c 4223     		mov	r3, #66
 1679 013e EA5C     		ldrb	r2, [r5, r3]
 1680 0140 1202     		lsl	r2, r2, #8
 1681 0142 4123     		mov	r3, #65
 1682 0144 EB5C     		ldrb	r3, [r5, r3]
 1683 0146 1A43     		orr	r2, r3
 1684 0148 9046     		mov	r8, r2
 1685 014a 2A81     		strh	r2, [r5, #8]
2098:.\sd/ff.c     **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 1686              		.loc 1 2098 0
 1687 014c 4346     		mov	r3, r8
 1688 014e 1B07     		lsl	r3, r3, #28
 1689 0150 00D0     		beq	.LCB1883
 1690 0152 F7E0     		b	.L158	@long jump
 1691              	.LCB1883:
2100:.\sd/ff.c     **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 1692              		.loc 1 2100 0
 1693 0154 4423     		mov	r3, #68
 1694 0156 E85C     		ldrb	r0, [r5, r3]
 1695              	.LVL219:
 1696 0158 0002     		lsl	r0, r0, #8
 1697 015a 4323     		mov	r3, #67
 1698 015c EB5C     		ldrb	r3, [r5, r3]
 1699 015e 1843     		orr	r0, r3
 1700              	.LVL220:
2101:.\sd/ff.c     **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 1701              		.loc 1 2101 0
 1702 0160 0DD1     		bne	.L134
2101:.\sd/ff.c     **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 71


 1703              		.loc 1 2101 0 is_stmt 0 discriminator 1
 1704 0162 5323     		mov	r3, #83
 1705 0164 E85C     		ldrb	r0, [r5, r3]
 1706              	.LVL221:
 1707 0166 0006     		lsl	r0, r0, #24
 1708 0168 5223     		mov	r3, #82
 1709 016a EB5C     		ldrb	r3, [r5, r3]
 1710 016c 1B04     		lsl	r3, r3, #16
 1711 016e 1843     		orr	r0, r3
 1712 0170 5123     		mov	r3, #81
 1713 0172 EB5C     		ldrb	r3, [r5, r3]
 1714 0174 1B02     		lsl	r3, r3, #8
 1715 0176 1843     		orr	r0, r3
 1716 0178 5023     		mov	r3, #80
 1717 017a EB5C     		ldrb	r3, [r5, r3]
 1718 017c 1843     		orr	r0, r3
 1719              	.LVL222:
 1720              	.L134:
2103:.\sd/ff.c     **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 1721              		.loc 1 2103 0 is_stmt 1
 1722 017e 3F23     		mov	r3, #63
 1723 0180 EA5C     		ldrb	r2, [r5, r3]
 1724 0182 1202     		lsl	r2, r2, #8
 1725 0184 3E23     		mov	r3, #62
 1726 0186 EB5C     		ldrb	r3, [r5, r3]
 1727 0188 1A43     		orr	r2, r3
 1728 018a 9146     		mov	r9, r2
 1729              	.LVL223:
2104:.\sd/ff.c     **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 1730              		.loc 1 2104 0
 1731 018c 00D1     		bne	.LCB1926
 1732 018e DBE0     		b	.L159	@long jump
 1733              	.LCB1926:
2107:.\sd/ff.c     **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 1734              		.loc 1 2107 0
 1735 0190 131C     		mov	r3, r2
 1736 0192 5B44     		add	r3, r3, fp
 1737 0194 4646     		mov	r6, r8
 1738 0196 3209     		lsr	r2, r6, #4
 1739              	.LVL224:
 1740 0198 9B18     		add	r3, r3, r2
 1741 019a 9A46     		mov	r10, r3
 1742              	.LVL225:
2108:.\sd/ff.c     **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1743              		.loc 1 2108 0
 1744 019c 9842     		cmp	r0, r3
 1745 019e 00D2     		bcs	.LCB1938
 1746 01a0 D4E0     		b	.L160	@long jump
 1747              	.LCB1938:
2109:.\sd/ff.c     **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1748              		.loc 1 2109 0
 1749 01a2 C01A     		sub	r0, r0, r3
 1750              	.LVL226:
 1751 01a4 FFF7FEFF 		bl	__aeabi_uidiv
 1752              	.LVL227:
2110:.\sd/ff.c     **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1753              		.loc 1 2110 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 72


 1754 01a8 0028     		cmp	r0, #0
 1755 01aa 00D1     		bne	.LCB1947
 1756 01ac D0E0     		b	.L161	@long jump
 1757              	.LCB1947:
 1758              	.LVL228:
2112:.\sd/ff.c     **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1759              		.loc 1 2112 0
 1760 01ae 704B     		ldr	r3, .L167+4
 1761 01b0 9842     		cmp	r0, r3
 1762 01b2 01D8     		bhi	.L162
2111:.\sd/ff.c     **** 	fmt = FS_FAT12;
 1763              		.loc 1 2111 0
 1764 01b4 0126     		mov	r6, #1
 1765 01b6 00E0     		b	.L135
 1766              	.L162:
2112:.\sd/ff.c     **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1767              		.loc 1 2112 0
 1768 01b8 0226     		mov	r6, #2
 1769              	.L135:
 1770              	.LVL229:
2113:.\sd/ff.c     **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1771              		.loc 1 2113 0
 1772 01ba 6E4B     		ldr	r3, .L167+8
 1773 01bc 9842     		cmp	r0, r3
 1774 01be 00D9     		bls	.L136
 1775 01c0 0326     		mov	r6, #3
 1776              	.LVL230:
 1777              	.L136:
2116:.\sd/ff.c     **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 1778              		.loc 1 2116 0
 1779 01c2 831C     		add	r3, r0, #2
 1780 01c4 AB61     		str	r3, [r5, #24]
2117:.\sd/ff.c     **** 	fs->database = bsect + sysect;						/* Data start sector */
 1781              		.loc 1 2117 0
 1782 01c6 5146     		mov	r1, r10
 1783 01c8 6218     		add	r2, r4, r1
 1784 01ca AA62     		str	r2, [r5, #40]
2118:.\sd/ff.c     **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1785              		.loc 1 2118 0
 1786 01cc 4946     		mov	r1, r9
 1787 01ce 6218     		add	r2, r4, r1
 1788 01d0 2A62     		str	r2, [r5, #32]
2119:.\sd/ff.c     **** 	if (fmt == FS_FAT32) {
 1789              		.loc 1 2119 0
 1790 01d2 032E     		cmp	r6, #3
 1791 01d4 14D1     		bne	.L137
 1792              	.LVL231:
2120:.\sd/ff.c     **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1793              		.loc 1 2120 0
 1794 01d6 4246     		mov	r2, r8
 1795 01d8 002A     		cmp	r2, #0
 1796 01da 00D0     		beq	.LCB1982
 1797 01dc BAE0     		b	.L164	@long jump
 1798              	.LCB1982:
2121:.\sd/ff.c     **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 1799              		.loc 1 2121 0
 1800 01de 5F22     		mov	r2, #95
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 73


 1801 01e0 A95C     		ldrb	r1, [r5, r2]
 1802              	.LVL232:
 1803 01e2 0906     		lsl	r1, r1, #24
 1804 01e4 5E22     		mov	r2, #94
 1805 01e6 AA5C     		ldrb	r2, [r5, r2]
 1806 01e8 1204     		lsl	r2, r2, #16
 1807 01ea 1143     		orr	r1, r2
 1808 01ec 5D22     		mov	r2, #93
 1809 01ee AA5C     		ldrb	r2, [r5, r2]
 1810 01f0 1202     		lsl	r2, r2, #8
 1811 01f2 1143     		orr	r1, r2
 1812 01f4 5C22     		mov	r2, #92
 1813 01f6 AA5C     		ldrb	r2, [r5, r2]
 1814 01f8 0A43     		orr	r2, r1
 1815 01fa 6A62     		str	r2, [r5, #36]
2122:.\sd/ff.c     **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 1816              		.loc 1 2122 0
 1817 01fc 9B00     		lsl	r3, r3, #2
 1818              	.LVL233:
 1819 01fe 0FE0     		b	.L138
 1820              	.LVL234:
 1821              	.L137:
2124:.\sd/ff.c     **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 1822              		.loc 1 2124 0
 1823 0200 4146     		mov	r1, r8
 1824              	.LVL235:
 1825 0202 0029     		cmp	r1, #0
 1826 0204 00D1     		bne	.LCB2010
 1827 0206 A7E0     		b	.L165	@long jump
 1828              	.LCB2010:
2125:.\sd/ff.c     **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1829              		.loc 1 2125 0
 1830 0208 5A44     		add	r2, r2, fp
 1831 020a 6A62     		str	r2, [r5, #36]
2127:.\sd/ff.c     **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1832              		.loc 1 2127 0
 1833 020c 022E     		cmp	r6, #2
 1834 020e 01D1     		bne	.L139
2127:.\sd/ff.c     **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1835              		.loc 1 2127 0 is_stmt 0 discriminator 1
 1836 0210 5B00     		lsl	r3, r3, #1
 1837 0212 05E0     		b	.L138
 1838              	.L139:
2127:.\sd/ff.c     **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1839              		.loc 1 2127 0 discriminator 2
 1840 0214 0322     		mov	r2, #3
 1841 0216 5A43     		mul	r2, r3
 1842 0218 5208     		lsr	r2, r2, #1
 1843 021a 0121     		mov	r1, #1
 1844 021c 0B40     		and	r3, r1
 1845 021e D318     		add	r3, r2, r3
 1846              	.LVL236:
 1847              	.L138:
2129:.\sd/ff.c     **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 1848              		.loc 1 2129 0 is_stmt 1
 1849 0220 554A     		ldr	r2, .L167+12
 1850 0222 9B18     		add	r3, r3, r2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 74


 1851              	.LVL237:
 1852 0224 5B0A     		lsr	r3, r3, #9
 1853              	.LVL238:
 1854 0226 9F42     		cmp	r7, r3
 1855 0228 00D2     		bcs	.LCB2039
 1856 022a 97E0     		b	.L166	@long jump
 1857              	.LCB2039:
2134:.\sd/ff.c     **** 	fs->free_clust = 0xFFFFFFFF;
 1858              		.loc 1 2134 0
 1859 022c 0123     		mov	r3, #1
 1860 022e 5B42     		neg	r3, r3
 1861 0230 2B61     		str	r3, [r5, #16]
2135:.\sd/ff.c     **** 	fs->last_clust = 0;
 1862              		.loc 1 2135 0
 1863 0232 0023     		mov	r3, #0
 1864 0234 EB60     		str	r3, [r5, #12]
2138:.\sd/ff.c     **** 	if (fmt == FS_FAT32) {
 1865              		.loc 1 2138 0
 1866 0236 032E     		cmp	r6, #3
 1867 0238 5DD1     		bne	.L141
2139:.\sd/ff.c     **** 	 	fs->fsi_flag = 0;
 1868              		.loc 1 2139 0
 1869 023a 6B71     		strb	r3, [r5, #5]
2140:.\sd/ff.c     **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 1870              		.loc 1 2140 0
 1871 023c 6123     		mov	r3, #97
 1872 023e EA5C     		ldrb	r2, [r5, r3]
 1873 0240 1202     		lsl	r2, r2, #8
 1874 0242 6023     		mov	r3, #96
 1875 0244 EB5C     		ldrb	r3, [r5, r3]
 1876 0246 1A43     		orr	r2, r3
 1877 0248 1219     		add	r2, r2, r4
 1878 024a 6A61     		str	r2, [r5, #20]
2141:.\sd/ff.c     **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 1879              		.loc 1 2141 0
 1880 024c 291C     		mov	r1, r5
 1881 024e 3031     		add	r1, r1, #48
 1882 0250 6878     		ldrb	r0, [r5, #1]
 1883              	.LVL239:
 1884 0252 0123     		mov	r3, #1
 1885 0254 FFF7FEFF 		bl	disk_read
 1886              	.LVL240:
 1887 0258 0028     		cmp	r0, #0
 1888 025a 4CD1     		bne	.L141
2142:.\sd/ff.c     **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 1889              		.loc 1 2142 0 discriminator 1
 1890 025c 474B     		ldr	r3, .L167+16
 1891 025e EA5C     		ldrb	r2, [r5, r3]
 1892 0260 1202     		lsl	r2, r2, #8
 1893 0262 474B     		ldr	r3, .L167+20
 1894 0264 EB5C     		ldrb	r3, [r5, r3]
 1895 0266 1A43     		orr	r2, r3
2141:.\sd/ff.c     **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 1896              		.loc 1 2141 0 discriminator 1
 1897 0268 12B2     		sxth	r2, r2
 1898 026a 464B     		ldr	r3, .L167+24
 1899 026c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 75


 1900 026e 42D1     		bne	.L141
2143:.\sd/ff.c     **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 1901              		.loc 1 2143 0
 1902 0270 3323     		mov	r3, #51
 1903 0272 EA5C     		ldrb	r2, [r5, r3]
 1904 0274 1206     		lsl	r2, r2, #24
 1905 0276 3223     		mov	r3, #50
 1906 0278 EB5C     		ldrb	r3, [r5, r3]
 1907 027a 1B04     		lsl	r3, r3, #16
 1908 027c 1A43     		orr	r2, r3
 1909 027e 3123     		mov	r3, #49
 1910 0280 EB5C     		ldrb	r3, [r5, r3]
 1911 0282 1B02     		lsl	r3, r3, #8
 1912 0284 1A43     		orr	r2, r3
 1913 0286 3023     		mov	r3, #48
 1914 0288 EB5C     		ldrb	r3, [r5, r3]
 1915 028a 1A43     		orr	r2, r3
2142:.\sd/ff.c     **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 1916              		.loc 1 2142 0
 1917 028c 3E4B     		ldr	r3, .L167+28
 1918 028e 9A42     		cmp	r2, r3
 1919 0290 31D1     		bne	.L141
2144:.\sd/ff.c     **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 1920              		.loc 1 2144 0
 1921 0292 3E4B     		ldr	r3, .L167+32
 1922 0294 EA5C     		ldrb	r2, [r5, r3]
 1923 0296 1206     		lsl	r2, r2, #24
 1924 0298 3D4B     		ldr	r3, .L167+36
 1925 029a EB5C     		ldrb	r3, [r5, r3]
 1926 029c 1B04     		lsl	r3, r3, #16
 1927 029e 1A43     		orr	r2, r3
 1928 02a0 3C4B     		ldr	r3, .L167+40
 1929 02a2 EB5C     		ldrb	r3, [r5, r3]
 1930 02a4 1B02     		lsl	r3, r3, #8
 1931 02a6 1A43     		orr	r2, r3
 1932 02a8 8523     		mov	r3, #133
 1933 02aa 9B00     		lsl	r3, r3, #2
 1934 02ac EB5C     		ldrb	r3, [r5, r3]
 1935 02ae 1A43     		orr	r2, r3
2143:.\sd/ff.c     **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 1936              		.loc 1 2143 0
 1937 02b0 394B     		ldr	r3, .L167+44
 1938 02b2 9A42     		cmp	r2, r3
 1939 02b4 1FD1     		bne	.L141
2145:.\sd/ff.c     **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 1940              		.loc 1 2145 0
 1941 02b6 394B     		ldr	r3, .L167+48
 1942 02b8 EA5C     		ldrb	r2, [r5, r3]
 1943 02ba 1206     		lsl	r2, r2, #24
 1944 02bc 384B     		ldr	r3, .L167+52
 1945 02be EB5C     		ldrb	r3, [r5, r3]
 1946 02c0 1B04     		lsl	r3, r3, #16
 1947 02c2 1A43     		orr	r2, r3
 1948 02c4 374B     		ldr	r3, .L167+56
 1949 02c6 EB5C     		ldrb	r3, [r5, r3]
 1950 02c8 1B02     		lsl	r3, r3, #8
 1951 02ca 1A43     		orr	r2, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 76


 1952 02cc 8723     		mov	r3, #135
 1953 02ce 9B00     		lsl	r3, r3, #2
 1954 02d0 EB5C     		ldrb	r3, [r5, r3]
 1955 02d2 1343     		orr	r3, r2
 1956 02d4 EB60     		str	r3, [r5, #12]
2146:.\sd/ff.c     **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 1957              		.loc 1 2146 0
 1958 02d6 344B     		ldr	r3, .L167+60
 1959 02d8 EA5C     		ldrb	r2, [r5, r3]
 1960 02da 1206     		lsl	r2, r2, #24
 1961 02dc 334B     		ldr	r3, .L167+64
 1962 02de EB5C     		ldrb	r3, [r5, r3]
 1963 02e0 1B04     		lsl	r3, r3, #16
 1964 02e2 1A43     		orr	r2, r3
 1965 02e4 324B     		ldr	r3, .L167+68
 1966 02e6 EB5C     		ldrb	r3, [r5, r3]
 1967 02e8 1B02     		lsl	r3, r3, #8
 1968 02ea 1A43     		orr	r2, r3
 1969 02ec 8623     		mov	r3, #134
 1970 02ee 9B00     		lsl	r3, r3, #2
 1971 02f0 EB5C     		ldrb	r3, [r5, r3]
 1972 02f2 1343     		orr	r3, r2
 1973 02f4 2B61     		str	r3, [r5, #16]
 1974              	.L141:
2150:.\sd/ff.c     **** 	fs->fs_type = fmt;		/* FAT sub-type */
 1975              		.loc 1 2150 0
 1976 02f6 2E70     		strb	r6, [r5]
2151:.\sd/ff.c     **** 	fs->id = ++Fsid;		/* File system mount ID */
 1977              		.loc 1 2151 0
 1978 02f8 1C4A     		ldr	r2, .L167
 1979 02fa 138D     		ldrh	r3, [r2, #40]
 1980 02fc 0133     		add	r3, r3, #1
 1981 02fe 9BB2     		uxth	r3, r3
 1982 0300 1385     		strh	r3, [r2, #40]
 1983 0302 EB80     		strh	r3, [r5, #6]
2152:.\sd/ff.c     **** 	fs->winsect = 0;		/* Invalidate sector cache */
 1984              		.loc 1 2152 0
 1985 0304 0024     		mov	r4, #0
 1986              	.LVL241:
 1987 0306 EC62     		str	r4, [r5, #44]
2153:.\sd/ff.c     **** 	fs->wflag = 0;
 1988              		.loc 1 2153 0
 1989 0308 2C71     		strb	r4, [r5, #4]
2158:.\sd/ff.c     **** 	clear_lock(fs);
 1990              		.loc 1 2158 0
 1991 030a 281C     		mov	r0, r5
 1992 030c FFF7FEFF 		bl	clear_lock
 1993              	.LVL242:
2161:.\sd/ff.c     **** 	return FR_OK;
 1994              		.loc 1 2161 0
 1995 0310 201C     		mov	r0, r4
 1996 0312 24E0     		b	.L129
 1997              	.LVL243:
 1998              	.L144:
2036:.\sd/ff.c     **** 		return FR_INVALID_DRIVE;
 1999              		.loc 1 2036 0
 2000 0314 0B20     		mov	r0, #11
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 77


 2001              	.LVL244:
 2002 0316 22E0     		b	.L129
 2003              	.LVL245:
 2004              	.L145:
2038:.\sd/ff.c     **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 2005              		.loc 1 2038 0
 2006 0318 0C20     		mov	r0, #12
 2007              	.LVL246:
 2008 031a 20E0     		b	.L129
 2009              	.LVL247:
 2010              	.L146:
2047:.\sd/ff.c     **** 			return FR_OK;				/* The file system object is valid */
 2011              		.loc 1 2047 0
 2012 031c 0020     		mov	r0, #0
 2013              	.LVL248:
 2014 031e 1EE0     		b	.L129
 2015              	.LVL249:
 2016              	.L147:
2046:.\sd/ff.c     **** 				return FR_WRITE_PROTECTED;
 2017              		.loc 1 2046 0
 2018 0320 0A20     		mov	r0, #10
 2019              	.LVL250:
 2020 0322 1CE0     		b	.L129
 2021              	.LVL251:
 2022              	.L148:
2058:.\sd/ff.c     **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 2023              		.loc 1 2058 0
 2024 0324 0320     		mov	r0, #3
 2025              	.LVL252:
 2026 0326 1AE0     		b	.L129
 2027              	.LVL253:
 2028              	.L149:
2060:.\sd/ff.c     **** 		return FR_WRITE_PROTECTED;
 2029              		.loc 1 2060 0
 2030 0328 0A20     		mov	r0, #10
 2031              	.LVL254:
 2032 032a 18E0     		b	.L129
 2033              	.LVL255:
 2034              	.L152:
2078:.\sd/ff.c     **** 	if (fmt == 3) return FR_DISK_ERR;
 2035              		.loc 1 2078 0
 2036 032c 0120     		mov	r0, #1
 2037              	.LVL256:
 2038 032e 16E0     		b	.L129
 2039              	.LVL257:
 2040              	.L153:
2079:.\sd/ff.c     **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 2041              		.loc 1 2079 0
 2042 0330 0D20     		mov	r0, #13
 2043              	.LVL258:
 2044 0332 14E0     		b	.L129
 2045              	.LVL259:
 2046              	.L154:
2084:.\sd/ff.c     **** 		return FR_NO_FILESYSTEM;
 2047              		.loc 1 2084 0
 2048 0334 0D20     		mov	r0, #13
 2049              	.LVL260:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 78


 2050 0336 12E0     		b	.L129
 2051              	.LVL261:
 2052              	.L155:
2091:.\sd/ff.c     **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 2053              		.loc 1 2091 0
 2054 0338 0D20     		mov	r0, #13
 2055              	.LVL262:
 2056 033a 10E0     		b	.L129
 2057              	.LVL263:
 2058              	.L156:
2095:.\sd/ff.c     **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 2059              		.loc 1 2095 0
 2060 033c 0D20     		mov	r0, #13
 2061              	.LVL264:
 2062 033e 0EE0     		b	.L129
 2063              	.LVL265:
 2064              	.L157:
 2065 0340 0D20     		mov	r0, #13
 2066              	.LVL266:
 2067 0342 0CE0     		b	.L129
 2068              	.LVL267:
 2069              	.L158:
2098:.\sd/ff.c     **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 2070              		.loc 1 2098 0
 2071 0344 0D20     		mov	r0, #13
 2072              	.LVL268:
 2073 0346 0AE0     		b	.L129
 2074              	.LVL269:
 2075              	.L159:
2104:.\sd/ff.c     **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 2076              		.loc 1 2104 0
 2077 0348 0D20     		mov	r0, #13
 2078              	.LVL270:
 2079 034a 08E0     		b	.L129
 2080              	.LVL271:
 2081              	.L160:
2108:.\sd/ff.c     **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2082              		.loc 1 2108 0
 2083 034c 0D20     		mov	r0, #13
 2084              	.LVL272:
 2085 034e 06E0     		b	.L129
 2086              	.LVL273:
 2087              	.L161:
2110:.\sd/ff.c     **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 2088              		.loc 1 2110 0
 2089 0350 0D20     		mov	r0, #13
 2090              	.LVL274:
 2091 0352 04E0     		b	.L129
 2092              	.LVL275:
 2093              	.L164:
2120:.\sd/ff.c     **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 2094              		.loc 1 2120 0
 2095 0354 0D20     		mov	r0, #13
 2096              	.LVL276:
 2097 0356 02E0     		b	.L129
 2098              	.LVL277:
 2099              	.L165:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 79


2124:.\sd/ff.c     **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 2100              		.loc 1 2124 0
 2101 0358 0D20     		mov	r0, #13
 2102              	.LVL278:
 2103 035a 00E0     		b	.L129
 2104              	.LVL279:
 2105              	.L166:
2130:.\sd/ff.c     **** 		return FR_NO_FILESYSTEM;
 2106              		.loc 1 2130 0
 2107 035c 0D20     		mov	r0, #13
 2108              	.LVL280:
 2109              	.L129:
2162:.\sd/ff.c     **** }
 2110              		.loc 1 2162 0
 2111              		@ sp needed
 2112 035e 3CBC     		pop	{r2, r3, r4, r5}
 2113 0360 9046     		mov	r8, r2
 2114 0362 9946     		mov	r9, r3
 2115 0364 A246     		mov	r10, r4
 2116 0366 AB46     		mov	fp, r5
 2117 0368 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2118              	.L168:
 2119 036a C046     		.align	2
 2120              	.L167:
 2121 036c 00000000 		.word	.LANCHOR0
 2122 0370 F50F0000 		.word	4085
 2123 0374 F5FF0000 		.word	65525
 2124 0378 FF010000 		.word	511
 2125 037c 2F020000 		.word	559
 2126 0380 2E020000 		.word	558
 2127 0384 55AAFFFF 		.word	-21931
 2128 0388 52526141 		.word	1096897106
 2129 038c 17020000 		.word	535
 2130 0390 16020000 		.word	534
 2131 0394 15020000 		.word	533
 2132 0398 72724161 		.word	1631679090
 2133 039c 1F020000 		.word	543
 2134 03a0 1E020000 		.word	542
 2135 03a4 1D020000 		.word	541
 2136 03a8 1B020000 		.word	539
 2137 03ac 1A020000 		.word	538
 2138 03b0 19020000 		.word	537
 2139              		.cfi_endproc
 2140              	.LFE26:
 2141              		.size	chk_mounted, .-chk_mounted
 2142              		.section	.text.sync,"ax",%progbits
 2143              		.align	2
 2144              		.code	16
 2145              		.thumb_func
 2146              		.type	sync, %function
 2147              	sync:
 2148              	.LFB10:
 764:.\sd/ff.c     **** {
 2149              		.loc 1 764 0
 2150              		.cfi_startproc
 2151              	.LVL281:
 2152 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 80


 2153              		.cfi_def_cfa_offset 24
 2154              		.cfi_offset 3, -24
 2155              		.cfi_offset 4, -20
 2156              		.cfi_offset 5, -16
 2157              		.cfi_offset 6, -12
 2158              		.cfi_offset 7, -8
 2159              		.cfi_offset 14, -4
 2160 0002 041C     		mov	r4, r0
 768:.\sd/ff.c     **** 	res = move_window(fs, 0);
 2161              		.loc 1 768 0
 2162 0004 0021     		mov	r1, #0
 2163 0006 FFF7FEFF 		bl	move_window
 2164              	.LVL282:
 2165 000a 051E     		sub	r5, r0, #0
 2166              	.LVL283:
 769:.\sd/ff.c     **** 	if (res == FR_OK) {
 2167              		.loc 1 769 0
 2168 000c 53D1     		bne	.L170
 771:.\sd/ff.c     **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 2169              		.loc 1 771 0
 2170 000e 2378     		ldrb	r3, [r4]
 2171 0010 032B     		cmp	r3, #3
 2172 0012 48D1     		bne	.L171
 771:.\sd/ff.c     **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 2173              		.loc 1 771 0 is_stmt 0 discriminator 1
 2174 0014 6379     		ldrb	r3, [r4, #5]
 2175 0016 002B     		cmp	r3, #0
 2176 0018 45D0     		beq	.L171
 772:.\sd/ff.c     **** 			fs->winsect = 0;
 2177              		.loc 1 772 0 is_stmt 1
 2178 001a 0026     		mov	r6, #0
 2179 001c E662     		str	r6, [r4, #44]
 774:.\sd/ff.c     **** 			mem_set(fs->win, 0, 512);
 2180              		.loc 1 774 0
 2181 001e 271C     		mov	r7, r4
 2182 0020 3037     		add	r7, r7, #48
 2183 0022 381C     		mov	r0, r7
 2184              	.LVL284:
 2185 0024 0021     		mov	r1, #0
 2186 0026 8022     		mov	r2, #128
 2187 0028 9200     		lsl	r2, r2, #2
 2188 002a FFF7FEFF 		bl	mem_set
 2189              	.LVL285:
 775:.\sd/ff.c     **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 2190              		.loc 1 775 0
 2191 002e 5522     		mov	r2, #85
 2192 0030 224B     		ldr	r3, .L173
 2193 0032 E254     		strb	r2, [r4, r3]
 2194 0034 AA22     		mov	r2, #170
 2195 0036 224B     		ldr	r3, .L173+4
 2196 0038 E254     		strb	r2, [r4, r3]
 776:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 2197              		.loc 1 776 0
 2198 003a 5223     		mov	r3, #82
 2199 003c 3022     		mov	r2, #48
 2200 003e A354     		strb	r3, [r4, r2]
 2201 0040 3122     		mov	r2, #49
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 81


 2202 0042 A354     		strb	r3, [r4, r2]
 2203 0044 6123     		mov	r3, #97
 2204 0046 3222     		mov	r2, #50
 2205 0048 A354     		strb	r3, [r4, r2]
 2206 004a 4122     		mov	r2, #65
 2207 004c 3321     		mov	r1, #51
 2208 004e 6254     		strb	r2, [r4, r1]
 777:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 2209              		.loc 1 777 0
 2210 0050 7221     		mov	r1, #114
 2211 0052 8520     		mov	r0, #133
 2212 0054 8000     		lsl	r0, r0, #2
 2213 0056 2154     		strb	r1, [r4, r0]
 2214 0058 1A48     		ldr	r0, .L173+8
 2215 005a 2154     		strb	r1, [r4, r0]
 2216 005c 1A49     		ldr	r1, .L173+12
 2217 005e 6254     		strb	r2, [r4, r1]
 2218 0060 1A4A     		ldr	r2, .L173+16
 2219 0062 A354     		strb	r3, [r4, r2]
 778:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 2220              		.loc 1 778 0
 2221 0064 2369     		ldr	r3, [r4, #16]
 2222 0066 8622     		mov	r2, #134
 2223 0068 9200     		lsl	r2, r2, #2
 2224 006a A354     		strb	r3, [r4, r2]
 2225 006c 190A     		lsr	r1, r3, #8
 2226 006e 184A     		ldr	r2, .L173+20
 2227 0070 A154     		strb	r1, [r4, r2]
 2228 0072 190C     		lsr	r1, r3, #16
 2229 0074 174A     		ldr	r2, .L173+24
 2230 0076 A154     		strb	r1, [r4, r2]
 2231 0078 1B0E     		lsr	r3, r3, #24
 2232 007a 174A     		ldr	r2, .L173+28
 2233 007c A354     		strb	r3, [r4, r2]
 779:.\sd/ff.c     **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 2234              		.loc 1 779 0
 2235 007e E368     		ldr	r3, [r4, #12]
 2236 0080 8722     		mov	r2, #135
 2237 0082 9200     		lsl	r2, r2, #2
 2238 0084 A354     		strb	r3, [r4, r2]
 2239 0086 190A     		lsr	r1, r3, #8
 2240 0088 144A     		ldr	r2, .L173+32
 2241 008a A154     		strb	r1, [r4, r2]
 2242 008c 190C     		lsr	r1, r3, #16
 2243 008e 144A     		ldr	r2, .L173+36
 2244 0090 A154     		strb	r1, [r4, r2]
 2245 0092 1B0E     		lsr	r3, r3, #24
 2246 0094 134A     		ldr	r2, .L173+40
 2247 0096 A354     		strb	r3, [r4, r2]
 781:.\sd/ff.c     **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 2248              		.loc 1 781 0
 2249 0098 6078     		ldrb	r0, [r4, #1]
 2250 009a 391C     		mov	r1, r7
 2251 009c 6269     		ldr	r2, [r4, #20]
 2252 009e 0123     		mov	r3, #1
 2253 00a0 FFF7FEFF 		bl	disk_write
 2254              	.LVL286:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 82


 782:.\sd/ff.c     **** 			fs->fsi_flag = 0;
 2255              		.loc 1 782 0
 2256 00a4 6671     		strb	r6, [r4, #5]
 2257              	.L171:
 785:.\sd/ff.c     **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 2258              		.loc 1 785 0
 2259 00a6 6078     		ldrb	r0, [r4, #1]
 2260 00a8 0021     		mov	r1, #0
 2261 00aa 0022     		mov	r2, #0
 2262 00ac FFF7FEFF 		bl	disk_ioctl
 2263              	.LVL287:
 2264 00b0 0028     		cmp	r0, #0
 2265 00b2 00D0     		beq	.L170
 786:.\sd/ff.c     **** 			res = FR_DISK_ERR;
 2266              		.loc 1 786 0
 2267 00b4 0125     		mov	r5, #1
 2268              	.LVL288:
 2269              	.L170:
 790:.\sd/ff.c     **** }
 2270              		.loc 1 790 0
 2271 00b6 281C     		mov	r0, r5
 2272              		@ sp needed
 2273              	.LVL289:
 2274              	.LVL290:
 2275 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2276              	.L174:
 2277 00ba C046     		.align	2
 2278              	.L173:
 2279 00bc 2E020000 		.word	558
 2280 00c0 2F020000 		.word	559
 2281 00c4 15020000 		.word	533
 2282 00c8 16020000 		.word	534
 2283 00cc 17020000 		.word	535
 2284 00d0 19020000 		.word	537
 2285 00d4 1A020000 		.word	538
 2286 00d8 1B020000 		.word	539
 2287 00dc 1D020000 		.word	541
 2288 00e0 1E020000 		.word	542
 2289 00e4 1F020000 		.word	543
 2290              		.cfi_endproc
 2291              	.LFE10:
 2292              		.size	sync, .-sync
 2293              		.section	.text.clust2sect,"ax",%progbits
 2294              		.align	2
 2295              		.global	clust2sect
 2296              		.code	16
 2297              		.thumb_func
 2298              		.type	clust2sect, %function
 2299              	clust2sect:
 2300              	.LFB11:
 805:.\sd/ff.c     **** {
 2301              		.loc 1 805 0
 2302              		.cfi_startproc
 2303              	.LVL291:
 806:.\sd/ff.c     **** 	clst -= 2;
 2304              		.loc 1 806 0
 2305 0000 0239     		sub	r1, r1, #2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 83


 2306              	.LVL292:
 807:.\sd/ff.c     **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 2307              		.loc 1 807 0
 2308 0002 8369     		ldr	r3, [r0, #24]
 2309 0004 023B     		sub	r3, r3, #2
 2310 0006 8B42     		cmp	r3, r1
 2311 0008 04D9     		bls	.L177
 808:.\sd/ff.c     **** 	return clst * fs->csize + fs->database;
 2312              		.loc 1 808 0
 2313 000a 8378     		ldrb	r3, [r0, #2]
 2314 000c 5943     		mul	r1, r3
 2315              	.LVL293:
 2316 000e 836A     		ldr	r3, [r0, #40]
 2317 0010 C818     		add	r0, r1, r3
 2318              	.LVL294:
 2319 0012 00E0     		b	.L176
 2320              	.LVL295:
 2321              	.L177:
 807:.\sd/ff.c     **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 2322              		.loc 1 807 0
 2323 0014 0020     		mov	r0, #0
 2324              	.LVL296:
 2325              	.L176:
 809:.\sd/ff.c     **** }
 2326              		.loc 1 809 0
 2327              		@ sp needed
 2328 0016 7047     		bx	lr
 2329              		.cfi_endproc
 2330              	.LFE11:
 2331              		.size	clust2sect, .-clust2sect
 2332              		.section	.text.get_fat,"ax",%progbits
 2333              		.align	2
 2334              		.global	get_fat
 2335              		.code	16
 2336              		.thumb_func
 2337              		.type	get_fat, %function
 2338              	get_fat:
 2339              	.LFB12:
 823:.\sd/ff.c     **** {
 2340              		.loc 1 823 0
 2341              		.cfi_startproc
 2342              	.LVL297:
 2343 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2344              		.cfi_def_cfa_offset 24
 2345              		.cfi_offset 3, -24
 2346              		.cfi_offset 4, -20
 2347              		.cfi_offset 5, -16
 2348              		.cfi_offset 6, -12
 2349              		.cfi_offset 7, -8
 2350              		.cfi_offset 14, -4
 2351 0002 051C     		mov	r5, r0
 2352 0004 0C1E     		sub	r4, r1, #0
 828:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 2353              		.loc 1 828 0
 2354 0006 012C     		cmp	r4, #1
 2355 0008 60D9     		bls	.L185
 828:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 84


 2356              		.loc 1 828 0 is_stmt 0 discriminator 1
 2357 000a 8369     		ldr	r3, [r0, #24]
 2358 000c 8B42     		cmp	r3, r1
 2359 000e 5FD9     		bls	.L186
 831:.\sd/ff.c     **** 	switch (fs->fs_type) {
 2360              		.loc 1 831 0 is_stmt 1
 2361 0010 0378     		ldrb	r3, [r0]
 2362 0012 022B     		cmp	r3, #2
 2363 0014 28D0     		beq	.L180
 2364 0016 032B     		cmp	r3, #3
 2365 0018 3BD0     		beq	.L181
 2366 001a 012B     		cmp	r3, #1
 2367 001c 5AD1     		bne	.L192
 2368              	.LVL298:
 833:.\sd/ff.c     **** 		bc = (UINT)clst; bc += bc / 2;
 2369              		.loc 1 833 0
 2370 001e 4E08     		lsr	r6, r1, #1
 2371 0020 8E19     		add	r6, r1, r6
 2372              	.LVL299:
 834:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2373              		.loc 1 834 0
 2374 0022 710A     		lsr	r1, r6, #9
 2375              	.LVL300:
 2376 0024 036A     		ldr	r3, [r0, #32]
 2377 0026 5918     		add	r1, r3, r1
 2378 0028 FFF7FEFF 		bl	move_window
 2379              	.LVL301:
 2380 002c 0028     		cmp	r0, #0
 2381 002e 54D1     		bne	.L188
 835:.\sd/ff.c     **** 		wc = fs->win[bc % SS(fs)]; bc++;
 2382              		.loc 1 835 0
 2383 0030 F305     		lsl	r3, r6, #23
 2384 0032 DB0D     		lsr	r3, r3, #23
 2385 0034 EB18     		add	r3, r5, r3
 2386 0036 3033     		add	r3, r3, #48
 2387 0038 1F78     		ldrb	r7, [r3]
 2388              	.LVL302:
 2389 003a 0136     		add	r6, r6, #1
 2390              	.LVL303:
 836:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2391              		.loc 1 836 0
 2392 003c 710A     		lsr	r1, r6, #9
 2393 003e 2B6A     		ldr	r3, [r5, #32]
 2394 0040 5918     		add	r1, r3, r1
 2395 0042 281C     		mov	r0, r5
 2396 0044 FFF7FEFF 		bl	move_window
 2397              	.LVL304:
 2398 0048 0028     		cmp	r0, #0
 2399 004a 49D1     		bne	.L189
 837:.\sd/ff.c     **** 		wc |= fs->win[bc % SS(fs)] << 8;
 2400              		.loc 1 837 0
 2401 004c F605     		lsl	r6, r6, #23
 2402              	.LVL305:
 2403 004e F60D     		lsr	r6, r6, #23
 2404 0050 AD19     		add	r5, r5, r6
 2405              	.LVL306:
 2406 0052 3035     		add	r5, r5, #48
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 85


 2407 0054 2878     		ldrb	r0, [r5]
 2408 0056 0002     		lsl	r0, r0, #8
 2409 0058 0743     		orr	r7, r0
 2410              	.LVL307:
 838:.\sd/ff.c     **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2411              		.loc 1 838 0
 2412 005a E307     		lsl	r3, r4, #31
 2413 005c 01D5     		bpl	.L183
 838:.\sd/ff.c     **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2414              		.loc 1 838 0 is_stmt 0 discriminator 1
 2415 005e 3809     		lsr	r0, r7, #4
 2416 0060 46E0     		b	.L179
 2417              	.L183:
 838:.\sd/ff.c     **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2418              		.loc 1 838 0 discriminator 2
 2419 0062 3805     		lsl	r0, r7, #20
 2420 0064 000D     		lsr	r0, r0, #20
 2421 0066 43E0     		b	.L179
 2422              	.LVL308:
 2423              	.L180:
 841:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 2424              		.loc 1 841 0 is_stmt 1
 2425 0068 090A     		lsr	r1, r1, #8
 2426              	.LVL309:
 2427 006a 036A     		ldr	r3, [r0, #32]
 2428 006c 5918     		add	r1, r3, r1
 2429 006e FFF7FEFF 		bl	move_window
 2430              	.LVL310:
 2431 0072 0028     		cmp	r0, #0
 2432 0074 37D1     		bne	.L190
 842:.\sd/ff.c     **** 		p = &fs->win[clst * 2 % SS(fs)];
 2433              		.loc 1 842 0
 2434 0076 6400     		lsl	r4, r4, #1
 2435              	.LVL311:
 2436 0078 FF23     		mov	r3, #255
 2437 007a 5B00     		lsl	r3, r3, #1
 2438 007c 1C40     		and	r4, r3
 2439 007e 231C     		mov	r3, r4
 2440 0080 3033     		add	r3, r3, #48
 2441 0082 EB18     		add	r3, r5, r3
 2442              	.LVL312:
 843:.\sd/ff.c     **** 		return LD_WORD(p);
 2443              		.loc 1 843 0
 2444 0084 5878     		ldrb	r0, [r3, #1]
 2445 0086 0002     		lsl	r0, r0, #8
 2446 0088 2C19     		add	r4, r5, r4
 2447 008a 3034     		add	r4, r4, #48
 2448 008c 2378     		ldrb	r3, [r4]
 2449              	.LVL313:
 2450 008e 1843     		orr	r0, r3
 2451 0090 2EE0     		b	.L179
 2452              	.LVL314:
 2453              	.L181:
 846:.\sd/ff.c     **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 2454              		.loc 1 846 0
 2455 0092 C909     		lsr	r1, r1, #7
 2456              	.LVL315:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 86


 2457 0094 036A     		ldr	r3, [r0, #32]
 2458 0096 5918     		add	r1, r3, r1
 2459 0098 FFF7FEFF 		bl	move_window
 2460              	.LVL316:
 2461 009c 0028     		cmp	r0, #0
 2462 009e 25D1     		bne	.L191
 847:.\sd/ff.c     **** 		p = &fs->win[clst * 4 % SS(fs)];
 2463              		.loc 1 847 0
 2464 00a0 A400     		lsl	r4, r4, #2
 2465              	.LVL317:
 2466 00a2 FE23     		mov	r3, #254
 2467 00a4 5B00     		lsl	r3, r3, #1
 2468 00a6 1C40     		and	r4, r3
 2469 00a8 231C     		mov	r3, r4
 2470 00aa 3033     		add	r3, r3, #48
 2471 00ac EB18     		add	r3, r5, r3
 2472              	.LVL318:
 848:.\sd/ff.c     **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 2473              		.loc 1 848 0
 2474 00ae D878     		ldrb	r0, [r3, #3]
 2475 00b0 0006     		lsl	r0, r0, #24
 2476 00b2 9A78     		ldrb	r2, [r3, #2]
 2477 00b4 1204     		lsl	r2, r2, #16
 2478 00b6 1043     		orr	r0, r2
 2479 00b8 5B78     		ldrb	r3, [r3, #1]
 2480              	.LVL319:
 2481 00ba 1B02     		lsl	r3, r3, #8
 2482 00bc 1843     		orr	r0, r3
 2483 00be 2C19     		add	r4, r5, r4
 2484              	.LVL320:
 2485 00c0 3034     		add	r4, r4, #48
 2486 00c2 2378     		ldrb	r3, [r4]
 2487 00c4 1843     		orr	r0, r3
 2488 00c6 0001     		lsl	r0, r0, #4
 2489 00c8 0009     		lsr	r0, r0, #4
 2490 00ca 11E0     		b	.L179
 2491              	.LVL321:
 2492              	.L185:
 829:.\sd/ff.c     **** 		return 1;
 2493              		.loc 1 829 0
 2494 00cc 0120     		mov	r0, #1
 2495              	.LVL322:
 2496 00ce 0FE0     		b	.L179
 2497              	.LVL323:
 2498              	.L186:
 2499 00d0 0120     		mov	r0, #1
 2500              	.LVL324:
 2501 00d2 0DE0     		b	.L179
 2502              	.LVL325:
 2503              	.L192:
 851:.\sd/ff.c     **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 2504              		.loc 1 851 0
 2505 00d4 0120     		mov	r0, #1
 2506              	.LVL326:
 2507 00d6 4042     		neg	r0, r0
 2508 00d8 0AE0     		b	.L179
 2509              	.LVL327:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 87


 2510              	.L188:
 2511 00da 0120     		mov	r0, #1
 2512 00dc 4042     		neg	r0, r0
 2513 00de 07E0     		b	.L179
 2514              	.LVL328:
 2515              	.L189:
 2516 00e0 0120     		mov	r0, #1
 2517 00e2 4042     		neg	r0, r0
 2518 00e4 04E0     		b	.L179
 2519              	.LVL329:
 2520              	.L190:
 2521 00e6 0120     		mov	r0, #1
 2522 00e8 4042     		neg	r0, r0
 2523 00ea 01E0     		b	.L179
 2524              	.L191:
 2525 00ec 0120     		mov	r0, #1
 2526 00ee 4042     		neg	r0, r0
 2527              	.LVL330:
 2528              	.L179:
 852:.\sd/ff.c     **** }
 2529              		.loc 1 852 0
 2530              		@ sp needed
 2531 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2532              		.cfi_endproc
 2533              	.LFE12:
 2534              		.size	get_fat, .-get_fat
 2535 00f2 C046     		.section	.text.dir_sdi,"ax",%progbits
 2536              		.align	2
 2537              		.code	16
 2538              		.thumb_func
 2539              		.type	dir_sdi, %function
 2540              	dir_sdi:
 2541              	.LFB16:
1069:.\sd/ff.c     **** {
 2542              		.loc 1 1069 0
 2543              		.cfi_startproc
 2544              	.LVL331:
 2545 0000 70B5     		push	{r4, r5, r6, lr}
 2546              		.cfi_def_cfa_offset 16
 2547              		.cfi_offset 4, -16
 2548              		.cfi_offset 5, -12
 2549              		.cfi_offset 6, -8
 2550              		.cfi_offset 14, -4
 2551 0002 041C     		mov	r4, r0
 2552 0004 0D1C     		mov	r5, r1
1074:.\sd/ff.c     **** 	dj->index = idx;
 2553              		.loc 1 1074 0
 2554 0006 E180     		strh	r1, [r4, #6]
1075:.\sd/ff.c     **** 	clst = dj->sclust;
 2555              		.loc 1 1075 0
 2556 0008 8168     		ldr	r1, [r0, #8]
 2557              	.LVL332:
1076:.\sd/ff.c     **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 2558              		.loc 1 1076 0
 2559 000a 0129     		cmp	r1, #1
 2560 000c 37D0     		beq	.L200
1076:.\sd/ff.c     **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 88


 2561              		.loc 1 1076 0 is_stmt 0 discriminator 1
 2562 000e 0368     		ldr	r3, [r0]
 2563 0010 9A69     		ldr	r2, [r3, #24]
 2564 0012 8A42     		cmp	r2, r1
 2565 0014 35D9     		bls	.L201
1078:.\sd/ff.c     **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2566              		.loc 1 1078 0 is_stmt 1
 2567 0016 0029     		cmp	r1, #0
 2568 0018 03D1     		bne	.L195
1078:.\sd/ff.c     **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2569              		.loc 1 1078 0 is_stmt 0 discriminator 1
 2570 001a 1A78     		ldrb	r2, [r3]
 2571 001c 032A     		cmp	r2, #3
 2572 001e 00D1     		bne	.L195
1079:.\sd/ff.c     **** 		clst = dj->fs->dirbase;
 2573              		.loc 1 1079 0 is_stmt 1
 2574 0020 596A     		ldr	r1, [r3, #36]
 2575              	.LVL333:
 2576              	.L195:
1081:.\sd/ff.c     **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 2577              		.loc 1 1081 0
 2578 0022 0029     		cmp	r1, #0
 2579 0024 08D1     		bne	.L196
1082:.\sd/ff.c     **** 		dj->clust = clst;
 2580              		.loc 1 1082 0
 2581 0026 E160     		str	r1, [r4, #12]
1083:.\sd/ff.c     **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 2582              		.loc 1 1083 0
 2583 0028 1A89     		ldrh	r2, [r3, #8]
 2584 002a AA42     		cmp	r2, r5
 2585 002c 2BD9     		bls	.L202
1085:.\sd/ff.c     **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 2586              		.loc 1 1085 0
 2587 002e 5A6A     		ldr	r2, [r3, #36]
 2588 0030 2B09     		lsr	r3, r5, #4
 2589 0032 D318     		add	r3, r2, r3
 2590 0034 2361     		str	r3, [r4, #16]
 2591 0036 19E0     		b	.L197
 2592              	.L196:
1088:.\sd/ff.c     **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 2593              		.loc 1 1088 0
 2594 0038 9E78     		ldrb	r6, [r3, #2]
 2595 003a 3601     		lsl	r6, r6, #4
 2596              	.LVL334:
1089:.\sd/ff.c     **** 		while (idx >= ic) {	/* Follow cluster chain */
 2597              		.loc 1 1089 0
 2598 003c 0DE0     		b	.L198
 2599              	.LVL335:
 2600              	.L199:
1090:.\sd/ff.c     **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 2601              		.loc 1 1090 0
 2602 003e 2068     		ldr	r0, [r4]
 2603 0040 FFF7FEFF 		bl	get_fat
 2604              	.LVL336:
 2605 0044 011C     		mov	r1, r0
 2606              	.LVL337:
1091:.\sd/ff.c     **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 89


 2607              		.loc 1 1091 0
 2608 0046 431C     		add	r3, r0, #1
 2609 0048 1FD0     		beq	.L203
1092:.\sd/ff.c     **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 2610              		.loc 1 1092 0
 2611 004a 0128     		cmp	r0, #1
 2612 004c 1FD9     		bls	.L204
1092:.\sd/ff.c     **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 2613              		.loc 1 1092 0 is_stmt 0 discriminator 1
 2614 004e 2368     		ldr	r3, [r4]
 2615 0050 9B69     		ldr	r3, [r3, #24]
 2616 0052 8342     		cmp	r3, r0
 2617 0054 1DD9     		bls	.L205
1094:.\sd/ff.c     **** 			idx -= ic;
 2618              		.loc 1 1094 0 is_stmt 1
 2619 0056 AD1B     		sub	r5, r5, r6
 2620              	.LVL338:
 2621 0058 ADB2     		uxth	r5, r5
 2622              	.LVL339:
 2623              	.L198:
1089:.\sd/ff.c     **** 		while (idx >= ic) {	/* Follow cluster chain */
 2624              		.loc 1 1089 0 discriminator 1
 2625 005a B542     		cmp	r5, r6
 2626 005c EFD2     		bcs	.L199
1096:.\sd/ff.c     **** 		dj->clust = clst;
 2627              		.loc 1 1096 0
 2628 005e E160     		str	r1, [r4, #12]
1097:.\sd/ff.c     **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 2629              		.loc 1 1097 0
 2630 0060 2068     		ldr	r0, [r4]
 2631 0062 FFF7FEFF 		bl	clust2sect
 2632              	.LVL340:
 2633 0066 2B09     		lsr	r3, r5, #4
 2634 0068 C018     		add	r0, r0, r3
 2635 006a 2061     		str	r0, [r4, #16]
 2636              	.LVL341:
 2637              	.L197:
1100:.\sd/ff.c     **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
 2638              		.loc 1 1100 0
 2639 006c 0F23     		mov	r3, #15
 2640 006e 1D40     		and	r5, r3
 2641              	.LVL342:
 2642 0070 6B01     		lsl	r3, r5, #5
 2643 0072 3033     		add	r3, r3, #48
 2644 0074 2268     		ldr	r2, [r4]
 2645 0076 D318     		add	r3, r2, r3
 2646 0078 6361     		str	r3, [r4, #20]
1102:.\sd/ff.c     **** 	return FR_OK;	/* Seek succeeded */
 2647              		.loc 1 1102 0
 2648 007a 0020     		mov	r0, #0
 2649 007c 0AE0     		b	.L194
 2650              	.LVL343:
 2651              	.L200:
1077:.\sd/ff.c     **** 		return FR_INT_ERR;
 2652              		.loc 1 1077 0
 2653 007e 0220     		mov	r0, #2
 2654              	.LVL344:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 90


 2655 0080 08E0     		b	.L194
 2656              	.LVL345:
 2657              	.L201:
 2658 0082 0220     		mov	r0, #2
 2659              	.LVL346:
 2660 0084 06E0     		b	.L194
 2661              	.LVL347:
 2662              	.L202:
1084:.\sd/ff.c     **** 			return FR_INT_ERR;
 2663              		.loc 1 1084 0
 2664 0086 0220     		mov	r0, #2
 2665              	.LVL348:
 2666 0088 04E0     		b	.L194
 2667              	.LVL349:
 2668              	.L203:
1091:.\sd/ff.c     **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2669              		.loc 1 1091 0
 2670 008a 0120     		mov	r0, #1
 2671              	.LVL350:
 2672 008c 02E0     		b	.L194
 2673              	.LVL351:
 2674              	.L204:
1093:.\sd/ff.c     **** 				return FR_INT_ERR;
 2675              		.loc 1 1093 0
 2676 008e 0220     		mov	r0, #2
 2677              	.LVL352:
 2678 0090 00E0     		b	.L194
 2679              	.LVL353:
 2680              	.L205:
 2681 0092 0220     		mov	r0, #2
 2682              	.LVL354:
 2683              	.L194:
1103:.\sd/ff.c     **** }
 2684              		.loc 1 1103 0
 2685              		@ sp needed
 2686              	.LVL355:
 2687 0094 70BD     		pop	{r4, r5, r6, pc}
 2688              		.cfi_endproc
 2689              	.LFE16:
 2690              		.size	dir_sdi, .-dir_sdi
 2691 0096 C046     		.section	.text.dir_remove,"ax",%progbits
 2692              		.align	2
 2693              		.code	16
 2694              		.thumb_func
 2695              		.type	dir_remove, %function
 2696              	dir_remove:
 2697              	.LFB21:
1581:.\sd/ff.c     **** {
 2698              		.loc 1 1581 0
 2699              		.cfi_startproc
 2700              	.LVL356:
 2701 0000 10B5     		push	{r4, lr}
 2702              		.cfi_def_cfa_offset 8
 2703              		.cfi_offset 4, -8
 2704              		.cfi_offset 14, -4
 2705 0002 041C     		mov	r4, r0
1601:.\sd/ff.c     **** 	res = dir_sdi(dj, dj->index);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 91


 2706              		.loc 1 1601 0
 2707 0004 C188     		ldrh	r1, [r0, #6]
 2708 0006 FFF7FEFF 		bl	dir_sdi
 2709              	.LVL357:
1602:.\sd/ff.c     **** 	if (res == FR_OK) {
 2710              		.loc 1 1602 0
 2711 000a 0028     		cmp	r0, #0
 2712 000c 0BD1     		bne	.L207
1603:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
 2713              		.loc 1 1603 0
 2714 000e 2068     		ldr	r0, [r4]
 2715              	.LVL358:
 2716 0010 2169     		ldr	r1, [r4, #16]
 2717 0012 FFF7FEFF 		bl	move_window
 2718              	.LVL359:
1604:.\sd/ff.c     **** 		if (res == FR_OK) {
 2719              		.loc 1 1604 0
 2720 0016 0028     		cmp	r0, #0
 2721 0018 05D1     		bne	.L207
1605:.\sd/ff.c     **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
 2722              		.loc 1 1605 0
 2723 001a E523     		mov	r3, #229
 2724 001c 6269     		ldr	r2, [r4, #20]
 2725 001e 1370     		strb	r3, [r2]
1606:.\sd/ff.c     **** 			dj->fs->wflag = 1;
 2726              		.loc 1 1606 0
 2727 0020 2368     		ldr	r3, [r4]
 2728 0022 0122     		mov	r2, #1
 2729 0024 1A71     		strb	r2, [r3, #4]
 2730              	.LVL360:
 2731              	.L207:
1612:.\sd/ff.c     **** }
 2732              		.loc 1 1612 0
 2733              		@ sp needed
 2734              	.LVL361:
 2735 0026 10BD     		pop	{r4, pc}
 2736              		.cfi_endproc
 2737              	.LFE21:
 2738              		.size	dir_remove, .-dir_remove
 2739              		.section	.text.put_fat,"ax",%progbits
 2740              		.align	2
 2741              		.global	put_fat
 2742              		.code	16
 2743              		.thumb_func
 2744              		.type	put_fat, %function
 2745              	put_fat:
 2746              	.LFB13:
 867:.\sd/ff.c     **** {
 2747              		.loc 1 867 0
 2748              		.cfi_startproc
 2749              	.LVL362:
 2750 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2751              		.cfi_def_cfa_offset 24
 2752              		.cfi_offset 3, -24
 2753              		.cfi_offset 4, -20
 2754              		.cfi_offset 5, -16
 2755              		.cfi_offset 6, -12
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 92


 2756              		.cfi_offset 7, -8
 2757              		.cfi_offset 14, -4
 2758 0002 051C     		mov	r5, r0
 2759 0004 0C1C     		mov	r4, r1
 2760 0006 161C     		mov	r6, r2
 873:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2761              		.loc 1 873 0
 2762 0008 0129     		cmp	r1, #1
 2763 000a 79D9     		bls	.L218
 873:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2764              		.loc 1 873 0 is_stmt 0 discriminator 1
 2765 000c 8369     		ldr	r3, [r0, #24]
 2766 000e 8B42     		cmp	r3, r1
 2767 0010 78D9     		bls	.L219
 877:.\sd/ff.c     **** 		switch (fs->fs_type) {
 2768              		.loc 1 877 0 is_stmt 1
 2769 0012 0378     		ldrb	r3, [r0]
 2770 0014 022B     		cmp	r3, #2
 2771 0016 3FD0     		beq	.L211
 2772 0018 032B     		cmp	r3, #3
 2773 001a 51D0     		beq	.L212
 2774 001c 012B     		cmp	r3, #1
 2775 001e 6BD1     		bne	.L221
 2776              	.LVL363:
 879:.\sd/ff.c     **** 			bc = clst; bc += bc / 2;
 2777              		.loc 1 879 0
 2778 0020 4F08     		lsr	r7, r1, #1
 2779 0022 CF19     		add	r7, r1, r7
 2780              	.LVL364:
 880:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2781              		.loc 1 880 0
 2782 0024 790A     		lsr	r1, r7, #9
 2783              	.LVL365:
 2784 0026 036A     		ldr	r3, [r0, #32]
 2785 0028 5918     		add	r1, r3, r1
 2786 002a FFF7FEFF 		bl	move_window
 2787              	.LVL366:
 881:.\sd/ff.c     **** 			if (res != FR_OK) break;
 2788              		.loc 1 881 0
 2789 002e 0028     		cmp	r0, #0
 2790 0030 63D1     		bne	.L210
 882:.\sd/ff.c     **** 			p = &fs->win[bc % SS(fs)];
 2791              		.loc 1 882 0
 2792 0032 FB05     		lsl	r3, r7, #23
 2793 0034 DB0D     		lsr	r3, r3, #23
 2794              	.LVL367:
 883:.\sd/ff.c     **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2795              		.loc 1 883 0
 2796 0036 0122     		mov	r2, #1
 2797 0038 1440     		and	r4, r2
 2798              	.LVL368:
 2799 003a 0AD0     		beq	.L214
 883:.\sd/ff.c     **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2800              		.loc 1 883 0 is_stmt 0 discriminator 1
 2801 003c EA18     		add	r2, r5, r3
 2802 003e 3032     		add	r2, r2, #48
 2803              	.LVL369:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 93


 2804 0040 1078     		ldrb	r0, [r2]
 2805              	.LVL370:
 2806 0042 FF21     		mov	r1, #255
 2807 0044 3140     		and	r1, r6
 2808 0046 0901     		lsl	r1, r1, #4
 2809 0048 0F22     		mov	r2, #15
 2810              	.LVL371:
 2811 004a 0240     		and	r2, r0
 2812 004c 0A43     		orr	r2, r1
 2813 004e D2B2     		uxtb	r2, r2
 2814 0050 00E0     		b	.L215
 2815              	.LVL372:
 2816              	.L214:
 883:.\sd/ff.c     **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2817              		.loc 1 883 0 discriminator 2
 2818 0052 F2B2     		uxtb	r2, r6
 2819              	.LVL373:
 2820              	.L215:
 883:.\sd/ff.c     **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2821              		.loc 1 883 0 discriminator 3
 2822 0054 EB18     		add	r3, r5, r3
 2823              	.LVL374:
 2824 0056 3033     		add	r3, r3, #48
 2825 0058 1A70     		strb	r2, [r3]
 884:.\sd/ff.c     **** 			bc++;
 2826              		.loc 1 884 0 is_stmt 1 discriminator 3
 2827 005a 0137     		add	r7, r7, #1
 2828              	.LVL375:
 885:.\sd/ff.c     **** 			fs->wflag = 1;
 2829              		.loc 1 885 0 discriminator 3
 2830 005c 0123     		mov	r3, #1
 2831 005e 2B71     		strb	r3, [r5, #4]
 886:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2832              		.loc 1 886 0 discriminator 3
 2833 0060 790A     		lsr	r1, r7, #9
 2834 0062 2B6A     		ldr	r3, [r5, #32]
 2835 0064 5918     		add	r1, r3, r1
 2836 0066 281C     		mov	r0, r5
 2837 0068 FFF7FEFF 		bl	move_window
 2838              	.LVL376:
 887:.\sd/ff.c     **** 			if (res != FR_OK) break;
 2839              		.loc 1 887 0 discriminator 3
 2840 006c 0028     		cmp	r0, #0
 2841 006e 44D1     		bne	.L210
 888:.\sd/ff.c     **** 			p = &fs->win[bc % SS(fs)];
 2842              		.loc 1 888 0
 2843 0070 FF05     		lsl	r7, r7, #23
 2844              	.LVL377:
 2845 0072 FF0D     		lsr	r7, r7, #23
 2846              	.LVL378:
 889:.\sd/ff.c     **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2847              		.loc 1 889 0
 2848 0074 002C     		cmp	r4, #0
 2849 0076 02D0     		beq	.L216
 889:.\sd/ff.c     **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2850              		.loc 1 889 0 is_stmt 0 discriminator 1
 2851 0078 3609     		lsr	r6, r6, #4
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 94


 2852              	.LVL379:
 2853 007a F6B2     		uxtb	r6, r6
 2854 007c 08E0     		b	.L217
 2855              	.LVL380:
 2856              	.L216:
 889:.\sd/ff.c     **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2857              		.loc 1 889 0 discriminator 2
 2858 007e EB19     		add	r3, r5, r7
 2859 0080 3033     		add	r3, r3, #48
 2860 0082 1A78     		ldrb	r2, [r3]
 2861 0084 0F23     		mov	r3, #15
 2862 0086 9A43     		bic	r2, r3
 2863 0088 3605     		lsl	r6, r6, #20
 2864              	.LVL381:
 2865 008a 330F     		lsr	r3, r6, #28
 2866 008c 161C     		mov	r6, r2
 2867 008e 1E43     		orr	r6, r3
 2868              	.L217:
 889:.\sd/ff.c     **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2869              		.loc 1 889 0 discriminator 3
 2870 0090 EF19     		add	r7, r5, r7
 2871              	.LVL382:
 2872 0092 3037     		add	r7, r7, #48
 2873 0094 3E70     		strb	r6, [r7]
 890:.\sd/ff.c     **** 			break;
 2874              		.loc 1 890 0 is_stmt 1 discriminator 3
 2875 0096 30E0     		b	.L210
 2876              	.LVL383:
 2877              	.L211:
 893:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2878              		.loc 1 893 0
 2879 0098 090A     		lsr	r1, r1, #8
 2880              	.LVL384:
 2881 009a 036A     		ldr	r3, [r0, #32]
 2882 009c 5918     		add	r1, r3, r1
 2883 009e FFF7FEFF 		bl	move_window
 2884              	.LVL385:
 894:.\sd/ff.c     **** 			if (res != FR_OK) break;
 2885              		.loc 1 894 0
 2886 00a2 0028     		cmp	r0, #0
 2887 00a4 29D1     		bne	.L210
 895:.\sd/ff.c     **** 			p = &fs->win[clst * 2 % SS(fs)];
 2888              		.loc 1 895 0
 2889 00a6 6400     		lsl	r4, r4, #1
 2890              	.LVL386:
 2891 00a8 FF23     		mov	r3, #255
 2892 00aa 5B00     		lsl	r3, r3, #1
 2893 00ac 1C40     		and	r4, r3
 2894 00ae 231C     		mov	r3, r4
 2895 00b0 3033     		add	r3, r3, #48
 2896 00b2 EB18     		add	r3, r5, r3
 2897              	.LVL387:
 896:.\sd/ff.c     **** 			ST_WORD(p, (WORD)val);
 2898              		.loc 1 896 0
 2899 00b4 2C19     		add	r4, r5, r4
 2900 00b6 3034     		add	r4, r4, #48
 2901 00b8 2670     		strb	r6, [r4]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 95


 2902 00ba 360A     		lsr	r6, r6, #8
 2903              	.LVL388:
 2904 00bc 5E70     		strb	r6, [r3, #1]
 897:.\sd/ff.c     **** 			break;
 2905              		.loc 1 897 0
 2906 00be 1CE0     		b	.L210
 2907              	.LVL389:
 2908              	.L212:
 900:.\sd/ff.c     **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2909              		.loc 1 900 0
 2910 00c0 C909     		lsr	r1, r1, #7
 2911              	.LVL390:
 2912 00c2 036A     		ldr	r3, [r0, #32]
 2913 00c4 5918     		add	r1, r3, r1
 2914 00c6 FFF7FEFF 		bl	move_window
 2915              	.LVL391:
 901:.\sd/ff.c     **** 			if (res != FR_OK) break;
 2916              		.loc 1 901 0
 2917 00ca 0028     		cmp	r0, #0
 2918 00cc 15D1     		bne	.L210
 902:.\sd/ff.c     **** 			p = &fs->win[clst * 4 % SS(fs)];
 2919              		.loc 1 902 0
 2920 00ce A400     		lsl	r4, r4, #2
 2921              	.LVL392:
 2922 00d0 FE23     		mov	r3, #254
 2923 00d2 5B00     		lsl	r3, r3, #1
 2924 00d4 1C40     		and	r4, r3
 2925 00d6 231C     		mov	r3, r4
 2926 00d8 3033     		add	r3, r3, #48
 2927 00da EB18     		add	r3, r5, r3
 2928              	.LVL393:
 903:.\sd/ff.c     **** 			val |= LD_DWORD(p) & 0xF0000000;
 2929              		.loc 1 903 0
 2930 00dc DA78     		ldrb	r2, [r3, #3]
 2931 00de 2C19     		add	r4, r5, r4
 2932 00e0 3034     		add	r4, r4, #48
 2933 00e2 1209     		lsr	r2, r2, #4
 2934 00e4 1207     		lsl	r2, r2, #28
 2935 00e6 1643     		orr	r6, r2
 2936              	.LVL394:
 904:.\sd/ff.c     **** 			ST_DWORD(p, val);
 2937              		.loc 1 904 0
 2938 00e8 2670     		strb	r6, [r4]
 2939 00ea 320A     		lsr	r2, r6, #8
 2940 00ec 5A70     		strb	r2, [r3, #1]
 2941 00ee 320C     		lsr	r2, r6, #16
 2942 00f0 9A70     		strb	r2, [r3, #2]
 2943 00f2 360E     		lsr	r6, r6, #24
 2944              	.LVL395:
 2945 00f4 DE70     		strb	r6, [r3, #3]
 2946              	.LVL396:
 905:.\sd/ff.c     **** 			break;
 2947              		.loc 1 905 0
 2948 00f6 00E0     		b	.L210
 2949              	.LVL397:
 2950              	.L221:
 908:.\sd/ff.c     **** 			res = FR_INT_ERR;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 96


 2951              		.loc 1 908 0
 2952 00f8 0220     		mov	r0, #2
 2953              	.LVL398:
 2954              	.L210:
 910:.\sd/ff.c     **** 		fs->wflag = 1;
 2955              		.loc 1 910 0
 2956 00fa 0123     		mov	r3, #1
 2957 00fc 2B71     		strb	r3, [r5, #4]
 2958 00fe 02E0     		b	.L209
 2959              	.LVL399:
 2960              	.L218:
 874:.\sd/ff.c     **** 		res = FR_INT_ERR;
 2961              		.loc 1 874 0
 2962 0100 0220     		mov	r0, #2
 2963              	.LVL400:
 2964 0102 00E0     		b	.L209
 2965              	.LVL401:
 2966              	.L219:
 2967 0104 0220     		mov	r0, #2
 2968              	.LVL402:
 2969              	.L209:
 914:.\sd/ff.c     **** }
 2970              		.loc 1 914 0
 2971              		@ sp needed
 2972              	.LVL403:
 2973 0106 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2974              		.cfi_endproc
 2975              	.LFE13:
 2976              		.size	put_fat, .-put_fat
 2977              		.section	.text.create_chain,"ax",%progbits
 2978              		.align	2
 2979              		.code	16
 2980              		.thumb_func
 2981              		.type	create_chain, %function
 2982              	create_chain:
 2983              	.LFB15:
 982:.\sd/ff.c     **** {
 2984              		.loc 1 982 0
 2985              		.cfi_startproc
 2986              	.LVL404:
 2987 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2988              		.cfi_def_cfa_offset 20
 2989              		.cfi_offset 4, -20
 2990              		.cfi_offset 5, -16
 2991              		.cfi_offset 6, -12
 2992              		.cfi_offset 7, -8
 2993              		.cfi_offset 14, -4
 2994 0002 4746     		mov	r7, r8
 2995 0004 80B4     		push	{r7}
 2996              		.cfi_def_cfa_offset 24
 2997              		.cfi_offset 8, -24
 2998 0006 051C     		mov	r5, r0
 2999 0008 8846     		mov	r8, r1
 987:.\sd/ff.c     **** 	if (clst == 0) {		/* Create a new chain */
 3000              		.loc 1 987 0
 3001 000a 0029     		cmp	r1, #0
 3002 000c 06D1     		bne	.L223
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 97


 988:.\sd/ff.c     **** 		scl = fs->last_clust;			/* Get suggested start point */
 3003              		.loc 1 988 0
 3004 000e C668     		ldr	r6, [r0, #12]
 3005              	.LVL405:
 989:.\sd/ff.c     **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 3006              		.loc 1 989 0
 3007 0010 002E     		cmp	r6, #0
 3008 0012 0DD0     		beq	.L233
 989:.\sd/ff.c     **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 3009              		.loc 1 989 0 is_stmt 0 discriminator 2
 3010 0014 8269     		ldr	r2, [r0, #24]
 3011 0016 B242     		cmp	r2, r6
 3012 0018 0CD9     		bls	.L234
 3013 001a 0CE0     		b	.L224
 3014              	.LVL406:
 3015              	.L223:
 992:.\sd/ff.c     **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 3016              		.loc 1 992 0 is_stmt 1
 3017 001c 4146     		mov	r1, r8
 3018              	.LVL407:
 3019 001e FFF7FEFF 		bl	get_fat
 3020              	.LVL408:
 993:.\sd/ff.c     **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 3021              		.loc 1 993 0
 3022 0022 0128     		cmp	r0, #1
 3023 0024 3FD9     		bls	.L235
 994:.\sd/ff.c     **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 3024              		.loc 1 994 0
 3025 0026 AB69     		ldr	r3, [r5, #24]
 3026 0028 8342     		cmp	r3, r0
 3027 002a 41D8     		bhi	.L225
 995:.\sd/ff.c     **** 		scl = clst;
 3028              		.loc 1 995 0
 3029 002c 4646     		mov	r6, r8
 3030 002e 02E0     		b	.L224
 3031              	.LVL409:
 3032              	.L233:
 989:.\sd/ff.c     **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 3033              		.loc 1 989 0
 3034 0030 0126     		mov	r6, #1
 3035              	.LVL410:
 3036 0032 00E0     		b	.L224
 3037              	.LVL411:
 3038              	.L234:
 3039 0034 0126     		mov	r6, #1
 3040              	.LVL412:
 3041              	.L224:
 998:.\sd/ff.c     **** 	ncl = scl;				/* Start cluster */
 3042              		.loc 1 998 0
 3043 0036 341C     		mov	r4, r6
1002:.\sd/ff.c     **** 			ncl = 2;
 3044              		.loc 1 1002 0
 3045 0038 0227     		mov	r7, #2
 3046              	.LVL413:
 3047              	.L228:
1000:.\sd/ff.c     **** 		ncl++;							/* Next cluster */
 3048              		.loc 1 1000 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 98


 3049 003a 0134     		add	r4, r4, #1
 3050              	.LVL414:
1001:.\sd/ff.c     **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 3051              		.loc 1 1001 0
 3052 003c AA69     		ldr	r2, [r5, #24]
 3053 003e A242     		cmp	r2, r4
 3054 0040 02D8     		bhi	.L226
 3055              	.LVL415:
1003:.\sd/ff.c     **** 			if (ncl > scl) return 0;	/* No free cluster */
 3056              		.loc 1 1003 0
 3057 0042 012E     		cmp	r6, #1
 3058 0044 31D9     		bls	.L237
1002:.\sd/ff.c     **** 			ncl = 2;
 3059              		.loc 1 1002 0
 3060 0046 3C1C     		mov	r4, r7
 3061              	.LVL416:
 3062              	.L226:
1005:.\sd/ff.c     **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 3063              		.loc 1 1005 0
 3064 0048 281C     		mov	r0, r5
 3065 004a 211C     		mov	r1, r4
 3066 004c FFF7FEFF 		bl	get_fat
 3067              	.LVL417:
1006:.\sd/ff.c     **** 		if (cs == 0) break;				/* Found a free cluster */
 3068              		.loc 1 1006 0
 3069 0050 0028     		cmp	r0, #0
 3070 0052 06D0     		beq	.L227
1007:.\sd/ff.c     **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 3071              		.loc 1 1007 0
 3072 0054 431C     		add	r3, r0, #1
 3073 0056 2BD0     		beq	.L225
1007:.\sd/ff.c     **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 3074              		.loc 1 1007 0 is_stmt 0 discriminator 1
 3075 0058 0128     		cmp	r0, #1
 3076 005a 29D0     		beq	.L225
1009:.\sd/ff.c     **** 		if (ncl == scl) return 0;		/* No free cluster */
 3077              		.loc 1 1009 0 is_stmt 1
 3078 005c B442     		cmp	r4, r6
 3079 005e ECD1     		bne	.L228
 3080 0060 25E0     		b	.L240
 3081              	.L227:
1012:.\sd/ff.c     **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 3082              		.loc 1 1012 0
 3083 0062 281C     		mov	r0, r5
 3084              	.LVL418:
 3085 0064 211C     		mov	r1, r4
 3086 0066 144A     		ldr	r2, .L242
 3087 0068 FFF7FEFF 		bl	put_fat
 3088              	.LVL419:
1013:.\sd/ff.c     **** 	if (res == FR_OK && clst != 0) {
 3089              		.loc 1 1013 0
 3090 006c 0028     		cmp	r0, #0
 3091 006e 07D1     		bne	.L229
1013:.\sd/ff.c     **** 	if (res == FR_OK && clst != 0) {
 3092              		.loc 1 1013 0 is_stmt 0 discriminator 1
 3093 0070 4246     		mov	r2, r8
 3094 0072 002A     		cmp	r2, #0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 99


 3095 0074 04D0     		beq	.L229
 3096              	.LVL420:
1014:.\sd/ff.c     **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 3097              		.loc 1 1014 0 is_stmt 1
 3098 0076 281C     		mov	r0, r5
 3099              	.LVL421:
 3100 0078 4146     		mov	r1, r8
 3101 007a 221C     		mov	r2, r4
 3102              	.LVL422:
 3103 007c FFF7FEFF 		bl	put_fat
 3104              	.LVL423:
 3105              	.L229:
1016:.\sd/ff.c     **** 	if (res == FR_OK) {
 3106              		.loc 1 1016 0
 3107 0080 0028     		cmp	r0, #0
 3108 0082 08D1     		bne	.L230
1017:.\sd/ff.c     **** 		fs->last_clust = ncl;			/* Update FSINFO */
 3109              		.loc 1 1017 0
 3110 0084 EC60     		str	r4, [r5, #12]
1018:.\sd/ff.c     **** 		if (fs->free_clust != 0xFFFFFFFF) {
 3111              		.loc 1 1018 0
 3112 0086 2B69     		ldr	r3, [r5, #16]
 3113 0088 5A1C     		add	r2, r3, #1
 3114 008a 0AD0     		beq	.L231
1019:.\sd/ff.c     **** 			fs->free_clust--;
 3115              		.loc 1 1019 0
 3116 008c 013B     		sub	r3, r3, #1
 3117 008e 2B61     		str	r3, [r5, #16]
1020:.\sd/ff.c     **** 			fs->fsi_flag = 1;
 3118              		.loc 1 1020 0
 3119 0090 0123     		mov	r3, #1
 3120 0092 6B71     		strb	r3, [r5, #5]
 3121 0094 05E0     		b	.L231
 3122              	.L230:
1023:.\sd/ff.c     **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 3123              		.loc 1 1023 0
 3124 0096 0128     		cmp	r0, #1
 3125 0098 02D1     		bne	.L241
 3126 009a 0124     		mov	r4, #1
 3127              	.LVL424:
 3128 009c 6442     		neg	r4, r4
 3129 009e 00E0     		b	.L231
 3130              	.LVL425:
 3131              	.L241:
 3132 00a0 0124     		mov	r4, #1
 3133              	.LVL426:
 3134              	.L231:
1026:.\sd/ff.c     **** 	return ncl;		/* Return new cluster number or error code */
 3135              		.loc 1 1026 0
 3136 00a2 201C     		mov	r0, r4
 3137              	.LVL427:
 3138 00a4 04E0     		b	.L225
 3139              	.LVL428:
 3140              	.L235:
 993:.\sd/ff.c     **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 3141              		.loc 1 993 0
 3142 00a6 0120     		mov	r0, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 100


 3143              	.LVL429:
 3144 00a8 02E0     		b	.L225
 3145              	.LVL430:
 3146              	.L237:
1003:.\sd/ff.c     **** 			if (ncl > scl) return 0;	/* No free cluster */
 3147              		.loc 1 1003 0
 3148 00aa 0020     		mov	r0, #0
 3149 00ac 00E0     		b	.L225
 3150              	.LVL431:
 3151              	.L240:
1009:.\sd/ff.c     **** 		if (ncl == scl) return 0;		/* No free cluster */
 3152              		.loc 1 1009 0
 3153 00ae 0020     		mov	r0, #0
 3154              	.LVL432:
 3155              	.L225:
1027:.\sd/ff.c     **** }
 3156              		.loc 1 1027 0
 3157              		@ sp needed
 3158              	.LVL433:
 3159              	.LVL434:
 3160 00b0 04BC     		pop	{r2}
 3161 00b2 9046     		mov	r8, r2
 3162 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 3163              	.L243:
 3164 00b6 C046     		.align	2
 3165              	.L242:
 3166 00b8 FFFFFF0F 		.word	268435455
 3167              		.cfi_endproc
 3168              	.LFE15:
 3169              		.size	create_chain, .-create_chain
 3170              		.section	.text.dir_next,"ax",%progbits
 3171              		.align	2
 3172              		.code	16
 3173              		.thumb_func
 3174              		.type	dir_next, %function
 3175              	dir_next:
 3176              	.LFB17:
1117:.\sd/ff.c     **** {
 3177              		.loc 1 1117 0
 3178              		.cfi_startproc
 3179              	.LVL435:
 3180 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3181              		.cfi_def_cfa_offset 20
 3182              		.cfi_offset 4, -20
 3183              		.cfi_offset 5, -16
 3184              		.cfi_offset 6, -12
 3185              		.cfi_offset 7, -8
 3186              		.cfi_offset 14, -4
 3187 0002 5746     		mov	r7, r10
 3188 0004 4E46     		mov	r6, r9
 3189 0006 4546     		mov	r5, r8
 3190 0008 E0B4     		push	{r5, r6, r7}
 3191              		.cfi_def_cfa_offset 32
 3192              		.cfi_offset 8, -32
 3193              		.cfi_offset 9, -28
 3194              		.cfi_offset 10, -24
 3195 000a 041C     		mov	r4, r0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 101


 3196 000c 0E1C     		mov	r6, r1
1123:.\sd/ff.c     **** 	i = dj->index + 1;
 3197              		.loc 1 1123 0
 3198 000e C588     		ldrh	r5, [r0, #6]
 3199 0010 0135     		add	r5, r5, #1
 3200 0012 ADB2     		uxth	r5, r5
 3201              	.LVL436:
1124:.\sd/ff.c     **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 3202              		.loc 1 1124 0
 3203 0014 002D     		cmp	r5, #0
 3204 0016 6AD0     		beq	.L251
1124:.\sd/ff.c     **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 3205              		.loc 1 1124 0 is_stmt 0 discriminator 1
 3206 0018 0369     		ldr	r3, [r0, #16]
 3207 001a 002B     		cmp	r3, #0
 3208 001c 69D0     		beq	.L252
1127:.\sd/ff.c     **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 3209              		.loc 1 1127 0 is_stmt 1
 3210 001e 0F27     		mov	r7, #15
 3211 0020 2F40     		and	r7, r5
 3212 0022 5CD1     		bne	.L246
1128:.\sd/ff.c     **** 		dj->sect++;					/* Next sector */
 3213              		.loc 1 1128 0
 3214 0024 0133     		add	r3, r3, #1
 3215 0026 0361     		str	r3, [r0, #16]
1130:.\sd/ff.c     **** 		if (dj->clust == 0) {	/* Static table */
 3216              		.loc 1 1130 0
 3217 0028 C168     		ldr	r1, [r0, #12]
 3218              	.LVL437:
 3219 002a 0029     		cmp	r1, #0
 3220 002c 04D1     		bne	.L247
1131:.\sd/ff.c     **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 3221              		.loc 1 1131 0
 3222 002e 0268     		ldr	r2, [r0]
 3223 0030 1389     		ldrh	r3, [r2, #8]
 3224 0032 AB42     		cmp	r3, r5
 3225 0034 5FD9     		bls	.L253
 3226 0036 52E0     		b	.L246
 3227              	.L247:
1135:.\sd/ff.c     **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 3228              		.loc 1 1135 0
 3229 0038 2B09     		lsr	r3, r5, #4
 3230 003a 0068     		ldr	r0, [r0]
 3231              	.LVL438:
 3232 003c 8278     		ldrb	r2, [r0, #2]
 3233 003e 013A     		sub	r2, r2, #1
 3234 0040 1A42     		tst	r2, r3
 3235 0042 4CD1     		bne	.L246
1136:.\sd/ff.c     **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 3236              		.loc 1 1136 0
 3237 0044 FFF7FEFF 		bl	get_fat
 3238              	.LVL439:
 3239 0048 8046     		mov	r8, r0
 3240              	.LVL440:
1137:.\sd/ff.c     **** 				if (clst <= 1) return FR_INT_ERR;
 3241              		.loc 1 1137 0
 3242 004a 0128     		cmp	r0, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 102


 3243 004c 55D9     		bls	.L254
1138:.\sd/ff.c     **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3244              		.loc 1 1138 0
 3245 004e 4346     		mov	r3, r8
 3246 0050 0133     		add	r3, r3, #1
 3247 0052 54D0     		beq	.L255
1139:.\sd/ff.c     **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 3248              		.loc 1 1139 0
 3249 0054 2068     		ldr	r0, [r4]
 3250              	.LVL441:
 3251 0056 8269     		ldr	r2, [r0, #24]
 3252 0058 4245     		cmp	r2, r8
 3253 005a 39D8     		bhi	.L248
 3254              	.LBB3:
1142:.\sd/ff.c     **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 3255              		.loc 1 1142 0
 3256 005c 002E     		cmp	r6, #0
 3257 005e 50D0     		beq	.L256
1143:.\sd/ff.c     **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 3258              		.loc 1 1143 0
 3259 0060 E168     		ldr	r1, [r4, #12]
 3260 0062 FFF7FEFF 		bl	create_chain
 3261              	.LVL442:
 3262 0066 8046     		mov	r8, r0
 3263              	.LVL443:
1144:.\sd/ff.c     **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3264              		.loc 1 1144 0
 3265 0068 0028     		cmp	r0, #0
 3266 006a 4CD0     		beq	.L257
1145:.\sd/ff.c     **** 					if (clst == 1) return FR_INT_ERR;
 3267              		.loc 1 1145 0
 3268 006c 0128     		cmp	r0, #1
 3269 006e 4CD0     		beq	.L258
1146:.\sd/ff.c     **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3270              		.loc 1 1146 0
 3271 0070 4346     		mov	r3, r8
 3272 0072 0133     		add	r3, r3, #1
 3273 0074 4BD0     		beq	.L259
1148:.\sd/ff.c     **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 3274              		.loc 1 1148 0
 3275 0076 2068     		ldr	r0, [r4]
 3276              	.LVL444:
 3277 0078 0021     		mov	r1, #0
 3278 007a FFF7FEFF 		bl	move_window
 3279              	.LVL445:
 3280 007e 0028     		cmp	r0, #0
 3281 0080 47D1     		bne	.L260
1149:.\sd/ff.c     **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 3282              		.loc 1 1149 0
 3283 0082 2068     		ldr	r0, [r4]
 3284 0084 3030     		add	r0, r0, #48
 3285 0086 0021     		mov	r1, #0
 3286 0088 8022     		mov	r2, #128
 3287 008a 9200     		lsl	r2, r2, #2
 3288 008c FFF7FEFF 		bl	mem_set
 3289              	.LVL446:
1150:.\sd/ff.c     **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 103


 3290              		.loc 1 1150 0
 3291 0090 2668     		ldr	r6, [r4]
 3292              	.LVL447:
 3293 0092 301C     		mov	r0, r6
 3294 0094 4146     		mov	r1, r8
 3295 0096 FFF7FEFF 		bl	clust2sect
 3296              	.LVL448:
 3297 009a F062     		str	r0, [r6, #44]
 3298              	.LVL449:
1151:.\sd/ff.c     **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3299              		.loc 1 1151 0
 3300 009c 0026     		mov	r6, #0
1152:.\sd/ff.c     **** 						dj->fs->wflag = 1;
 3301              		.loc 1 1152 0
 3302 009e 0122     		mov	r2, #1
 3303 00a0 9246     		mov	r10, r2
1153:.\sd/ff.c     **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 3304              		.loc 1 1153 0
 3305 00a2 B146     		mov	r9, r6
1151:.\sd/ff.c     **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3306              		.loc 1 1151 0
 3307 00a4 0DE0     		b	.L249
 3308              	.LVL450:
 3309              	.L250:
1152:.\sd/ff.c     **** 						dj->fs->wflag = 1;
 3310              		.loc 1 1152 0
 3311 00a6 5246     		mov	r2, r10
 3312 00a8 1A71     		strb	r2, [r3, #4]
1153:.\sd/ff.c     **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 3313              		.loc 1 1153 0
 3314 00aa 2068     		ldr	r0, [r4]
 3315 00ac 4946     		mov	r1, r9
 3316 00ae FFF7FEFF 		bl	move_window
 3317              	.LVL451:
 3318 00b2 0028     		cmp	r0, #0
 3319 00b4 2FD1     		bne	.L261
1154:.\sd/ff.c     **** 						dj->fs->winsect++;
 3320              		.loc 1 1154 0
 3321 00b6 2368     		ldr	r3, [r4]
 3322 00b8 DA6A     		ldr	r2, [r3, #44]
 3323 00ba 0132     		add	r2, r2, #1
 3324 00bc DA62     		str	r2, [r3, #44]
1151:.\sd/ff.c     **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3325              		.loc 1 1151 0
 3326 00be 0136     		add	r6, r6, #1
 3327              	.LVL452:
 3328 00c0 F6B2     		uxtb	r6, r6
 3329              	.LVL453:
 3330              	.L249:
1151:.\sd/ff.c     **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3331              		.loc 1 1151 0 is_stmt 0 discriminator 1
 3332 00c2 2368     		ldr	r3, [r4]
 3333 00c4 9A78     		ldrb	r2, [r3, #2]
 3334 00c6 B242     		cmp	r2, r6
 3335 00c8 EDD8     		bhi	.L250
1156:.\sd/ff.c     **** 					dj->fs->winsect -= c;						/* Rewind window address */
 3336              		.loc 1 1156 0 is_stmt 1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 104


 3337 00ca DA6A     		ldr	r2, [r3, #44]
 3338 00cc 961B     		sub	r6, r2, r6
 3339              	.LVL454:
 3340 00ce DE62     		str	r6, [r3, #44]
 3341              	.L248:
 3342              	.LBE3:
1161:.\sd/ff.c     **** 				dj->clust = clst;				/* Initialize data for new cluster */
 3343              		.loc 1 1161 0
 3344 00d0 4346     		mov	r3, r8
 3345 00d2 E360     		str	r3, [r4, #12]
1162:.\sd/ff.c     **** 				dj->sect = clust2sect(dj->fs, clst);
 3346              		.loc 1 1162 0
 3347 00d4 2068     		ldr	r0, [r4]
 3348 00d6 4146     		mov	r1, r8
 3349 00d8 FFF7FEFF 		bl	clust2sect
 3350              	.LVL455:
 3351 00dc 2061     		str	r0, [r4, #16]
 3352              	.LVL456:
 3353              	.L246:
1167:.\sd/ff.c     **** 	dj->index = i;
 3354              		.loc 1 1167 0
 3355 00de E580     		strh	r5, [r4, #6]
1168:.\sd/ff.c     **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 3356              		.loc 1 1168 0
 3357 00e0 7F01     		lsl	r7, r7, #5
 3358 00e2 3037     		add	r7, r7, #48
 3359 00e4 2268     		ldr	r2, [r4]
 3360 00e6 D719     		add	r7, r2, r7
 3361 00e8 6761     		str	r7, [r4, #20]
1170:.\sd/ff.c     **** 	return FR_OK;
 3362              		.loc 1 1170 0
 3363 00ea 0020     		mov	r0, #0
 3364 00ec 14E0     		b	.L245
 3365              	.LVL457:
 3366              	.L251:
1125:.\sd/ff.c     **** 		return FR_NO_FILE;
 3367              		.loc 1 1125 0
 3368 00ee 0420     		mov	r0, #4
 3369              	.LVL458:
 3370 00f0 12E0     		b	.L245
 3371              	.LVL459:
 3372              	.L252:
 3373 00f2 0420     		mov	r0, #4
 3374              	.LVL460:
 3375 00f4 10E0     		b	.L245
 3376              	.LVL461:
 3377              	.L253:
1132:.\sd/ff.c     **** 				return FR_NO_FILE;
 3378              		.loc 1 1132 0
 3379 00f6 0420     		mov	r0, #4
 3380              	.LVL462:
 3381 00f8 0EE0     		b	.L245
 3382              	.LVL463:
 3383              	.L254:
1137:.\sd/ff.c     **** 				if (clst <= 1) return FR_INT_ERR;
 3384              		.loc 1 1137 0
 3385 00fa 0220     		mov	r0, #2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 105


 3386              	.LVL464:
 3387 00fc 0CE0     		b	.L245
 3388              	.LVL465:
 3389              	.L255:
1138:.\sd/ff.c     **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3390              		.loc 1 1138 0
 3391 00fe 0120     		mov	r0, #1
 3392              	.LVL466:
 3393 0100 0AE0     		b	.L245
 3394              	.L256:
 3395              	.LBB4:
1142:.\sd/ff.c     **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 3396              		.loc 1 1142 0
 3397 0102 0420     		mov	r0, #4
 3398 0104 08E0     		b	.L245
 3399              	.LVL467:
 3400              	.L257:
1144:.\sd/ff.c     **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3401              		.loc 1 1144 0
 3402 0106 0720     		mov	r0, #7
 3403              	.LVL468:
 3404 0108 06E0     		b	.L245
 3405              	.LVL469:
 3406              	.L258:
1145:.\sd/ff.c     **** 					if (clst == 1) return FR_INT_ERR;
 3407              		.loc 1 1145 0
 3408 010a 0220     		mov	r0, #2
 3409              	.LVL470:
 3410 010c 04E0     		b	.L245
 3411              	.LVL471:
 3412              	.L259:
1146:.\sd/ff.c     **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3413              		.loc 1 1146 0
 3414 010e 0120     		mov	r0, #1
 3415              	.LVL472:
 3416 0110 02E0     		b	.L245
 3417              	.L260:
1148:.\sd/ff.c     **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 3418              		.loc 1 1148 0
 3419 0112 0120     		mov	r0, #1
 3420 0114 00E0     		b	.L245
 3421              	.LVL473:
 3422              	.L261:
1153:.\sd/ff.c     **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 3423              		.loc 1 1153 0
 3424 0116 0120     		mov	r0, #1
 3425              	.LVL474:
 3426              	.L245:
 3427              	.LBE4:
1171:.\sd/ff.c     **** }
 3428              		.loc 1 1171 0
 3429              		@ sp needed
 3430              	.LVL475:
 3431              	.LVL476:
 3432 0118 1CBC     		pop	{r2, r3, r4}
 3433 011a 9046     		mov	r8, r2
 3434 011c 9946     		mov	r9, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 106


 3435 011e A246     		mov	r10, r4
 3436 0120 F0BD     		pop	{r4, r5, r6, r7, pc}
 3437              		.cfi_endproc
 3438              	.LFE17:
 3439              		.size	dir_next, .-dir_next
 3440 0122 C046     		.section	.text.dir_find,"ax",%progbits
 3441              		.align	2
 3442              		.code	16
 3443              		.thumb_func
 3444              		.type	dir_find, %function
 3445              	dir_find:
 3446              	.LFB18:
1356:.\sd/ff.c     **** {
 3447              		.loc 1 1356 0
 3448              		.cfi_startproc
 3449              	.LVL477:
 3450 0000 70B5     		push	{r4, r5, r6, lr}
 3451              		.cfi_def_cfa_offset 16
 3452              		.cfi_offset 4, -16
 3453              		.cfi_offset 5, -12
 3454              		.cfi_offset 6, -8
 3455              		.cfi_offset 14, -4
 3456 0002 041C     		mov	r4, r0
1363:.\sd/ff.c     **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
 3457              		.loc 1 1363 0
 3458 0004 0021     		mov	r1, #0
 3459 0006 FFF7FEFF 		bl	dir_sdi
 3460              	.LVL478:
1364:.\sd/ff.c     **** 	if (res != FR_OK) return res;
 3461              		.loc 1 1364 0
 3462 000a 0028     		cmp	r0, #0
 3463 000c 1CD1     		bne	.L263
1397:.\sd/ff.c     **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 3464              		.loc 1 1397 0
 3465 000e 0826     		mov	r6, #8
 3466              	.LVL479:
 3467              	.L269:
1370:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
 3468              		.loc 1 1370 0
 3469 0010 2068     		ldr	r0, [r4]
 3470 0012 2169     		ldr	r1, [r4, #16]
 3471 0014 FFF7FEFF 		bl	move_window
 3472              	.LVL480:
 3473 0018 051E     		sub	r5, r0, #0
 3474              	.LVL481:
1371:.\sd/ff.c     **** 		if (res != FR_OK) break;
 3475              		.loc 1 1371 0
 3476 001a 14D1     		bne	.L264
1372:.\sd/ff.c     **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3477              		.loc 1 1372 0
 3478 001c 6069     		ldr	r0, [r4, #20]
 3479              	.LVL482:
1373:.\sd/ff.c     **** 		c = dir[DIR_Name];
 3480              		.loc 1 1373 0
 3481 001e 0378     		ldrb	r3, [r0]
 3482              	.LVL483:
1374:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 107


 3483              		.loc 1 1374 0
 3484 0020 002B     		cmp	r3, #0
 3485 0022 0FD0     		beq	.L268
1397:.\sd/ff.c     **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 3486              		.loc 1 1397 0
 3487 0024 C37A     		ldrb	r3, [r0, #11]
 3488 0026 1E42     		tst	r6, r3
 3489 0028 05D1     		bne	.L265
1397:.\sd/ff.c     **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 3490              		.loc 1 1397 0 is_stmt 0 discriminator 1
 3491 002a A169     		ldr	r1, [r4, #24]
 3492 002c 0B22     		mov	r2, #11
 3493 002e FFF7FEFF 		bl	mem_cmp
 3494              	.LVL484:
 3495 0032 0028     		cmp	r0, #0
 3496 0034 07D0     		beq	.L264
 3497              	.L265:
1400:.\sd/ff.c     **** 		res = dir_next(dj, 0);		/* Next entry */
 3498              		.loc 1 1400 0 is_stmt 1
 3499 0036 201C     		mov	r0, r4
 3500 0038 0021     		mov	r1, #0
 3501 003a FFF7FEFF 		bl	dir_next
 3502              	.LVL485:
 3503 003e 051E     		sub	r5, r0, #0
 3504              	.LVL486:
1401:.\sd/ff.c     **** 	} while (res == FR_OK);
 3505              		.loc 1 1401 0
 3506 0040 E6D0     		beq	.L269
 3507 0042 00E0     		b	.L264
 3508              	.LVL487:
 3509              	.L268:
1374:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3510              		.loc 1 1374 0
 3511 0044 0425     		mov	r5, #4
 3512              	.LVL488:
 3513              	.L264:
1403:.\sd/ff.c     **** 	return res;
 3514              		.loc 1 1403 0
 3515 0046 281C     		mov	r0, r5
 3516              	.LVL489:
 3517              	.L263:
1404:.\sd/ff.c     **** }
 3518              		.loc 1 1404 0
 3519              		@ sp needed
 3520              	.LVL490:
 3521 0048 70BD     		pop	{r4, r5, r6, pc}
 3522              		.cfi_endproc
 3523              	.LFE18:
 3524              		.size	dir_find, .-dir_find
 3525 004a C046     		.section	.text.follow_path,"ax",%progbits
 3526              		.align	2
 3527              		.code	16
 3528              		.thumb_func
 3529              		.type	follow_path, %function
 3530              	follow_path:
 3531              	.LFB24:
1923:.\sd/ff.c     **** {
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 108


 3532              		.loc 1 1923 0
 3533              		.cfi_startproc
 3534              	.LVL491:
 3535 0000 70B5     		push	{r4, r5, r6, lr}
 3536              		.cfi_def_cfa_offset 16
 3537              		.cfi_offset 4, -16
 3538              		.cfi_offset 5, -12
 3539              		.cfi_offset 6, -8
 3540              		.cfi_offset 14, -4
 3541 0002 82B0     		sub	sp, sp, #8
 3542              		.cfi_def_cfa_offset 24
 3543 0004 041C     		mov	r4, r0
 3544 0006 0191     		str	r1, [sp, #4]
1935:.\sd/ff.c     **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 3545              		.loc 1 1935 0
 3546 0008 0B78     		ldrb	r3, [r1]
 3547 000a 2F2B     		cmp	r3, #47
 3548 000c 01D0     		beq	.L272
1935:.\sd/ff.c     **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 3549              		.loc 1 1935 0 is_stmt 0 discriminator 1
 3550 000e 5C2B     		cmp	r3, #92
 3551 0010 01D1     		bne	.L273
 3552              	.L272:
1936:.\sd/ff.c     **** 		path++;
 3553              		.loc 1 1936 0 is_stmt 1
 3554 0012 0131     		add	r1, r1, #1
 3555              	.LVL492:
 3556 0014 0191     		str	r1, [sp, #4]
 3557              	.LVL493:
 3558              	.L273:
1937:.\sd/ff.c     **** 	dj->sclust = 0;						/* Start from the root dir */
 3559              		.loc 1 1937 0
 3560 0016 0023     		mov	r3, #0
 3561 0018 A360     		str	r3, [r4, #8]
1940:.\sd/ff.c     **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 3562              		.loc 1 1940 0
 3563 001a 019A     		ldr	r2, [sp, #4]
 3564 001c 1378     		ldrb	r3, [r2]
 3565 001e 1F2B     		cmp	r3, #31
 3566 0020 06D8     		bhi	.L274
1941:.\sd/ff.c     **** 		res = dir_sdi(dj, 0);
 3567              		.loc 1 1941 0
 3568 0022 201C     		mov	r0, r4
 3569              	.LVL494:
 3570 0024 0021     		mov	r1, #0
 3571 0026 FFF7FEFF 		bl	dir_sdi
 3572              	.LVL495:
1942:.\sd/ff.c     **** 		dj->dir = 0;
 3573              		.loc 1 1942 0
 3574 002a 0023     		mov	r3, #0
 3575 002c 6361     		str	r3, [r4, #20]
 3576 002e 29E0     		b	.L275
 3577              	.LVL496:
 3578              	.L274:
1962:.\sd/ff.c     **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 3579              		.loc 1 1962 0
 3580 0030 0425     		mov	r5, #4
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 109


1964:.\sd/ff.c     **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 3581              		.loc 1 1964 0
 3582 0032 1026     		mov	r6, #16
 3583              	.LVL497:
 3584              	.L279:
1946:.\sd/ff.c     **** 			res = create_name(dj, &path);	/* Get a segment */
 3585              		.loc 1 1946 0
 3586 0034 201C     		mov	r0, r4
 3587 0036 01A9     		add	r1, sp, #4
 3588 0038 FFF7FEFF 		bl	create_name
 3589              	.LVL498:
1947:.\sd/ff.c     **** 			if (res != FR_OK) break;
 3590              		.loc 1 1947 0
 3591 003c 0028     		cmp	r0, #0
 3592 003e 21D1     		bne	.L275
1948:.\sd/ff.c     **** 			res = dir_find(dj);				/* Find it */
 3593              		.loc 1 1948 0
 3594 0040 201C     		mov	r0, r4
 3595              	.LVL499:
 3596 0042 FFF7FEFF 		bl	dir_find
 3597              	.LVL500:
1949:.\sd/ff.c     **** 			ns = *(dj->fn+NS);
 3598              		.loc 1 1949 0
 3599 0046 A269     		ldr	r2, [r4, #24]
 3600 0048 D37A     		ldrb	r3, [r2, #11]
 3601              	.LVL501:
1950:.\sd/ff.c     **** 			if (res != FR_OK) {				/* Failed to find the object */
 3602              		.loc 1 1950 0
 3603 004a 0028     		cmp	r0, #0
 3604 004c 04D0     		beq	.L276
1951:.\sd/ff.c     **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 3605              		.loc 1 1951 0
 3606 004e 0428     		cmp	r0, #4
 3607 0050 18D1     		bne	.L275
1958:.\sd/ff.c     **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 3608              		.loc 1 1958 0
 3609 0052 5A07     		lsl	r2, r3, #29
 3610 0054 13D5     		bpl	.L277
 3611              	.LVL502:
 3612 0056 15E0     		b	.L275
 3613              	.LVL503:
 3614              	.L276:
1962:.\sd/ff.c     **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 3615              		.loc 1 1962 0
 3616 0058 1D42     		tst	r5, r3
 3617 005a 13D1     		bne	.L275
1963:.\sd/ff.c     **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 3618              		.loc 1 1963 0
 3619 005c 6369     		ldr	r3, [r4, #20]
 3620              	.LVL504:
1964:.\sd/ff.c     **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 3621              		.loc 1 1964 0
 3622 005e DA7A     		ldrb	r2, [r3, #11]
 3623              	.LVL505:
 3624 0060 1642     		tst	r6, r2
 3625 0062 0ED0     		beq	.L278
1967:.\sd/ff.c     **** 			dj->sclust = LD_CLUST(dir);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 110


 3626              		.loc 1 1967 0
 3627 0064 5A7D     		ldrb	r2, [r3, #21]
 3628 0066 1202     		lsl	r2, r2, #8
 3629 0068 197D     		ldrb	r1, [r3, #20]
 3630 006a 0A43     		orr	r2, r1
 3631 006c 1204     		lsl	r2, r2, #16
 3632 006e D87E     		ldrb	r0, [r3, #27]
 3633              	.LVL506:
 3634 0070 0002     		lsl	r0, r0, #8
 3635 0072 997E     		ldrb	r1, [r3, #26]
 3636 0074 031C     		mov	r3, r0
 3637              	.LVL507:
 3638 0076 0B43     		orr	r3, r1
 3639 0078 1343     		orr	r3, r2
 3640 007a A360     		str	r3, [r4, #8]
 3641              	.LVL508:
1968:.\sd/ff.c     **** 		}
 3642              		.loc 1 1968 0
 3643 007c DAE7     		b	.L279
 3644              	.LVL509:
 3645              	.L277:
1958:.\sd/ff.c     **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 3646              		.loc 1 1958 0
 3647 007e 0520     		mov	r0, #5
 3648              	.LVL510:
 3649 0080 00E0     		b	.L275
 3650              	.LVL511:
 3651              	.L278:
1965:.\sd/ff.c     **** 				res = FR_NO_PATH; break;
 3652              		.loc 1 1965 0
 3653 0082 0520     		mov	r0, #5
 3654              	.LVL512:
 3655              	.L275:
1972:.\sd/ff.c     **** }
 3656              		.loc 1 1972 0
 3657 0084 02B0     		add	sp, sp, #8
 3658              		@ sp needed
 3659              	.LVL513:
 3660 0086 70BD     		pop	{r4, r5, r6, pc}
 3661              		.cfi_endproc
 3662              	.LFE24:
 3663              		.size	follow_path, .-follow_path
 3664              		.section	.text.dir_register,"ax",%progbits
 3665              		.align	2
 3666              		.code	16
 3667              		.thumb_func
 3668              		.type	dir_register, %function
 3669              	dir_register:
 3670              	.LFB20:
1474:.\sd/ff.c     **** {
 3671              		.loc 1 1474 0
 3672              		.cfi_startproc
 3673              	.LVL514:
 3674 0000 70B5     		push	{r4, r5, r6, lr}
 3675              		.cfi_def_cfa_offset 16
 3676              		.cfi_offset 4, -16
 3677              		.cfi_offset 5, -12
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 111


 3678              		.cfi_offset 6, -8
 3679              		.cfi_offset 14, -4
 3680 0002 051C     		mov	r5, r0
1541:.\sd/ff.c     **** 	res = dir_sdi(dj, 0);
 3681              		.loc 1 1541 0
 3682 0004 0021     		mov	r1, #0
 3683 0006 FFF7FEFF 		bl	dir_sdi
 3684              	.LVL515:
 3685 000a 041E     		sub	r4, r0, #0
 3686              	.LVL516:
1542:.\sd/ff.c     **** 	if (res == FR_OK) {
 3687              		.loc 1 1542 0
 3688 000c 11D1     		bne	.L281
 3689              	.LVL517:
 3690              	.L284:
1544:.\sd/ff.c     **** 			res = move_window(dj->fs, dj->sect);
 3691              		.loc 1 1544 0
 3692 000e 2868     		ldr	r0, [r5]
 3693 0010 2969     		ldr	r1, [r5, #16]
 3694 0012 FFF7FEFF 		bl	move_window
 3695              	.LVL518:
 3696 0016 041E     		sub	r4, r0, #0
 3697              	.LVL519:
1545:.\sd/ff.c     **** 			if (res != FR_OK) break;
 3698              		.loc 1 1545 0
 3699 0018 0BD1     		bne	.L281
1546:.\sd/ff.c     **** 			c = *dj->dir;
 3700              		.loc 1 1546 0
 3701 001a 6A69     		ldr	r2, [r5, #20]
 3702 001c 1378     		ldrb	r3, [r2]
 3703              	.LVL520:
1547:.\sd/ff.c     **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 3704              		.loc 1 1547 0
 3705 001e E52B     		cmp	r3, #229
 3706 0020 07D0     		beq	.L281
1547:.\sd/ff.c     **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 3707              		.loc 1 1547 0 is_stmt 0 discriminator 1
 3708 0022 002B     		cmp	r3, #0
 3709 0024 05D0     		beq	.L281
1548:.\sd/ff.c     **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 3710              		.loc 1 1548 0 is_stmt 1
 3711 0026 281C     		mov	r0, r5
 3712              	.LVL521:
 3713 0028 0121     		mov	r1, #1
 3714 002a FFF7FEFF 		bl	dir_next
 3715              	.LVL522:
 3716 002e 041E     		sub	r4, r0, #0
 3717              	.LVL523:
1549:.\sd/ff.c     **** 		} while (res == FR_OK);
 3718              		.loc 1 1549 0
 3719 0030 EDD0     		beq	.L284
 3720              	.LVL524:
 3721              	.L281:
1553:.\sd/ff.c     **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
 3722              		.loc 1 1553 0
 3723 0032 002C     		cmp	r4, #0
 3724 0034 13D1     		bne	.L283
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 112


1554:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
 3725              		.loc 1 1554 0
 3726 0036 2868     		ldr	r0, [r5]
 3727 0038 2969     		ldr	r1, [r5, #16]
 3728 003a FFF7FEFF 		bl	move_window
 3729              	.LVL525:
 3730 003e 041E     		sub	r4, r0, #0
 3731              	.LVL526:
1555:.\sd/ff.c     **** 		if (res == FR_OK) {
 3732              		.loc 1 1555 0
 3733 0040 0DD1     		bne	.L283
1556:.\sd/ff.c     **** 			dir = dj->dir;
 3734              		.loc 1 1556 0
 3735 0042 6E69     		ldr	r6, [r5, #20]
 3736              	.LVL527:
1557:.\sd/ff.c     **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
 3737              		.loc 1 1557 0
 3738 0044 301C     		mov	r0, r6
 3739              	.LVL528:
 3740 0046 0021     		mov	r1, #0
 3741 0048 2022     		mov	r2, #32
 3742 004a FFF7FEFF 		bl	mem_set
 3743              	.LVL529:
1558:.\sd/ff.c     **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 3744              		.loc 1 1558 0
 3745 004e 301C     		mov	r0, r6
 3746 0050 A969     		ldr	r1, [r5, #24]
 3747 0052 0B22     		mov	r2, #11
 3748 0054 FFF7FEFF 		bl	mem_cpy
 3749              	.LVL530:
1562:.\sd/ff.c     **** 			dj->fs->wflag = 1;
 3750              		.loc 1 1562 0
 3751 0058 2B68     		ldr	r3, [r5]
 3752 005a 0122     		mov	r2, #1
 3753 005c 1A71     		strb	r2, [r3, #4]
 3754              	.LVL531:
 3755              	.L283:
1567:.\sd/ff.c     **** }
 3756              		.loc 1 1567 0
 3757 005e 201C     		mov	r0, r4
 3758              		@ sp needed
 3759              	.LVL532:
 3760              	.LVL533:
 3761 0060 70BD     		pop	{r4, r5, r6, pc}
 3762              		.cfi_endproc
 3763              	.LFE20:
 3764              		.size	dir_register, .-dir_register
 3765 0062 C046     		.section	.text.dir_read,"ax",%progbits
 3766              		.align	2
 3767              		.code	16
 3768              		.thumb_func
 3769              		.type	dir_read, %function
 3770              	dir_read:
 3771              	.LFB19:
1417:.\sd/ff.c     **** {
 3772              		.loc 1 1417 0
 3773              		.cfi_startproc
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 113


 3774              	.LVL534:
 3775 0000 38B5     		push	{r3, r4, r5, lr}
 3776              		.cfi_def_cfa_offset 16
 3777              		.cfi_offset 3, -16
 3778              		.cfi_offset 4, -12
 3779              		.cfi_offset 5, -8
 3780              		.cfi_offset 14, -4
 3781 0002 041C     		mov	r4, r0
 3782              	.LVL535:
1424:.\sd/ff.c     **** 	res = FR_NO_FILE;
 3783              		.loc 1 1424 0
 3784 0004 0420     		mov	r0, #4
 3785              	.LVL536:
1451:.\sd/ff.c     **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 3786              		.loc 1 1451 0
 3787 0006 0825     		mov	r5, #8
1425:.\sd/ff.c     **** 	while (dj->sect) {
 3788              		.loc 1 1425 0
 3789 0008 15E0     		b	.L287
 3790              	.LVL537:
 3791              	.L290:
1426:.\sd/ff.c     **** 		res = move_window(dj->fs, dj->sect);
 3792              		.loc 1 1426 0
 3793 000a 2068     		ldr	r0, [r4]
 3794              	.LVL538:
 3795 000c FFF7FEFF 		bl	move_window
 3796              	.LVL539:
1427:.\sd/ff.c     **** 		if (res != FR_OK) break;
 3797              		.loc 1 1427 0
 3798 0010 0028     		cmp	r0, #0
 3799 0012 15D1     		bne	.L288
1428:.\sd/ff.c     **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3800              		.loc 1 1428 0
 3801 0014 6169     		ldr	r1, [r4, #20]
 3802              	.LVL540:
1429:.\sd/ff.c     **** 		c = dir[DIR_Name];
 3803              		.loc 1 1429 0
 3804 0016 0A78     		ldrb	r2, [r1]
 3805              	.LVL541:
1430:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3806              		.loc 1 1430 0
 3807 0018 002A     		cmp	r2, #0
 3808 001a 10D0     		beq	.L292
1451:.\sd/ff.c     **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 3809              		.loc 1 1451 0
 3810 001c E52A     		cmp	r2, #229
 3811 001e 04D0     		beq	.L289
1451:.\sd/ff.c     **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 3812              		.loc 1 1451 0 is_stmt 0 discriminator 1
 3813 0020 2E2A     		cmp	r2, #46
 3814 0022 02D0     		beq	.L289
 3815 0024 CA7A     		ldrb	r2, [r1, #11]
 3816 0026 1542     		tst	r5, r2
 3817 0028 0AD0     		beq	.L288
 3818              	.L289:
1454:.\sd/ff.c     **** 		res = dir_next(dj, 0);				/* Next entry */
 3819              		.loc 1 1454 0 is_stmt 1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 114


 3820 002a 201C     		mov	r0, r4
 3821              	.LVL542:
 3822 002c 0021     		mov	r1, #0
 3823              	.LVL543:
 3824 002e FFF7FEFF 		bl	dir_next
 3825              	.LVL544:
1455:.\sd/ff.c     **** 		if (res != FR_OK) break;
 3826              		.loc 1 1455 0
 3827 0032 0028     		cmp	r0, #0
 3828 0034 04D1     		bne	.L288
 3829              	.LVL545:
 3830              	.L287:
1425:.\sd/ff.c     **** 	while (dj->sect) {
 3831              		.loc 1 1425 0 discriminator 1
 3832 0036 2169     		ldr	r1, [r4, #16]
 3833 0038 0029     		cmp	r1, #0
 3834 003a E6D1     		bne	.L290
 3835 003c 00E0     		b	.L288
 3836              	.LVL546:
 3837              	.L292:
1430:.\sd/ff.c     **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3838              		.loc 1 1430 0
 3839 003e 0420     		mov	r0, #4
 3840              	.LVL547:
 3841              	.L288:
1458:.\sd/ff.c     **** 	if (res != FR_OK) dj->sect = 0;
 3842              		.loc 1 1458 0
 3843 0040 0028     		cmp	r0, #0
 3844 0042 01D0     		beq	.L291
1458:.\sd/ff.c     **** 	if (res != FR_OK) dj->sect = 0;
 3845              		.loc 1 1458 0 is_stmt 0 discriminator 1
 3846 0044 0022     		mov	r2, #0
 3847 0046 2261     		str	r2, [r4, #16]
 3848              	.L291:
1461:.\sd/ff.c     **** }
 3849              		.loc 1 1461 0 is_stmt 1
 3850              		@ sp needed
 3851              	.LVL548:
 3852 0048 38BD     		pop	{r3, r4, r5, pc}
 3853              		.cfi_endproc
 3854              	.LFE19:
 3855              		.size	dir_read, .-dir_read
 3856 004a C046     		.section	.text.remove_chain,"ax",%progbits
 3857              		.align	2
 3858              		.code	16
 3859              		.thumb_func
 3860              		.type	remove_chain, %function
 3861              	remove_chain:
 3862              	.LFB14:
 929:.\sd/ff.c     **** {
 3863              		.loc 1 929 0
 3864              		.cfi_startproc
 3865              	.LVL549:
 3866 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3867              		.cfi_def_cfa_offset 20
 3868              		.cfi_offset 4, -20
 3869              		.cfi_offset 5, -16
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 115


 3870              		.cfi_offset 6, -12
 3871              		.cfi_offset 7, -8
 3872              		.cfi_offset 14, -4
 3873 0002 4746     		mov	r7, r8
 3874 0004 80B4     		push	{r7}
 3875              		.cfi_def_cfa_offset 24
 3876              		.cfi_offset 8, -24
 3877 0006 041C     		mov	r4, r0
 3878 0008 0D1E     		sub	r5, r1, #0
 936:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 3879              		.loc 1 936 0
 3880 000a 012D     		cmp	r5, #1
 3881 000c 23D9     		bls	.L298
 936:.\sd/ff.c     **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 3882              		.loc 1 936 0 is_stmt 0 discriminator 1
 3883 000e 8269     		ldr	r2, [r0, #24]
 3884 0010 8A42     		cmp	r2, r1
 3885 0012 22D9     		bls	.L299
 3886 0014 0027     		mov	r7, #0
 950:.\sd/ff.c     **** 				fs->fsi_flag = 1;
 3887              		.loc 1 950 0 is_stmt 1
 3888 0016 0123     		mov	r3, #1
 3889 0018 9846     		mov	r8, r3
 3890 001a 18E0     		b	.L295
 3891              	.LVL550:
 3892              	.L297:
 942:.\sd/ff.c     **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 3893              		.loc 1 942 0
 3894 001c 201C     		mov	r0, r4
 3895 001e 291C     		mov	r1, r5
 3896 0020 FFF7FEFF 		bl	get_fat
 3897              	.LVL551:
 3898 0024 061E     		sub	r6, r0, #0
 3899              	.LVL552:
 943:.\sd/ff.c     **** 			if (nxt == 0) break;				/* Empty cluster? */
 3900              		.loc 1 943 0
 3901 0026 1DD0     		beq	.L294
 944:.\sd/ff.c     **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 3902              		.loc 1 944 0
 3903 0028 0128     		cmp	r0, #1
 3904 002a 18D0     		beq	.L300
 945:.\sd/ff.c     **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 3905              		.loc 1 945 0
 3906 002c 421C     		add	r2, r0, #1
 3907 002e 18D0     		beq	.L301
 946:.\sd/ff.c     **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 3908              		.loc 1 946 0
 3909 0030 201C     		mov	r0, r4
 3910              	.LVL553:
 3911 0032 291C     		mov	r1, r5
 3912 0034 0022     		mov	r2, #0
 3913 0036 FFF7FEFF 		bl	put_fat
 3914              	.LVL554:
 3915 003a 071E     		sub	r7, r0, #0
 3916              	.LVL555:
 947:.\sd/ff.c     **** 			if (res != FR_OK) break;
 3917              		.loc 1 947 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 116


 3918 003c 12D1     		bne	.L294
 948:.\sd/ff.c     **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 3919              		.loc 1 948 0
 3920 003e 2369     		ldr	r3, [r4, #16]
 3921 0040 5A1C     		add	r2, r3, #1
 3922 0042 03D0     		beq	.L296
 949:.\sd/ff.c     **** 				fs->free_clust++;
 3923              		.loc 1 949 0
 3924 0044 0133     		add	r3, r3, #1
 3925 0046 2361     		str	r3, [r4, #16]
 950:.\sd/ff.c     **** 				fs->fsi_flag = 1;
 3926              		.loc 1 950 0
 3927 0048 4346     		mov	r3, r8
 3928 004a 6371     		strb	r3, [r4, #5]
 3929              	.L296:
 3930              	.LVL556:
 962:.\sd/ff.c     **** 			clst = nxt;	/* Next cluster */
 3931              		.loc 1 962 0
 3932 004c 351C     		mov	r5, r6
 3933              	.LVL557:
 3934              	.L295:
 941:.\sd/ff.c     **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 3935              		.loc 1 941 0 discriminator 1
 3936 004e A269     		ldr	r2, [r4, #24]
 3937 0050 AA42     		cmp	r2, r5
 3938 0052 E3D8     		bhi	.L297
 3939 0054 06E0     		b	.L294
 3940              	.LVL558:
 3941              	.L298:
 937:.\sd/ff.c     **** 		res = FR_INT_ERR;
 3942              		.loc 1 937 0
 3943 0056 0227     		mov	r7, #2
 3944 0058 04E0     		b	.L294
 3945              	.L299:
 3946 005a 0227     		mov	r7, #2
 3947 005c 02E0     		b	.L294
 3948              	.LVL559:
 3949              	.L300:
 944:.\sd/ff.c     **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 3950              		.loc 1 944 0
 3951 005e 0227     		mov	r7, #2
 3952              	.LVL560:
 3953 0060 00E0     		b	.L294
 3954              	.LVL561:
 3955              	.L301:
 945:.\sd/ff.c     **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 3956              		.loc 1 945 0
 3957 0062 0127     		mov	r7, #1
 3958              	.LVL562:
 3959              	.L294:
 967:.\sd/ff.c     **** }
 3960              		.loc 1 967 0
 3961 0064 381C     		mov	r0, r7
 3962              		@ sp needed
 3963              	.LVL563:
 3964              	.LVL564:
 3965              	.LVL565:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 117


 3966 0066 04BC     		pop	{r2}
 3967 0068 9046     		mov	r8, r2
 3968 006a F0BD     		pop	{r4, r5, r6, r7, pc}
 3969              		.cfi_endproc
 3970              	.LFE14:
 3971              		.size	remove_chain, .-remove_chain
 3972              		.section	.text.f_mount,"ax",%progbits
 3973              		.align	2
 3974              		.global	f_mount
 3975              		.code	16
 3976              		.thumb_func
 3977              		.type	f_mount, %function
 3978              	f_mount:
 3979              	.LFB28:
2187:.\sd/ff.c     **** 
2188:.\sd/ff.c     **** 
2189:.\sd/ff.c     **** 
2190:.\sd/ff.c     **** 
2191:.\sd/ff.c     **** /*--------------------------------------------------------------------------
2192:.\sd/ff.c     **** 
2193:.\sd/ff.c     ****    Public Functions
2194:.\sd/ff.c     **** 
2195:.\sd/ff.c     **** --------------------------------------------------------------------------*/
2196:.\sd/ff.c     **** 
2197:.\sd/ff.c     **** 
2198:.\sd/ff.c     **** 
2199:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2200:.\sd/ff.c     **** /* Mount/Unmount a Logical Drive                                         */
2201:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2202:.\sd/ff.c     **** 
2203:.\sd/ff.c     **** FRESULT f_mount (
2204:.\sd/ff.c     **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2205:.\sd/ff.c     **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2206:.\sd/ff.c     **** )
2207:.\sd/ff.c     **** {
 3980              		.loc 1 2207 0
 3981              		.cfi_startproc
 3982              	.LVL566:
 3983 0000 70B5     		push	{r4, r5, r6, lr}
 3984              		.cfi_def_cfa_offset 16
 3985              		.cfi_offset 4, -16
 3986              		.cfi_offset 5, -12
 3987              		.cfi_offset 6, -8
 3988              		.cfi_offset 14, -4
 3989 0002 041C     		mov	r4, r0
 3990 0004 0D1C     		mov	r5, r1
2208:.\sd/ff.c     **** 	FATFS *rfs;
2209:.\sd/ff.c     **** 
2210:.\sd/ff.c     **** 
2211:.\sd/ff.c     **** 	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 3991              		.loc 1 2211 0
 3992 0006 0028     		cmp	r0, #0
 3993 0008 14D1     		bne	.L306
2212:.\sd/ff.c     **** 		return FR_INVALID_DRIVE;
2213:.\sd/ff.c     **** 	rfs = FatFs[vol];			/* Get current fs object */
 3994              		.loc 1 2213 0
 3995 000a 8300     		lsl	r3, r0, #2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 118


 3996 000c 0A4A     		ldr	r2, .L307
 3997 000e D318     		add	r3, r2, r3
 3998 0010 5E6A     		ldr	r6, [r3, #36]
 3999              	.LVL567:
2214:.\sd/ff.c     **** 
2215:.\sd/ff.c     **** 	if (rfs) {
 4000              		.loc 1 2215 0
 4001 0012 002E     		cmp	r6, #0
 4002 0014 04D0     		beq	.L304
2216:.\sd/ff.c     **** #if _FS_SHARE
2217:.\sd/ff.c     **** 		clear_lock(rfs);
 4003              		.loc 1 2217 0
 4004 0016 301C     		mov	r0, r6
 4005              	.LVL568:
 4006 0018 FFF7FEFF 		bl	clear_lock
 4007              	.LVL569:
2218:.\sd/ff.c     **** #endif
2219:.\sd/ff.c     **** #if _FS_REENTRANT				/* Discard sync object of the current volume */
2220:.\sd/ff.c     **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2221:.\sd/ff.c     **** #endif
2222:.\sd/ff.c     **** 		rfs->fs_type = 0;		/* Clear old fs object */
 4008              		.loc 1 2222 0
 4009 001c 0023     		mov	r3, #0
 4010 001e 3370     		strb	r3, [r6]
 4011              	.L304:
2223:.\sd/ff.c     **** 	}
2224:.\sd/ff.c     **** 
2225:.\sd/ff.c     **** 	if (fs) {
 4012              		.loc 1 2225 0
 4013 0020 002D     		cmp	r5, #0
 4014 0022 01D0     		beq	.L305
2226:.\sd/ff.c     **** 		fs->fs_type = 0;		/* Clear new fs object */
 4015              		.loc 1 2226 0
 4016 0024 0023     		mov	r3, #0
 4017 0026 2B70     		strb	r3, [r5]
 4018              	.L305:
2227:.\sd/ff.c     **** #if _FS_REENTRANT				/* Create sync object for the new volume */
2228:.\sd/ff.c     **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2229:.\sd/ff.c     **** #endif
2230:.\sd/ff.c     **** 	}
2231:.\sd/ff.c     **** 	FatFs[vol] = fs;			/* Register new fs object */
 4019              		.loc 1 2231 0
 4020 0028 A400     		lsl	r4, r4, #2
 4021 002a 034B     		ldr	r3, .L307
 4022 002c 1C19     		add	r4, r3, r4
 4023 002e 6562     		str	r5, [r4, #36]
2232:.\sd/ff.c     **** 
2233:.\sd/ff.c     **** 	return FR_OK;
 4024              		.loc 1 2233 0
 4025 0030 0020     		mov	r0, #0
 4026 0032 00E0     		b	.L303
 4027              	.LVL570:
 4028              	.L306:
2212:.\sd/ff.c     **** 		return FR_INVALID_DRIVE;
 4029              		.loc 1 2212 0
 4030 0034 0B20     		mov	r0, #11
 4031              	.LVL571:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 119


 4032              	.L303:
2234:.\sd/ff.c     **** }
 4033              		.loc 1 2234 0
 4034              		@ sp needed
 4035              	.LVL572:
 4036 0036 70BD     		pop	{r4, r5, r6, pc}
 4037              	.L308:
 4038              		.align	2
 4039              	.L307:
 4040 0038 00000000 		.word	.LANCHOR0
 4041              		.cfi_endproc
 4042              	.LFE28:
 4043              		.size	f_mount, .-f_mount
 4044              		.section	.text.f_open,"ax",%progbits
 4045              		.align	2
 4046              		.global	f_open
 4047              		.code	16
 4048              		.thumb_func
 4049              		.type	f_open, %function
 4050              	f_open:
 4051              	.LFB29:
2235:.\sd/ff.c     **** 
2236:.\sd/ff.c     **** 
2237:.\sd/ff.c     **** 
2238:.\sd/ff.c     **** 
2239:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2240:.\sd/ff.c     **** /* Open or Create a File                                                 */
2241:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2242:.\sd/ff.c     **** 
2243:.\sd/ff.c     **** FRESULT f_open (
2244:.\sd/ff.c     **** 	FIL *fp,			/* Pointer to the blank file object */
2245:.\sd/ff.c     **** 	const TCHAR *path,	/* Pointer to the file name */
2246:.\sd/ff.c     **** 	BYTE mode			/* Access mode and file open mode flags */
2247:.\sd/ff.c     **** )
2248:.\sd/ff.c     **** {
 4052              		.loc 1 2248 0
 4053              		.cfi_startproc
 4054              	.LVL573:
 4055 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4056              		.cfi_def_cfa_offset 20
 4057              		.cfi_offset 4, -20
 4058              		.cfi_offset 5, -16
 4059              		.cfi_offset 6, -12
 4060              		.cfi_offset 7, -8
 4061              		.cfi_offset 14, -4
 4062 0002 4F46     		mov	r7, r9
 4063 0004 4646     		mov	r6, r8
 4064 0006 C0B4     		push	{r6, r7}
 4065              		.cfi_def_cfa_offset 28
 4066              		.cfi_offset 8, -28
 4067              		.cfi_offset 9, -24
 4068 0008 8DB0     		sub	sp, sp, #52
 4069              		.cfi_def_cfa_offset 80
 4070 000a 061C     		mov	r6, r0
 4071 000c 0191     		str	r1, [sp, #4]
 4072 000e 9046     		mov	r8, r2
2249:.\sd/ff.c     **** 	FRESULT res;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 120


2250:.\sd/ff.c     **** 	DIR dj;
2251:.\sd/ff.c     **** 	BYTE *dir;
2252:.\sd/ff.c     **** 	DEF_NAMEBUF;
2253:.\sd/ff.c     **** 
2254:.\sd/ff.c     **** 
2255:.\sd/ff.c     **** 	fp->fs = 0;			/* Clear file object */
 4073              		.loc 1 2255 0
 4074 0010 0023     		mov	r3, #0
 4075 0012 0360     		str	r3, [r0]
2256:.\sd/ff.c     **** 
2257:.\sd/ff.c     **** #if !_FS_READONLY
2258:.\sd/ff.c     **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 4076              		.loc 1 2258 0
 4077 0014 1F27     		mov	r7, #31
 4078 0016 1740     		and	r7, r2
 4079              	.LVL574:
2259:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 4080              		.loc 1 2259 0
 4081 0018 1E22     		mov	r2, #30
 4082 001a 4346     		mov	r3, r8
 4083 001c 1A40     		and	r2, r3
 4084 001e 01A8     		add	r0, sp, #4
 4085              	.LVL575:
 4086 0020 05A9     		add	r1, sp, #20
 4087              	.LVL576:
 4088 0022 FFF7FEFF 		bl	chk_mounted
 4089              	.LVL577:
 4090 0026 041C     		mov	r4, r0
 4091              	.LVL578:
2260:.\sd/ff.c     **** #else
2261:.\sd/ff.c     **** 	mode &= FA_READ;
2262:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 0);
2263:.\sd/ff.c     **** #endif
2264:.\sd/ff.c     **** 	INIT_BUF(dj);
 4092              		.loc 1 2264 0
 4093 0028 02AB     		add	r3, sp, #8
 4094 002a 0B93     		str	r3, [sp, #44]
2265:.\sd/ff.c     **** 	if (res == FR_OK)
 4095              		.loc 1 2265 0
 4096 002c 0028     		cmp	r0, #0
 4097 002e 04D1     		bne	.L310
2266:.\sd/ff.c     **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4098              		.loc 1 2266 0
 4099 0030 05A8     		add	r0, sp, #20
 4100              	.LVL579:
 4101 0032 0199     		ldr	r1, [sp, #4]
 4102 0034 FFF7FEFF 		bl	follow_path
 4103              	.LVL580:
 4104 0038 041C     		mov	r4, r0
 4105              	.LVL581:
 4106              	.L310:
2267:.\sd/ff.c     **** 	dir = dj.dir;
 4107              		.loc 1 2267 0
 4108 003a 0A9D     		ldr	r5, [sp, #40]
 4109              	.LVL582:
2268:.\sd/ff.c     **** 
2269:.\sd/ff.c     **** #if !_FS_READONLY	/* R/W configuration */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 121


2270:.\sd/ff.c     **** 	if (res == FR_OK) {
 4110              		.loc 1 2270 0
 4111 003c 002C     		cmp	r4, #0
 4112 003e 0CD1     		bne	.L311
2271:.\sd/ff.c     **** 		if (!dir)	/* Current dir itself */
 4113              		.loc 1 2271 0
 4114 0040 002D     		cmp	r5, #0
 4115 0042 09D0     		beq	.L321
2272:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
2273:.\sd/ff.c     **** #if _FS_SHARE
2274:.\sd/ff.c     **** 		else
2275:.\sd/ff.c     **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 4116              		.loc 1 2275 0
 4117 0044 0123     		mov	r3, #1
 4118 0046 391C     		mov	r1, r7
 4119 0048 9943     		bic	r1, r3
 4120 004a 4B1E     		sub	r3, r1, #1
 4121 004c 9941     		sbc	r1, r1, r3
 4122 004e 05A8     		add	r0, sp, #20
 4123 0050 FFF7FEFF 		bl	chk_lock
 4124              	.LVL583:
 4125 0054 041C     		mov	r4, r0
 4126              	.LVL584:
 4127 0056 00E0     		b	.L311
 4128              	.LVL585:
 4129              	.L321:
2272:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
 4130              		.loc 1 2272 0
 4131 0058 0624     		mov	r4, #6
 4132              	.LVL586:
 4133              	.L311:
2276:.\sd/ff.c     **** #endif
2277:.\sd/ff.c     **** 	}
2278:.\sd/ff.c     **** 	/* Create or Open a file */
2279:.\sd/ff.c     **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 4134              		.loc 1 2279 0
 4135 005a 1C23     		mov	r3, #28
 4136 005c 4246     		mov	r2, r8
 4137 005e 1342     		tst	r3, r2
 4138 0060 52D0     		beq	.L312
 4139              	.LBB5:
2280:.\sd/ff.c     **** 		DWORD dw, cl;
2281:.\sd/ff.c     **** 
2282:.\sd/ff.c     **** 		if (res != FR_OK) {					/* No file, create new */
 4140              		.loc 1 2282 0
 4141 0062 002C     		cmp	r4, #0
 4142 0064 0FD0     		beq	.L313
2283:.\sd/ff.c     **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 4143              		.loc 1 2283 0
 4144 0066 042C     		cmp	r4, #4
 4145 0068 09D1     		bne	.L314
2284:.\sd/ff.c     **** #if _FS_SHARE
2285:.\sd/ff.c     **** 				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 4146              		.loc 1 2285 0
 4147 006a FFF7FEFF 		bl	enq_lock
 4148              	.LVL587:
 4149 006e 0028     		cmp	r0, #0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 122


 4150 0070 04D0     		beq	.L322
 4151              		.loc 1 2285 0 is_stmt 0 discriminator 1
 4152 0072 05A8     		add	r0, sp, #20
 4153 0074 FFF7FEFF 		bl	dir_register
 4154              	.LVL588:
 4155 0078 041C     		mov	r4, r0
 4156              	.LVL589:
 4157 007a 00E0     		b	.L314
 4158              	.LVL590:
 4159              	.L322:
 4160              		.loc 1 2285 0
 4161 007c 1224     		mov	r4, #18
 4162              	.LVL591:
 4163              	.L314:
2286:.\sd/ff.c     **** #else
2287:.\sd/ff.c     **** 				res = dir_register(&dj);
2288:.\sd/ff.c     **** #endif
2289:.\sd/ff.c     **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
 4164              		.loc 1 2289 0 is_stmt 1
 4165 007e 0823     		mov	r3, #8
 4166 0080 1F43     		orr	r7, r3
 4167              	.LVL592:
2290:.\sd/ff.c     **** 			dir = dj.dir;					/* New entry */
 4168              		.loc 1 2290 0
 4169 0082 0A9D     		ldr	r5, [sp, #40]
 4170              	.LVL593:
 4171 0084 0AE0     		b	.L316
 4172              	.L313:
2291:.\sd/ff.c     **** 		}
2292:.\sd/ff.c     **** 		else {								/* Any object is already existing */
2293:.\sd/ff.c     **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 4173              		.loc 1 2293 0
 4174 0086 EB7A     		ldrb	r3, [r5, #11]
 4175 0088 1122     		mov	r2, #17
 4176 008a 1A42     		tst	r2, r3
 4177 008c 03D1     		bne	.L323
2294:.\sd/ff.c     **** 				res = FR_DENIED;
2295:.\sd/ff.c     **** 			} else {
2296:.\sd/ff.c     **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 4178              		.loc 1 2296 0
 4179 008e 4346     		mov	r3, r8
 4180 0090 5B07     		lsl	r3, r3, #29
 4181 0092 02D4     		bmi	.L324
 4182 0094 02E0     		b	.L316
 4183              	.L323:
2294:.\sd/ff.c     **** 				res = FR_DENIED;
 4184              		.loc 1 2294 0
 4185 0096 0724     		mov	r4, #7
 4186              	.LVL594:
 4187 0098 00E0     		b	.L316
 4188              	.LVL595:
 4189              	.L324:
2297:.\sd/ff.c     **** 					res = FR_EXIST;
 4190              		.loc 1 2297 0
 4191 009a 0824     		mov	r4, #8
 4192              	.LVL596:
 4193              	.L316:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 123


2298:.\sd/ff.c     **** 			}
2299:.\sd/ff.c     **** 		}
2300:.\sd/ff.c     **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 4194              		.loc 1 2300 0
 4195 009c 002C     		cmp	r4, #0
 4196 009e 41D1     		bne	.L317
 4197              		.loc 1 2300 0 is_stmt 0 discriminator 1
 4198 00a0 3A07     		lsl	r2, r7, #28
 4199 00a2 3FD5     		bpl	.L317
2301:.\sd/ff.c     **** 			dw = get_fattime();					/* Created time */
 4200              		.loc 1 2301 0 is_stmt 1
 4201 00a4 FFF7FEFF 		bl	get_fattime
 4202              	.LVL597:
2302:.\sd/ff.c     **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 4203              		.loc 1 2302 0
 4204 00a8 A873     		strb	r0, [r5, #14]
 4205 00aa 030A     		lsr	r3, r0, #8
 4206 00ac EB73     		strb	r3, [r5, #15]
 4207 00ae 030C     		lsr	r3, r0, #16
 4208 00b0 2B74     		strb	r3, [r5, #16]
 4209 00b2 000E     		lsr	r0, r0, #24
 4210              	.LVL598:
 4211 00b4 6874     		strb	r0, [r5, #17]
2303:.\sd/ff.c     **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 4212              		.loc 1 2303 0
 4213 00b6 0023     		mov	r3, #0
 4214 00b8 EB72     		strb	r3, [r5, #11]
2304:.\sd/ff.c     **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 4215              		.loc 1 2304 0
 4216 00ba 2B77     		strb	r3, [r5, #28]
 4217 00bc 6B77     		strb	r3, [r5, #29]
 4218 00be AB77     		strb	r3, [r5, #30]
 4219 00c0 EB77     		strb	r3, [r5, #31]
2305:.\sd/ff.c     **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 4220              		.loc 1 2305 0
 4221 00c2 697D     		ldrb	r1, [r5, #21]
 4222 00c4 0902     		lsl	r1, r1, #8
 4223 00c6 2A7D     		ldrb	r2, [r5, #20]
 4224 00c8 1143     		orr	r1, r2
 4225 00ca 0904     		lsl	r1, r1, #16
 4226 00cc EA7E     		ldrb	r2, [r5, #27]
 4227 00ce 1202     		lsl	r2, r2, #8
 4228 00d0 A87E     		ldrb	r0, [r5, #26]
 4229 00d2 0243     		orr	r2, r0
 4230 00d4 1143     		orr	r1, r2
 4231 00d6 8846     		mov	r8, r1
 4232              	.LVL599:
2306:.\sd/ff.c     **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
 4233              		.loc 1 2306 0
 4234 00d8 AB76     		strb	r3, [r5, #26]
 4235 00da EB76     		strb	r3, [r5, #27]
 4236 00dc 2B75     		strb	r3, [r5, #20]
 4237 00de 6B75     		strb	r3, [r5, #21]
2307:.\sd/ff.c     **** 			dj.fs->wflag = 1;
 4238              		.loc 1 2307 0
 4239 00e0 0598     		ldr	r0, [sp, #20]
 4240 00e2 0123     		mov	r3, #1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 124


 4241 00e4 0371     		strb	r3, [r0, #4]
2308:.\sd/ff.c     **** 			if (cl) {							/* Remove the cluster chain if exist */
 4242              		.loc 1 2308 0
 4243 00e6 0029     		cmp	r1, #0
 4244 00e8 1CD0     		beq	.L317
2309:.\sd/ff.c     **** 				dw = dj.fs->winsect;
 4245              		.loc 1 2309 0
 4246 00ea C36A     		ldr	r3, [r0, #44]
 4247 00ec 9946     		mov	r9, r3
 4248              	.LVL600:
2310:.\sd/ff.c     **** 				res = remove_chain(dj.fs, cl);
 4249              		.loc 1 2310 0
 4250 00ee FFF7FEFF 		bl	remove_chain
 4251              	.LVL601:
 4252 00f2 041E     		sub	r4, r0, #0
 4253              	.LVL602:
2311:.\sd/ff.c     **** 				if (res == FR_OK) {
 4254              		.loc 1 2311 0
 4255 00f4 16D1     		bne	.L317
2312:.\sd/ff.c     **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 4256              		.loc 1 2312 0
 4257 00f6 0598     		ldr	r0, [sp, #20]
 4258              	.LVL603:
 4259 00f8 4346     		mov	r3, r8
 4260 00fa 013B     		sub	r3, r3, #1
 4261 00fc C360     		str	r3, [r0, #12]
2313:.\sd/ff.c     **** 					res = move_window(dj.fs, dw);
 4262              		.loc 1 2313 0
 4263 00fe 4946     		mov	r1, r9
 4264 0100 FFF7FEFF 		bl	move_window
 4265              	.LVL604:
 4266 0104 041C     		mov	r4, r0
 4267              	.LVL605:
 4268 0106 0DE0     		b	.L317
 4269              	.LVL606:
 4270              	.L312:
 4271              	.LBE5:
2314:.\sd/ff.c     **** 				}
2315:.\sd/ff.c     **** 			}
2316:.\sd/ff.c     **** 		}
2317:.\sd/ff.c     **** 	}
2318:.\sd/ff.c     **** 	else {	/* Open an existing file */
2319:.\sd/ff.c     **** 		if (res == FR_OK) {						/* Follow succeeded */
 4272              		.loc 1 2319 0
 4273 0108 002C     		cmp	r4, #0
 4274 010a 0BD1     		bne	.L317
2320:.\sd/ff.c     **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 4275              		.loc 1 2320 0
 4276 010c EB7A     		ldrb	r3, [r5, #11]
 4277 010e DA06     		lsl	r2, r3, #27
 4278 0110 05D4     		bmi	.L325
2321:.\sd/ff.c     **** 				res = FR_NO_FILE;
2322:.\sd/ff.c     **** 			} else {
2323:.\sd/ff.c     **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 4279              		.loc 1 2323 0
 4280 0112 4246     		mov	r2, r8
 4281 0114 9207     		lsl	r2, r2, #30
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 125


 4282 0116 05D5     		bpl	.L317
 4283              		.loc 1 2323 0 is_stmt 0 discriminator 1
 4284 0118 DA07     		lsl	r2, r3, #31
 4285 011a 02D4     		bmi	.L326
 4286 011c 02E0     		b	.L317
 4287              	.L325:
2321:.\sd/ff.c     **** 				res = FR_NO_FILE;
 4288              		.loc 1 2321 0 is_stmt 1
 4289 011e 0424     		mov	r4, #4
 4290              	.LVL607:
 4291 0120 00E0     		b	.L317
 4292              	.LVL608:
 4293              	.L326:
2324:.\sd/ff.c     **** 					res = FR_DENIED;
 4294              		.loc 1 2324 0
 4295 0122 0724     		mov	r4, #7
 4296              	.LVL609:
 4297              	.L317:
2325:.\sd/ff.c     **** 			}
2326:.\sd/ff.c     **** 		}
2327:.\sd/ff.c     **** 	}
2328:.\sd/ff.c     **** 	if (res == FR_OK) {
 4298              		.loc 1 2328 0
 4299 0124 002C     		cmp	r4, #0
 4300 0126 13D1     		bne	.L318
2329:.\sd/ff.c     **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 4301              		.loc 1 2329 0
 4302 0128 3B07     		lsl	r3, r7, #28
 4303 012a 01D5     		bpl	.L319
2330:.\sd/ff.c     **** 			mode |= FA__WRITTEN;
 4304              		.loc 1 2330 0
 4305 012c 2023     		mov	r3, #32
 4306 012e 1F43     		orr	r7, r3
 4307              	.LVL610:
 4308              	.L319:
2331:.\sd/ff.c     **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 4309              		.loc 1 2331 0
 4310 0130 059B     		ldr	r3, [sp, #20]
 4311 0132 DB6A     		ldr	r3, [r3, #44]
 4312 0134 F361     		str	r3, [r6, #28]
2332:.\sd/ff.c     **** 		fp->dir_ptr = dir;
 4313              		.loc 1 2332 0
 4314 0136 3562     		str	r5, [r6, #32]
2333:.\sd/ff.c     **** #if _FS_SHARE
2334:.\sd/ff.c     **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 4315              		.loc 1 2334 0
 4316 0138 0123     		mov	r3, #1
 4317 013a 391C     		mov	r1, r7
 4318 013c 9943     		bic	r1, r3
 4319 013e 4B1E     		sub	r3, r1, #1
 4320 0140 9941     		sbc	r1, r1, r3
 4321 0142 05A8     		add	r0, sp, #20
 4322 0144 FFF7FEFF 		bl	inc_lock
 4323              	.LVL611:
 4324 0148 7062     		str	r0, [r6, #36]
2335:.\sd/ff.c     **** 		if (!fp->lockid) res = FR_INT_ERR;
 4325              		.loc 1 2335 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 126


 4326 014a 0028     		cmp	r0, #0
 4327 014c 00D1     		bne	.L318
 4328 014e 0224     		mov	r4, #2
 4329              	.LVL612:
 4330              	.L318:
2336:.\sd/ff.c     **** #endif
2337:.\sd/ff.c     **** 	}
2338:.\sd/ff.c     **** 
2339:.\sd/ff.c     **** #else				/* R/O configuration */
2340:.\sd/ff.c     **** 	if (res == FR_OK) {					/* Follow succeeded */
2341:.\sd/ff.c     **** 		if (!dir) {						/* Current dir itself */
2342:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
2343:.\sd/ff.c     **** 		} else {
2344:.\sd/ff.c     **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2345:.\sd/ff.c     **** 				res = FR_NO_FILE;
2346:.\sd/ff.c     **** 		}
2347:.\sd/ff.c     **** 	}
2348:.\sd/ff.c     **** #endif
2349:.\sd/ff.c     **** 	FREE_BUF();
2350:.\sd/ff.c     **** 
2351:.\sd/ff.c     **** 	if (res == FR_OK) {
 4331              		.loc 1 2351 0
 4332 0150 002C     		cmp	r4, #0
 4333 0152 1DD1     		bne	.L320
2352:.\sd/ff.c     **** 		fp->flag = mode;					/* File access mode */
 4334              		.loc 1 2352 0
 4335 0154 B771     		strb	r7, [r6, #6]
2353:.\sd/ff.c     **** 		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 4336              		.loc 1 2353 0
 4337 0156 6A7D     		ldrb	r2, [r5, #21]
 4338 0158 1202     		lsl	r2, r2, #8
 4339 015a 297D     		ldrb	r1, [r5, #20]
 4340 015c 0A43     		orr	r2, r1
 4341 015e 1204     		lsl	r2, r2, #16
 4342 0160 EB7E     		ldrb	r3, [r5, #27]
 4343 0162 1B02     		lsl	r3, r3, #8
 4344 0164 A97E     		ldrb	r1, [r5, #26]
 4345 0166 0B43     		orr	r3, r1
 4346 0168 1343     		orr	r3, r2
 4347 016a 3361     		str	r3, [r6, #16]
2354:.\sd/ff.c     **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4348              		.loc 1 2354 0
 4349 016c EA7F     		ldrb	r2, [r5, #31]
 4350 016e 1206     		lsl	r2, r2, #24
 4351 0170 AB7F     		ldrb	r3, [r5, #30]
 4352 0172 1B04     		lsl	r3, r3, #16
 4353 0174 1343     		orr	r3, r2
 4354 0176 6A7F     		ldrb	r2, [r5, #29]
 4355 0178 1202     		lsl	r2, r2, #8
 4356 017a 1343     		orr	r3, r2
 4357 017c 2A7F     		ldrb	r2, [r5, #28]
 4358 017e 1343     		orr	r3, r2
 4359 0180 F360     		str	r3, [r6, #12]
2355:.\sd/ff.c     **** 		fp->fptr = 0;						/* File pointer */
 4360              		.loc 1 2355 0
 4361 0182 0023     		mov	r3, #0
 4362 0184 B360     		str	r3, [r6, #8]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 127


2356:.\sd/ff.c     **** 		fp->dsect = 0;
 4363              		.loc 1 2356 0
 4364 0186 B361     		str	r3, [r6, #24]
2357:.\sd/ff.c     **** #if _USE_FASTSEEK
2358:.\sd/ff.c     **** 		fp->cltbl = 0;						/* Normal seek mode */
2359:.\sd/ff.c     **** #endif
2360:.\sd/ff.c     **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 4365              		.loc 1 2360 0
 4366 0188 059B     		ldr	r3, [sp, #20]
 4367 018a 3360     		str	r3, [r6]
 4368 018c DB88     		ldrh	r3, [r3, #6]
 4369 018e B380     		strh	r3, [r6, #4]
 4370              	.L320:
2361:.\sd/ff.c     **** 	}
2362:.\sd/ff.c     **** 
2363:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
2364:.\sd/ff.c     **** }
 4371              		.loc 1 2364 0
 4372 0190 201C     		mov	r0, r4
 4373 0192 0DB0     		add	sp, sp, #52
 4374              		@ sp needed
 4375              	.LVL613:
 4376              	.LVL614:
 4377              	.LVL615:
 4378              	.LVL616:
 4379 0194 0CBC     		pop	{r2, r3}
 4380 0196 9046     		mov	r8, r2
 4381 0198 9946     		mov	r9, r3
 4382 019a F0BD     		pop	{r4, r5, r6, r7, pc}
 4383              		.cfi_endproc
 4384              	.LFE29:
 4385              		.size	f_open, .-f_open
 4386              		.section	.text.f_read,"ax",%progbits
 4387              		.align	2
 4388              		.global	f_read
 4389              		.code	16
 4390              		.thumb_func
 4391              		.type	f_read, %function
 4392              	f_read:
 4393              	.LFB30:
2365:.\sd/ff.c     **** 
2366:.\sd/ff.c     **** 
2367:.\sd/ff.c     **** 
2368:.\sd/ff.c     **** 
2369:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2370:.\sd/ff.c     **** /* Read File                                                             */
2371:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2372:.\sd/ff.c     **** 
2373:.\sd/ff.c     **** FRESULT f_read (
2374:.\sd/ff.c     **** 	FIL *fp, 		/* Pointer to the file object */
2375:.\sd/ff.c     **** 	void *buff,		/* Pointer to data buffer */
2376:.\sd/ff.c     **** 	UINT btr,		/* Number of bytes to read */
2377:.\sd/ff.c     **** 	UINT *br		/* Pointer to number of bytes read */
2378:.\sd/ff.c     **** )
2379:.\sd/ff.c     **** {
 4394              		.loc 1 2379 0
 4395              		.cfi_startproc
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 128


 4396              	.LVL617:
 4397 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4398              		.cfi_def_cfa_offset 20
 4399              		.cfi_offset 4, -20
 4400              		.cfi_offset 5, -16
 4401              		.cfi_offset 6, -12
 4402              		.cfi_offset 7, -8
 4403              		.cfi_offset 14, -4
 4404 0002 5F46     		mov	r7, fp
 4405 0004 5646     		mov	r6, r10
 4406 0006 4D46     		mov	r5, r9
 4407 0008 4446     		mov	r4, r8
 4408 000a F0B4     		push	{r4, r5, r6, r7}
 4409              		.cfi_def_cfa_offset 36
 4410              		.cfi_offset 8, -36
 4411              		.cfi_offset 9, -32
 4412              		.cfi_offset 10, -28
 4413              		.cfi_offset 11, -24
 4414 000c 83B0     		sub	sp, sp, #12
 4415              		.cfi_def_cfa_offset 48
 4416 000e 041C     		mov	r4, r0
 4417 0010 0F1C     		mov	r7, r1
 4418 0012 9046     		mov	r8, r2
 4419 0014 1E1C     		mov	r6, r3
 4420              	.LVL618:
2380:.\sd/ff.c     **** 	FRESULT res;
2381:.\sd/ff.c     **** 	DWORD clst, sect, remain;
2382:.\sd/ff.c     **** 	UINT rcnt, cc;
2383:.\sd/ff.c     **** 	BYTE csect, *rbuff = buff;
2384:.\sd/ff.c     **** 
2385:.\sd/ff.c     **** 
2386:.\sd/ff.c     **** 	*br = 0;	/* Initialize byte counter */
 4421              		.loc 1 2386 0
 4422 0016 0023     		mov	r3, #0
 4423              	.LVL619:
 4424 0018 3360     		str	r3, [r6]
2387:.\sd/ff.c     **** 
2388:.\sd/ff.c     **** 	res = validate(fp->fs, fp->id);				/* Check validity */
 4425              		.loc 1 2388 0
 4426 001a 8188     		ldrh	r1, [r0, #4]
 4427              	.LVL620:
 4428 001c 0068     		ldr	r0, [r0]
 4429              	.LVL621:
 4430 001e FFF7FEFF 		bl	validate
 4431              	.LVL622:
2389:.\sd/ff.c     **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4432              		.loc 1 2389 0
 4433 0022 0028     		cmp	r0, #0
 4434 0024 00D0     		beq	.LCB4965
 4435 0026 B4E0     		b	.L329	@long jump
 4436              	.LCB4965:
2390:.\sd/ff.c     **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 4437              		.loc 1 2390 0
 4438 0028 A379     		ldrb	r3, [r4, #6]
 4439 002a 5AB2     		sxtb	r2, r3
 4440 002c 002A     		cmp	r2, #0
 4441 002e 00DA     		bge	.LCB4970
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 129


 4442 0030 ACE0     		b	.L348	@long jump
 4443              	.LCB4970:
2391:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2392:.\sd/ff.c     **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 4444              		.loc 1 2392 0
 4445 0032 D807     		lsl	r0, r3, #31
 4446 0034 00D4     		bmi	.LCB4975
 4447 0036 ABE0     		b	.L349	@long jump
 4448              	.LCB4975:
 4449              	.LVL623:
2393:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_DENIED);
2394:.\sd/ff.c     **** 	remain = fp->fsize - fp->fptr;
 4450              		.loc 1 2394 0
 4451 0038 E568     		ldr	r5, [r4, #12]
 4452 003a A068     		ldr	r0, [r4, #8]
 4453 003c 2D1A     		sub	r5, r5, r0
 4454 003e 0195     		str	r5, [sp, #4]
 4455              	.LVL624:
2395:.\sd/ff.c     **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4456              		.loc 1 2395 0
 4457 0040 A845     		cmp	r8, r5
 4458 0042 00D9     		bls	.LCB4985
 4459 0044 9CE0     		b	.L351	@long jump
 4460              	.LCB4985:
 4461 0046 4546     		mov	r5, r8
 4462              	.LVL625:
 4463 0048 0195     		str	r5, [sp, #4]
 4464              	.LVL626:
 4465 004a 99E0     		b	.L351
 4466              	.LVL627:
 4467              	.L346:
2396:.\sd/ff.c     **** 
2397:.\sd/ff.c     **** 	for ( ;  btr;								/* Repeat until all data read */
2398:.\sd/ff.c     **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2399:.\sd/ff.c     **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 4468              		.loc 1 2399 0
 4469 004c A368     		ldr	r3, [r4, #8]
 4470 004e DA05     		lsl	r2, r3, #23
 4471 0050 67D1     		bne	.L332
2400:.\sd/ff.c     **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4472              		.loc 1 2400 0
 4473 0052 5A0A     		lsr	r2, r3, #9
 4474 0054 2068     		ldr	r0, [r4]
 4475 0056 8178     		ldrb	r1, [r0, #2]
 4476 0058 0139     		sub	r1, r1, #1
 4477 005a C9B2     		uxtb	r1, r1
 4478 005c 0A40     		and	r2, r1
 4479 005e 9046     		mov	r8, r2
 4480              	.LVL628:
2401:.\sd/ff.c     **** 			if (!csect) {						/* On the cluster boundary? */
 4481              		.loc 1 2401 0
 4482 0060 19D1     		bne	.L333
2402:.\sd/ff.c     **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 4483              		.loc 1 2402 0
 4484 0062 002B     		cmp	r3, #0
 4485 0064 01D1     		bne	.L334
2403:.\sd/ff.c     **** 					clst = fp->sclust;			/* Follow from the origin */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 130


 4486              		.loc 1 2403 0
 4487 0066 2069     		ldr	r0, [r4, #16]
 4488              	.LVL629:
 4489 0068 02E0     		b	.L335
 4490              	.LVL630:
 4491              	.L334:
2404:.\sd/ff.c     **** 				} else {						/* Middle or end of the file */
2405:.\sd/ff.c     **** #if _USE_FASTSEEK
2406:.\sd/ff.c     **** 					if (fp->cltbl)
2407:.\sd/ff.c     **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2408:.\sd/ff.c     **** 					else
2409:.\sd/ff.c     **** #endif
2410:.\sd/ff.c     **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 4492              		.loc 1 2410 0
 4493 006a 6169     		ldr	r1, [r4, #20]
 4494 006c FFF7FEFF 		bl	get_fat
 4495              	.LVL631:
 4496              	.L335:
2411:.\sd/ff.c     **** 				}
2412:.\sd/ff.c     **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 4497              		.loc 1 2412 0
 4498 0070 0128     		cmp	r0, #1
 4499 0072 06D8     		bhi	.L336
 4500              		.loc 1 2412 0 is_stmt 0 discriminator 1
 4501 0074 A279     		ldrb	r2, [r4, #6]
 4502 0076 8023     		mov	r3, #128
 4503 0078 5B42     		neg	r3, r3
 4504 007a 1343     		orr	r3, r2
 4505 007c A371     		strb	r3, [r4, #6]
 4506 007e 0220     		mov	r0, #2
 4507              	.LVL632:
 4508 0080 87E0     		b	.L329
 4509              	.LVL633:
 4510              	.L336:
2413:.\sd/ff.c     **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4511              		.loc 1 2413 0 is_stmt 1
 4512 0082 411C     		add	r1, r0, #1
 4513 0084 06D1     		bne	.L337
 4514              		.loc 1 2413 0 is_stmt 0 discriminator 1
 4515 0086 A279     		ldrb	r2, [r4, #6]
 4516 0088 8023     		mov	r3, #128
 4517 008a 5B42     		neg	r3, r3
 4518 008c 1343     		orr	r3, r2
 4519 008e A371     		strb	r3, [r4, #6]
 4520 0090 0120     		mov	r0, #1
 4521              	.LVL634:
 4522 0092 7EE0     		b	.L329
 4523              	.LVL635:
 4524              	.L337:
2414:.\sd/ff.c     **** 				fp->clust = clst;				/* Update current cluster */
 4525              		.loc 1 2414 0 is_stmt 1
 4526 0094 6061     		str	r0, [r4, #20]
 4527              	.LVL636:
 4528              	.L333:
2415:.\sd/ff.c     **** 			}
2416:.\sd/ff.c     **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 4529              		.loc 1 2416 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 131


 4530 0096 2268     		ldr	r2, [r4]
 4531 0098 9246     		mov	r10, r2
 4532 009a 101C     		mov	r0, r2
 4533 009c 6169     		ldr	r1, [r4, #20]
 4534 009e FFF7FEFF 		bl	clust2sect
 4535              	.LVL637:
2417:.\sd/ff.c     **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4536              		.loc 1 2417 0
 4537 00a2 0028     		cmp	r0, #0
 4538 00a4 06D1     		bne	.L338
 4539              		.loc 1 2417 0 is_stmt 0 discriminator 1
 4540 00a6 A279     		ldrb	r2, [r4, #6]
 4541 00a8 8023     		mov	r3, #128
 4542 00aa 5B42     		neg	r3, r3
 4543 00ac 1343     		orr	r3, r2
 4544 00ae A371     		strb	r3, [r4, #6]
 4545 00b0 0220     		mov	r0, #2
 4546              	.LVL638:
 4547 00b2 6EE0     		b	.L329
 4548              	.LVL639:
 4549              	.L338:
2418:.\sd/ff.c     **** 			sect += csect;
 4550              		.loc 1 2418 0 is_stmt 1
 4551 00b4 8346     		mov	fp, r0
 4552 00b6 C344     		add	fp, fp, r8
 4553              	.LVL640:
2419:.\sd/ff.c     **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 4554              		.loc 1 2419 0
 4555 00b8 019D     		ldr	r5, [sp, #4]
 4556              	.LVL641:
 4557 00ba 6D0A     		lsr	r5, r5, #9
 4558 00bc A946     		mov	r9, r5
 4559              	.LVL642:
2420:.\sd/ff.c     **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 4560              		.loc 1 2420 0
 4561 00be 2ED0     		beq	.L339
2421:.\sd/ff.c     **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4562              		.loc 1 2421 0
 4563 00c0 4046     		mov	r0, r8
 4564 00c2 4246     		mov	r2, r8
 4565 00c4 4A44     		add	r2, r2, r9
 4566 00c6 5146     		mov	r1, r10
 4567 00c8 8B78     		ldrb	r3, [r1, #2]
 4568 00ca 9A42     		cmp	r2, r3
 4569 00cc 01D9     		bls	.L340
 4570              	.LVL643:
2422:.\sd/ff.c     **** 					cc = fp->fs->csize - csect;
 4571              		.loc 1 2422 0
 4572 00ce 1A1A     		sub	r2, r3, r0
 4573 00d0 9146     		mov	r9, r2
 4574              	.LVL644:
 4575              	.L340:
2423:.\sd/ff.c     **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 4576              		.loc 1 2423 0
 4577 00d2 5346     		mov	r3, r10
 4578 00d4 5878     		ldrb	r0, [r3, #1]
 4579              	.LVL645:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 132


 4580 00d6 391C     		mov	r1, r7
 4581 00d8 5A46     		mov	r2, fp
 4582 00da FF23     		mov	r3, #255
 4583 00dc 4D46     		mov	r5, r9
 4584 00de 2B40     		and	r3, r5
 4585 00e0 FFF7FEFF 		bl	disk_read
 4586              	.LVL646:
 4587 00e4 0028     		cmp	r0, #0
 4588 00e6 06D0     		beq	.L341
 4589              	.LVL647:
2424:.\sd/ff.c     **** 					ABORT(fp->fs, FR_DISK_ERR);
 4590              		.loc 1 2424 0
 4591 00e8 A279     		ldrb	r2, [r4, #6]
 4592 00ea 8023     		mov	r3, #128
 4593 00ec 5B42     		neg	r3, r3
 4594 00ee 1343     		orr	r3, r2
 4595 00f0 A371     		strb	r3, [r4, #6]
 4596 00f2 0120     		mov	r0, #1
 4597 00f4 4DE0     		b	.L329
 4598              	.L341:
2425:.\sd/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2426:.\sd/ff.c     **** #if _FS_TINY
2427:.\sd/ff.c     **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 4599              		.loc 1 2427 0
 4600 00f6 2168     		ldr	r1, [r4]
 4601 00f8 0B79     		ldrb	r3, [r1, #4]
 4602 00fa 002B     		cmp	r3, #0
 4603 00fc 0BD0     		beq	.L342
 4604              		.loc 1 2427 0 is_stmt 0 discriminator 1
 4605 00fe C86A     		ldr	r0, [r1, #44]
 4606 0100 5A46     		mov	r2, fp
 4607 0102 831A     		sub	r3, r0, r2
 4608 0104 4B45     		cmp	r3, r9
 4609 0106 06D2     		bcs	.L342
 4610              	.LVL648:
2428:.\sd/ff.c     **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
 4611              		.loc 1 2428 0 is_stmt 1
 4612 0108 5B02     		lsl	r3, r3, #9
 4613 010a 3031     		add	r1, r1, #48
 4614 010c F818     		add	r0, r7, r3
 4615 010e 8022     		mov	r2, #128
 4616              	.LVL649:
 4617 0110 9200     		lsl	r2, r2, #2
 4618 0112 FFF7FEFF 		bl	mem_cpy
 4619              	.LVL650:
 4620              	.L342:
2429:.\sd/ff.c     **** #else
2430:.\sd/ff.c     **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2431:.\sd/ff.c     **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2432:.\sd/ff.c     **** #endif
2433:.\sd/ff.c     **** #endif
2434:.\sd/ff.c     **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 4621              		.loc 1 2434 0
 4622 0116 4B46     		mov	r3, r9
 4623 0118 5B02     		lsl	r3, r3, #9
 4624 011a 9946     		mov	r9, r3
 4625              	.LVL651:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 133


2435:.\sd/ff.c     **** 				continue;
 4626              		.loc 1 2435 0
 4627 011c 23E0     		b	.L343
 4628              	.LVL652:
 4629              	.L339:
2436:.\sd/ff.c     **** 			}
2437:.\sd/ff.c     **** #if !_FS_TINY
2438:.\sd/ff.c     **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2439:.\sd/ff.c     **** #if !_FS_READONLY
2440:.\sd/ff.c     **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2441:.\sd/ff.c     **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2442:.\sd/ff.c     **** 						ABORT(fp->fs, FR_DISK_ERR);
2443:.\sd/ff.c     **** 					fp->flag &= ~FA__DIRTY;
2444:.\sd/ff.c     **** 				}
2445:.\sd/ff.c     **** #endif
2446:.\sd/ff.c     **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
2447:.\sd/ff.c     **** 					ABORT(fp->fs, FR_DISK_ERR);
2448:.\sd/ff.c     **** 			}
2449:.\sd/ff.c     **** #endif
2450:.\sd/ff.c     **** 			fp->dsect = sect;
 4630              		.loc 1 2450 0
 4631 011e 5D46     		mov	r5, fp
 4632              	.LVL653:
 4633 0120 A561     		str	r5, [r4, #24]
 4634              	.LVL654:
 4635              	.L332:
2451:.\sd/ff.c     **** 		}
2452:.\sd/ff.c     **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 4636              		.loc 1 2452 0
 4637 0122 A068     		ldr	r0, [r4, #8]
 4638 0124 C305     		lsl	r3, r0, #23
 4639 0126 DB0D     		lsr	r3, r3, #23
 4640 0128 8021     		mov	r1, #128
 4641 012a 8900     		lsl	r1, r1, #2
 4642 012c CB1A     		sub	r3, r1, r3
 4643 012e 9946     		mov	r9, r3
 4644              	.LVL655:
2453:.\sd/ff.c     **** 		if (rcnt > btr) rcnt = btr;
 4645              		.loc 1 2453 0
 4646 0130 019D     		ldr	r5, [sp, #4]
 4647 0132 AB42     		cmp	r3, r5
 4648 0134 00D9     		bls	.L344
 4649 0136 A946     		mov	r9, r5
 4650              	.L344:
 4651              	.LVL656:
2454:.\sd/ff.c     **** #if _FS_TINY
2455:.\sd/ff.c     **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
 4652              		.loc 1 2455 0
 4653 0138 2068     		ldr	r0, [r4]
 4654 013a A169     		ldr	r1, [r4, #24]
 4655 013c FFF7FEFF 		bl	move_window
 4656              	.LVL657:
 4657 0140 0028     		cmp	r0, #0
 4658 0142 06D0     		beq	.L345
2456:.\sd/ff.c     **** 			ABORT(fp->fs, FR_DISK_ERR);
 4659              		.loc 1 2456 0
 4660 0144 A279     		ldrb	r2, [r4, #6]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 134


 4661 0146 8023     		mov	r3, #128
 4662 0148 5B42     		neg	r3, r3
 4663 014a 1343     		orr	r3, r2
 4664 014c A371     		strb	r3, [r4, #6]
 4665 014e 0120     		mov	r0, #1
 4666 0150 1FE0     		b	.L329
 4667              	.L345:
2457:.\sd/ff.c     **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 4668              		.loc 1 2457 0
 4669 0152 A268     		ldr	r2, [r4, #8]
 4670 0154 D105     		lsl	r1, r2, #23
 4671 0156 C90D     		lsr	r1, r1, #23
 4672 0158 3031     		add	r1, r1, #48
 4673 015a 2368     		ldr	r3, [r4]
 4674 015c 5918     		add	r1, r3, r1
 4675 015e 381C     		mov	r0, r7
 4676 0160 4A46     		mov	r2, r9
 4677 0162 FFF7FEFF 		bl	mem_cpy
 4678              	.LVL658:
 4679              	.L343:
2398:.\sd/ff.c     **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4680              		.loc 1 2398 0
 4681 0166 4F44     		add	r7, r7, r9
 4682              	.LVL659:
 4683 0168 A568     		ldr	r5, [r4, #8]
 4684 016a 2B1C     		mov	r3, r5
 4685 016c 4B44     		add	r3, r3, r9
 4686 016e A360     		str	r3, [r4, #8]
 4687 0170 3068     		ldr	r0, [r6]
 4688 0172 031C     		mov	r3, r0
 4689 0174 4B44     		add	r3, r3, r9
 4690 0176 3360     		str	r3, [r6]
 4691 0178 019D     		ldr	r5, [sp, #4]
 4692 017a 4846     		mov	r0, r9
 4693 017c 2D1A     		sub	r5, r5, r0
 4694 017e 0195     		str	r5, [sp, #4]
 4695              	.LVL660:
 4696              	.L351:
2397:.\sd/ff.c     **** 	for ( ;  btr;								/* Repeat until all data read */
 4697              		.loc 1 2397 0 discriminator 1
 4698 0180 019D     		ldr	r5, [sp, #4]
 4699 0182 002D     		cmp	r5, #0
 4700 0184 00D0     		beq	.LCB5270
 4701 0186 61E7     		b	.L346	@long jump
 4702              	.LCB5270:
2458:.\sd/ff.c     **** #else
2459:.\sd/ff.c     **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2460:.\sd/ff.c     **** #endif
2461:.\sd/ff.c     **** 	}
2462:.\sd/ff.c     **** 
2463:.\sd/ff.c     **** 	LEAVE_FF(fp->fs, FR_OK);
 4703              		.loc 1 2463 0
 4704 0188 0020     		mov	r0, #0
 4705 018a 02E0     		b	.L329
 4706              	.LVL661:
 4707              	.L348:
2391:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 135


 4708              		.loc 1 2391 0
 4709 018c 0220     		mov	r0, #2
 4710              	.LVL662:
 4711 018e 00E0     		b	.L329
 4712              	.L349:
2393:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_DENIED);
 4713              		.loc 1 2393 0
 4714 0190 0720     		mov	r0, #7
 4715              	.LVL663:
 4716              	.L329:
2464:.\sd/ff.c     **** }
 4717              		.loc 1 2464 0
 4718 0192 03B0     		add	sp, sp, #12
 4719              		@ sp needed
 4720              	.LVL664:
 4721              	.LVL665:
 4722              	.LVL666:
 4723 0194 3CBC     		pop	{r2, r3, r4, r5}
 4724 0196 9046     		mov	r8, r2
 4725 0198 9946     		mov	r9, r3
 4726 019a A246     		mov	r10, r4
 4727 019c AB46     		mov	fp, r5
 4728 019e F0BD     		pop	{r4, r5, r6, r7, pc}
 4729              		.cfi_endproc
 4730              	.LFE30:
 4731              		.size	f_read, .-f_read
 4732              		.section	.text.f_write,"ax",%progbits
 4733              		.align	2
 4734              		.global	f_write
 4735              		.code	16
 4736              		.thumb_func
 4737              		.type	f_write, %function
 4738              	f_write:
 4739              	.LFB31:
2465:.\sd/ff.c     **** 
2466:.\sd/ff.c     **** 
2467:.\sd/ff.c     **** 
2468:.\sd/ff.c     **** 
2469:.\sd/ff.c     **** #if !_FS_READONLY
2470:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2471:.\sd/ff.c     **** /* Write File                                                            */
2472:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2473:.\sd/ff.c     **** 
2474:.\sd/ff.c     **** FRESULT f_write (
2475:.\sd/ff.c     **** 	FIL *fp,			/* Pointer to the file object */
2476:.\sd/ff.c     **** 	const void *buff,	/* Pointer to the data to be written */
2477:.\sd/ff.c     **** 	UINT btw,			/* Number of bytes to write */
2478:.\sd/ff.c     **** 	UINT *bw			/* Pointer to number of bytes written */
2479:.\sd/ff.c     **** )
2480:.\sd/ff.c     **** {
 4740              		.loc 1 2480 0
 4741              		.cfi_startproc
 4742              	.LVL667:
 4743 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4744              		.cfi_def_cfa_offset 20
 4745              		.cfi_offset 4, -20
 4746              		.cfi_offset 5, -16
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 136


 4747              		.cfi_offset 6, -12
 4748              		.cfi_offset 7, -8
 4749              		.cfi_offset 14, -4
 4750 0002 5F46     		mov	r7, fp
 4751 0004 5646     		mov	r6, r10
 4752 0006 4D46     		mov	r5, r9
 4753 0008 4446     		mov	r4, r8
 4754 000a F0B4     		push	{r4, r5, r6, r7}
 4755              		.cfi_def_cfa_offset 36
 4756              		.cfi_offset 8, -36
 4757              		.cfi_offset 9, -32
 4758              		.cfi_offset 10, -28
 4759              		.cfi_offset 11, -24
 4760 000c 83B0     		sub	sp, sp, #12
 4761              		.cfi_def_cfa_offset 48
 4762 000e 041C     		mov	r4, r0
 4763 0010 0191     		str	r1, [sp, #4]
 4764 0012 151C     		mov	r5, r2
 4765 0014 1E1C     		mov	r6, r3
 4766              	.LVL668:
2481:.\sd/ff.c     **** 	FRESULT res;
2482:.\sd/ff.c     **** 	DWORD clst, sect;
2483:.\sd/ff.c     **** 	UINT wcnt, cc;
2484:.\sd/ff.c     **** 	const BYTE *wbuff = buff;
2485:.\sd/ff.c     **** 	BYTE csect;
2486:.\sd/ff.c     **** 
2487:.\sd/ff.c     **** 
2488:.\sd/ff.c     **** 	*bw = 0;	/* Initialize byte counter */
 4767              		.loc 1 2488 0
 4768 0016 0023     		mov	r3, #0
 4769              	.LVL669:
 4770 0018 3360     		str	r3, [r6]
2489:.\sd/ff.c     **** 
2490:.\sd/ff.c     **** 	res = validate(fp->fs, fp->id);			/* Check validity */
 4771              		.loc 1 2490 0
 4772 001a 8188     		ldrh	r1, [r0, #4]
 4773              	.LVL670:
 4774 001c 0068     		ldr	r0, [r0]
 4775              	.LVL671:
 4776 001e FFF7FEFF 		bl	validate
 4777              	.LVL672:
2491:.\sd/ff.c     **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4778              		.loc 1 2491 0
 4779 0022 0028     		cmp	r0, #0
 4780 0024 00D0     		beq	.LCB5360
 4781 0026 EDE0     		b	.L353	@long jump
 4782              	.LCB5360:
2492:.\sd/ff.c     **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 4783              		.loc 1 2492 0
 4784 0028 A379     		ldrb	r3, [r4, #6]
 4785 002a 5AB2     		sxtb	r2, r3
 4786 002c 002A     		cmp	r2, #0
 4787 002e 00DA     		bge	.LCB5365
 4788 0030 E5E0     		b	.L377	@long jump
 4789              	.LCB5365:
2493:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2494:.\sd/ff.c     **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 137


 4790              		.loc 1 2494 0
 4791 0032 9907     		lsl	r1, r3, #30
 4792 0034 00D4     		bmi	.LCB5370
 4793 0036 E4E0     		b	.L378	@long jump
 4794              	.LCB5370:
2495:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_DENIED);
2496:.\sd/ff.c     **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 4795              		.loc 1 2496 0
 4796 0038 E368     		ldr	r3, [r4, #12]
 4797 003a 5A19     		add	r2, r3, r5
 4798 003c 9342     		cmp	r3, r2
 4799 003e 00D8     		bhi	.LCB5374
 4800 0040 CFE0     		b	.L381	@long jump
 4801              	.LCB5374:
 4802 0042 0025     		mov	r5, #0
 4803              	.LVL673:
 4804 0044 CDE0     		b	.L381
 4805              	.LVL674:
 4806              	.L374:
2497:.\sd/ff.c     **** 
2498:.\sd/ff.c     **** 	for ( ;  btw;							/* Repeat until all data written */
2499:.\sd/ff.c     **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2500:.\sd/ff.c     **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 4807              		.loc 1 2500 0
 4808 0046 A368     		ldr	r3, [r4, #8]
 4809 0048 DA05     		lsl	r2, r3, #23
 4810 004a 00D0     		beq	.LCB5389
 4811 004c 97E0     		b	.L356	@long jump
 4812              	.LCB5389:
2501:.\sd/ff.c     **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4813              		.loc 1 2501 0
 4814 004e 5A0A     		lsr	r2, r3, #9
 4815 0050 2068     		ldr	r0, [r4]
 4816 0052 8178     		ldrb	r1, [r0, #2]
 4817 0054 0139     		sub	r1, r1, #1
 4818 0056 C9B2     		uxtb	r1, r1
 4819 0058 0A40     		and	r2, r1
 4820 005a 9146     		mov	r9, r2
 4821              	.LVL675:
2502:.\sd/ff.c     **** 			if (!csect) {					/* On the cluster boundary? */
 4822              		.loc 1 2502 0
 4823 005c 24D1     		bne	.L357
2503:.\sd/ff.c     **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 4824              		.loc 1 2503 0
 4825 005e 002B     		cmp	r3, #0
 4826 0060 08D1     		bne	.L358
2504:.\sd/ff.c     **** 					clst = fp->sclust;		/* Follow from the origin */
 4827              		.loc 1 2504 0
 4828 0062 2369     		ldr	r3, [r4, #16]
 4829              	.LVL676:
2505:.\sd/ff.c     **** 					if (clst == 0)			/* When no cluster is allocated, */
 4830              		.loc 1 2505 0
 4831 0064 002B     		cmp	r3, #0
 4832 0066 09D1     		bne	.L359
2506:.\sd/ff.c     **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 4833              		.loc 1 2506 0
 4834 0068 0021     		mov	r1, #0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 138


 4835 006a FFF7FEFF 		bl	create_chain
 4836              	.LVL677:
 4837 006e 031C     		mov	r3, r0
 4838              	.LVL678:
 4839 0070 2061     		str	r0, [r4, #16]
 4840 0072 03E0     		b	.L359
 4841              	.LVL679:
 4842              	.L358:
2507:.\sd/ff.c     **** 				} else {					/* Middle or end of the file */
2508:.\sd/ff.c     **** #if _USE_FASTSEEK
2509:.\sd/ff.c     **** 					if (fp->cltbl)
2510:.\sd/ff.c     **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2511:.\sd/ff.c     **** 					else
2512:.\sd/ff.c     **** #endif
2513:.\sd/ff.c     **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 4843              		.loc 1 2513 0
 4844 0074 6169     		ldr	r1, [r4, #20]
 4845 0076 FFF7FEFF 		bl	create_chain
 4846              	.LVL680:
 4847 007a 031C     		mov	r3, r0
 4848              	.LVL681:
 4849              	.L359:
2514:.\sd/ff.c     **** 				}
2515:.\sd/ff.c     **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 4850              		.loc 1 2515 0
 4851 007c 002B     		cmp	r3, #0
 4852 007e 00D1     		bne	.LCB5435
 4853 0080 B2E0     		b	.L360	@long jump
 4854              	.LCB5435:
2516:.\sd/ff.c     **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4855              		.loc 1 2516 0
 4856 0082 012B     		cmp	r3, #1
 4857 0084 06D1     		bne	.L361
 4858              		.loc 1 2516 0 is_stmt 0 discriminator 1
 4859 0086 A279     		ldrb	r2, [r4, #6]
 4860 0088 8023     		mov	r3, #128
 4861              	.LVL682:
 4862 008a 5B42     		neg	r3, r3
 4863 008c 1343     		orr	r3, r2
 4864 008e A371     		strb	r3, [r4, #6]
 4865 0090 0220     		mov	r0, #2
 4866 0092 B7E0     		b	.L353
 4867              	.LVL683:
 4868              	.L361:
2517:.\sd/ff.c     **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4869              		.loc 1 2517 0 is_stmt 1
 4870 0094 5A1C     		add	r2, r3, #1
 4871 0096 06D1     		bne	.L362
 4872              		.loc 1 2517 0 is_stmt 0 discriminator 1
 4873 0098 A279     		ldrb	r2, [r4, #6]
 4874 009a 8023     		mov	r3, #128
 4875              	.LVL684:
 4876 009c 5B42     		neg	r3, r3
 4877 009e 1343     		orr	r3, r2
 4878 00a0 A371     		strb	r3, [r4, #6]
 4879 00a2 0120     		mov	r0, #1
 4880 00a4 AEE0     		b	.L353
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 139


 4881              	.LVL685:
 4882              	.L362:
2518:.\sd/ff.c     **** 				fp->clust = clst;			/* Update current cluster */
 4883              		.loc 1 2518 0 is_stmt 1
 4884 00a6 6361     		str	r3, [r4, #20]
 4885              	.LVL686:
 4886              	.L357:
2519:.\sd/ff.c     **** 			}
2520:.\sd/ff.c     **** #if _FS_TINY
2521:.\sd/ff.c     **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
 4887              		.loc 1 2521 0
 4888 00a8 2068     		ldr	r0, [r4]
 4889 00aa C36A     		ldr	r3, [r0, #44]
 4890 00ac A769     		ldr	r7, [r4, #24]
 4891 00ae BB42     		cmp	r3, r7
 4892 00b0 0BD1     		bne	.L363
 4893              		.loc 1 2521 0 is_stmt 0 discriminator 1
 4894 00b2 0021     		mov	r1, #0
 4895 00b4 FFF7FEFF 		bl	move_window
 4896              	.LVL687:
 4897 00b8 0028     		cmp	r0, #0
 4898 00ba 06D0     		beq	.L363
2522:.\sd/ff.c     **** 				ABORT(fp->fs, FR_DISK_ERR);
 4899              		.loc 1 2522 0 is_stmt 1
 4900 00bc A279     		ldrb	r2, [r4, #6]
 4901 00be 8023     		mov	r3, #128
 4902 00c0 5B42     		neg	r3, r3
 4903 00c2 1343     		orr	r3, r2
 4904 00c4 A371     		strb	r3, [r4, #6]
 4905 00c6 0120     		mov	r0, #1
 4906 00c8 9CE0     		b	.L353
 4907              	.L363:
2523:.\sd/ff.c     **** #else
2524:.\sd/ff.c     **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2525:.\sd/ff.c     **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2526:.\sd/ff.c     **** 					ABORT(fp->fs, FR_DISK_ERR);
2527:.\sd/ff.c     **** 				fp->flag &= ~FA__DIRTY;
2528:.\sd/ff.c     **** 			}
2529:.\sd/ff.c     **** #endif
2530:.\sd/ff.c     **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 4908              		.loc 1 2530 0
 4909 00ca 2168     		ldr	r1, [r4]
 4910 00cc 8A46     		mov	r10, r1
 4911 00ce 081C     		mov	r0, r1
 4912 00d0 6169     		ldr	r1, [r4, #20]
 4913 00d2 FFF7FEFF 		bl	clust2sect
 4914              	.LVL688:
2531:.\sd/ff.c     **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4915              		.loc 1 2531 0
 4916 00d6 0028     		cmp	r0, #0
 4917 00d8 06D1     		bne	.L364
 4918              		.loc 1 2531 0 is_stmt 0 discriminator 1
 4919 00da A279     		ldrb	r2, [r4, #6]
 4920 00dc 8023     		mov	r3, #128
 4921 00de 5B42     		neg	r3, r3
 4922 00e0 1343     		orr	r3, r2
 4923 00e2 A371     		strb	r3, [r4, #6]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 140


 4924 00e4 0220     		mov	r0, #2
 4925              	.LVL689:
 4926 00e6 8DE0     		b	.L353
 4927              	.LVL690:
 4928              	.L364:
2532:.\sd/ff.c     **** 			sect += csect;
 4929              		.loc 1 2532 0 is_stmt 1
 4930 00e8 8346     		mov	fp, r0
 4931 00ea CB44     		add	fp, fp, r9
 4932              	.LVL691:
2533:.\sd/ff.c     **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 4933              		.loc 1 2533 0
 4934 00ec 6B0A     		lsr	r3, r5, #9
 4935 00ee 9846     		mov	r8, r3
 4936              	.LVL692:
2534:.\sd/ff.c     **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 4937              		.loc 1 2534 0
 4938 00f0 2FD0     		beq	.L365
2535:.\sd/ff.c     **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4939              		.loc 1 2535 0
 4940 00f2 4F46     		mov	r7, r9
 4941 00f4 4A46     		mov	r2, r9
 4942 00f6 4244     		add	r2, r2, r8
 4943 00f8 5146     		mov	r1, r10
 4944 00fa 8B78     		ldrb	r3, [r1, #2]
 4945              	.LVL693:
 4946 00fc 9A42     		cmp	r2, r3
 4947 00fe 01D9     		bls	.L366
 4948              	.LVL694:
2536:.\sd/ff.c     **** 					cc = fp->fs->csize - csect;
 4949              		.loc 1 2536 0
 4950 0100 DA1B     		sub	r2, r3, r7
 4951 0102 9046     		mov	r8, r2
 4952              	.LVL695:
 4953              	.L366:
2537:.\sd/ff.c     **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 4954              		.loc 1 2537 0
 4955 0104 5346     		mov	r3, r10
 4956 0106 5878     		ldrb	r0, [r3, #1]
 4957 0108 0199     		ldr	r1, [sp, #4]
 4958 010a 5A46     		mov	r2, fp
 4959 010c FF23     		mov	r3, #255
 4960 010e 4746     		mov	r7, r8
 4961              	.LVL696:
 4962 0110 3B40     		and	r3, r7
 4963 0112 FFF7FEFF 		bl	disk_write
 4964              	.LVL697:
 4965 0116 0028     		cmp	r0, #0
 4966 0118 06D0     		beq	.L367
 4967              	.LVL698:
2538:.\sd/ff.c     **** 					ABORT(fp->fs, FR_DISK_ERR);
 4968              		.loc 1 2538 0
 4969 011a A279     		ldrb	r2, [r4, #6]
 4970 011c 8023     		mov	r3, #128
 4971 011e 5B42     		neg	r3, r3
 4972 0120 1343     		orr	r3, r2
 4973 0122 A371     		strb	r3, [r4, #6]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 141


 4974 0124 0120     		mov	r0, #1
 4975 0126 6DE0     		b	.L353
 4976              	.L367:
2539:.\sd/ff.c     **** #if _FS_TINY
2540:.\sd/ff.c     **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
 4977              		.loc 1 2540 0
 4978 0128 2068     		ldr	r0, [r4]
 4979 012a C16A     		ldr	r1, [r0, #44]
 4980 012c 5A46     		mov	r2, fp
 4981 012e 8B1A     		sub	r3, r1, r2
 4982 0130 4345     		cmp	r3, r8
 4983 0132 0AD2     		bcs	.L368
 4984              	.LVL699:
2541:.\sd/ff.c     **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 4985              		.loc 1 2541 0
 4986 0134 3030     		add	r0, r0, #48
 4987 0136 5B02     		lsl	r3, r3, #9
 4988 0138 019F     		ldr	r7, [sp, #4]
 4989              	.LVL700:
 4990 013a F918     		add	r1, r7, r3
 4991 013c 8022     		mov	r2, #128
 4992              	.LVL701:
 4993 013e 9200     		lsl	r2, r2, #2
 4994 0140 FFF7FEFF 		bl	mem_cpy
 4995              	.LVL702:
2542:.\sd/ff.c     **** 					fp->fs->wflag = 0;
 4996              		.loc 1 2542 0
 4997 0144 0023     		mov	r3, #0
 4998 0146 2168     		ldr	r1, [r4]
 4999 0148 0B71     		strb	r3, [r1, #4]
 5000              	.L368:
2543:.\sd/ff.c     **** 				}
2544:.\sd/ff.c     **** #else
2545:.\sd/ff.c     **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2546:.\sd/ff.c     **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2547:.\sd/ff.c     **** 					fp->flag &= ~FA__DIRTY;
2548:.\sd/ff.c     **** 				}
2549:.\sd/ff.c     **** #endif
2550:.\sd/ff.c     **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 5001              		.loc 1 2550 0
 5002 014a 4246     		mov	r2, r8
 5003 014c 5202     		lsl	r2, r2, #9
 5004 014e 9046     		mov	r8, r2
 5005              	.LVL703:
2551:.\sd/ff.c     **** 				continue;
 5006              		.loc 1 2551 0
 5007 0150 39E0     		b	.L369
 5008              	.LVL704:
 5009              	.L365:
2552:.\sd/ff.c     **** 			}
2553:.\sd/ff.c     **** #if _FS_TINY
2554:.\sd/ff.c     **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 5010              		.loc 1 2554 0
 5011 0152 A368     		ldr	r3, [r4, #8]
 5012              	.LVL705:
 5013 0154 E768     		ldr	r7, [r4, #12]
 5014 0156 BB42     		cmp	r3, r7
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 142


 5015 0158 0FD3     		bcc	.L370
2555:.\sd/ff.c     **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
 5016              		.loc 1 2555 0
 5017 015a 5046     		mov	r0, r10
 5018 015c 0021     		mov	r1, #0
 5019 015e FFF7FEFF 		bl	move_window
 5020              	.LVL706:
 5021 0162 0028     		cmp	r0, #0
 5022 0164 06D0     		beq	.L371
 5023              		.loc 1 2555 0 is_stmt 0 discriminator 1
 5024 0166 A279     		ldrb	r2, [r4, #6]
 5025 0168 8023     		mov	r3, #128
 5026 016a 5B42     		neg	r3, r3
 5027 016c 1343     		orr	r3, r2
 5028 016e A371     		strb	r3, [r4, #6]
 5029 0170 0120     		mov	r0, #1
 5030 0172 47E0     		b	.L353
 5031              	.L371:
2556:.\sd/ff.c     **** 				fp->fs->winsect = sect;
 5032              		.loc 1 2556 0 is_stmt 1
 5033 0174 2368     		ldr	r3, [r4]
 5034 0176 5946     		mov	r1, fp
 5035 0178 D962     		str	r1, [r3, #44]
 5036              	.L370:
2557:.\sd/ff.c     **** 			}
2558:.\sd/ff.c     **** #else
2559:.\sd/ff.c     **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2560:.\sd/ff.c     **** 				if (fp->fptr < fp->fsize &&
2561:.\sd/ff.c     **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2562:.\sd/ff.c     **** 						ABORT(fp->fs, FR_DISK_ERR);
2563:.\sd/ff.c     **** 			}
2564:.\sd/ff.c     **** #endif
2565:.\sd/ff.c     **** 			fp->dsect = sect;
 5037              		.loc 1 2565 0
 5038 017a 5A46     		mov	r2, fp
 5039 017c A261     		str	r2, [r4, #24]
 5040              	.LVL707:
 5041              	.L356:
2566:.\sd/ff.c     **** 		}
2567:.\sd/ff.c     **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 5042              		.loc 1 2567 0
 5043 017e A768     		ldr	r7, [r4, #8]
 5044 0180 FB05     		lsl	r3, r7, #23
 5045 0182 DB0D     		lsr	r3, r3, #23
 5046 0184 8021     		mov	r1, #128
 5047 0186 8900     		lsl	r1, r1, #2
 5048 0188 CB1A     		sub	r3, r1, r3
 5049 018a 9846     		mov	r8, r3
 5050              	.LVL708:
2568:.\sd/ff.c     **** 		if (wcnt > btw) wcnt = btw;
 5051              		.loc 1 2568 0
 5052 018c AB42     		cmp	r3, r5
 5053 018e 00D9     		bls	.L372
 5054 0190 A846     		mov	r8, r5
 5055              	.L372:
 5056              	.LVL709:
2569:.\sd/ff.c     **** #if _FS_TINY
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 143


2570:.\sd/ff.c     **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
 5057              		.loc 1 2570 0
 5058 0192 2068     		ldr	r0, [r4]
 5059 0194 A169     		ldr	r1, [r4, #24]
 5060 0196 FFF7FEFF 		bl	move_window
 5061              	.LVL710:
 5062 019a 0028     		cmp	r0, #0
 5063 019c 06D0     		beq	.L373
2571:.\sd/ff.c     **** 			ABORT(fp->fs, FR_DISK_ERR);
 5064              		.loc 1 2571 0
 5065 019e A279     		ldrb	r2, [r4, #6]
 5066 01a0 8023     		mov	r3, #128
 5067 01a2 5B42     		neg	r3, r3
 5068 01a4 1343     		orr	r3, r2
 5069 01a6 A371     		strb	r3, [r4, #6]
 5070 01a8 0120     		mov	r0, #1
 5071 01aa 2BE0     		b	.L353
 5072              	.L373:
2572:.\sd/ff.c     **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 5073              		.loc 1 2572 0
 5074 01ac A268     		ldr	r2, [r4, #8]
 5075 01ae D005     		lsl	r0, r2, #23
 5076 01b0 C00D     		lsr	r0, r0, #23
 5077 01b2 3030     		add	r0, r0, #48
 5078 01b4 2368     		ldr	r3, [r4]
 5079 01b6 1818     		add	r0, r3, r0
 5080 01b8 0199     		ldr	r1, [sp, #4]
 5081 01ba 4246     		mov	r2, r8
 5082 01bc FFF7FEFF 		bl	mem_cpy
 5083              	.LVL711:
2573:.\sd/ff.c     **** 		fp->fs->wflag = 1;
 5084              		.loc 1 2573 0
 5085 01c0 0121     		mov	r1, #1
 5086 01c2 2768     		ldr	r7, [r4]
 5087 01c4 3971     		strb	r1, [r7, #4]
 5088              	.L369:
2499:.\sd/ff.c     **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 5089              		.loc 1 2499 0
 5090 01c6 019A     		ldr	r2, [sp, #4]
 5091 01c8 171C     		mov	r7, r2
 5092 01ca 4744     		add	r7, r7, r8
 5093 01cc 0197     		str	r7, [sp, #4]
 5094              	.LVL712:
 5095 01ce A168     		ldr	r1, [r4, #8]
 5096 01d0 0B1C     		mov	r3, r1
 5097 01d2 4344     		add	r3, r3, r8
 5098 01d4 A360     		str	r3, [r4, #8]
 5099 01d6 3268     		ldr	r2, [r6]
 5100 01d8 131C     		mov	r3, r2
 5101 01da 4344     		add	r3, r3, r8
 5102 01dc 3360     		str	r3, [r6]
 5103 01de 4346     		mov	r3, r8
 5104 01e0 ED1A     		sub	r5, r5, r3
 5105              	.LVL713:
 5106              	.L381:
2498:.\sd/ff.c     **** 	for ( ;  btw;							/* Repeat until all data written */
 5107              		.loc 1 2498 0 discriminator 1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 144


 5108 01e2 002D     		cmp	r5, #0
 5109 01e4 00D0     		beq	.LCB5730
 5110 01e6 2EE7     		b	.L374	@long jump
 5111              	.LCB5730:
 5112              	.L360:
2574:.\sd/ff.c     **** #else
2575:.\sd/ff.c     **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2576:.\sd/ff.c     **** 		fp->flag |= FA__DIRTY;
2577:.\sd/ff.c     **** #endif
2578:.\sd/ff.c     **** 	}
2579:.\sd/ff.c     **** 
2580:.\sd/ff.c     **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 5113              		.loc 1 2580 0
 5114 01e8 A368     		ldr	r3, [r4, #8]
 5115 01ea E768     		ldr	r7, [r4, #12]
 5116 01ec BB42     		cmp	r3, r7
 5117 01ee 00D9     		bls	.L375
 5118              		.loc 1 2580 0 is_stmt 0 discriminator 1
 5119 01f0 E360     		str	r3, [r4, #12]
 5120              	.L375:
2581:.\sd/ff.c     **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5121              		.loc 1 2581 0 is_stmt 1
 5122 01f2 A279     		ldrb	r2, [r4, #6]
 5123 01f4 2023     		mov	r3, #32
 5124 01f6 1343     		orr	r3, r2
 5125 01f8 A371     		strb	r3, [r4, #6]
2582:.\sd/ff.c     **** 
2583:.\sd/ff.c     **** 	LEAVE_FF(fp->fs, FR_OK);
 5126              		.loc 1 2583 0
 5127 01fa 0020     		mov	r0, #0
 5128 01fc 02E0     		b	.L353
 5129              	.LVL714:
 5130              	.L377:
2493:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 5131              		.loc 1 2493 0
 5132 01fe 0220     		mov	r0, #2
 5133              	.LVL715:
 5134 0200 00E0     		b	.L353
 5135              	.LVL716:
 5136              	.L378:
2495:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_DENIED);
 5137              		.loc 1 2495 0
 5138 0202 0720     		mov	r0, #7
 5139              	.LVL717:
 5140              	.L353:
2584:.\sd/ff.c     **** }
 5141              		.loc 1 2584 0
 5142 0204 03B0     		add	sp, sp, #12
 5143              		@ sp needed
 5144              	.LVL718:
 5145              	.LVL719:
 5146              	.LVL720:
 5147 0206 3CBC     		pop	{r2, r3, r4, r5}
 5148 0208 9046     		mov	r8, r2
 5149 020a 9946     		mov	r9, r3
 5150 020c A246     		mov	r10, r4
 5151 020e AB46     		mov	fp, r5
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 145


 5152 0210 F0BD     		pop	{r4, r5, r6, r7, pc}
 5153              		.cfi_endproc
 5154              	.LFE31:
 5155              		.size	f_write, .-f_write
 5156 0212 C046     		.section	.text.f_sync,"ax",%progbits
 5157              		.align	2
 5158              		.global	f_sync
 5159              		.code	16
 5160              		.thumb_func
 5161              		.type	f_sync, %function
 5162              	f_sync:
 5163              	.LFB32:
2585:.\sd/ff.c     **** 
2586:.\sd/ff.c     **** 
2587:.\sd/ff.c     **** 
2588:.\sd/ff.c     **** 
2589:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2590:.\sd/ff.c     **** /* Synchronize the File Object                                           */
2591:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2592:.\sd/ff.c     **** 
2593:.\sd/ff.c     **** FRESULT f_sync (
2594:.\sd/ff.c     **** 	FIL *fp		/* Pointer to the file object */
2595:.\sd/ff.c     **** )
2596:.\sd/ff.c     **** {
 5164              		.loc 1 2596 0
 5165              		.cfi_startproc
 5166              	.LVL721:
 5167 0000 38B5     		push	{r3, r4, r5, lr}
 5168              		.cfi_def_cfa_offset 16
 5169              		.cfi_offset 3, -16
 5170              		.cfi_offset 4, -12
 5171              		.cfi_offset 5, -8
 5172              		.cfi_offset 14, -4
 5173 0002 041C     		mov	r4, r0
2597:.\sd/ff.c     **** 	FRESULT res;
2598:.\sd/ff.c     **** 	DWORD tim;
2599:.\sd/ff.c     **** 	BYTE *dir;
2600:.\sd/ff.c     **** 
2601:.\sd/ff.c     **** 
2602:.\sd/ff.c     **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5174              		.loc 1 2602 0
 5175 0004 8188     		ldrh	r1, [r0, #4]
 5176 0006 0068     		ldr	r0, [r0]
 5177              	.LVL722:
 5178 0008 FFF7FEFF 		bl	validate
 5179              	.LVL723:
2603:.\sd/ff.c     **** 	if (res == FR_OK) {
 5180              		.loc 1 2603 0
 5181 000c 0028     		cmp	r0, #0
 5182 000e 33D1     		bne	.L383
2604:.\sd/ff.c     **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 5183              		.loc 1 2604 0
 5184 0010 A379     		ldrb	r3, [r4, #6]
 5185 0012 9A06     		lsl	r2, r3, #26
 5186 0014 30D5     		bpl	.L383
2605:.\sd/ff.c     **** #if !_FS_TINY	/* Write-back dirty buffer */
2606:.\sd/ff.c     **** 			if (fp->flag & FA__DIRTY) {
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 146


2607:.\sd/ff.c     **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2608:.\sd/ff.c     **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2609:.\sd/ff.c     **** 				fp->flag &= ~FA__DIRTY;
2610:.\sd/ff.c     **** 			}
2611:.\sd/ff.c     **** #endif
2612:.\sd/ff.c     **** 			/* Update the directory entry */
2613:.\sd/ff.c     **** 			res = move_window(fp->fs, fp->dir_sect);
 5187              		.loc 1 2613 0
 5188 0016 2068     		ldr	r0, [r4]
 5189              	.LVL724:
 5190 0018 E169     		ldr	r1, [r4, #28]
 5191 001a FFF7FEFF 		bl	move_window
 5192              	.LVL725:
2614:.\sd/ff.c     **** 			if (res == FR_OK) {
 5193              		.loc 1 2614 0
 5194 001e 0028     		cmp	r0, #0
 5195 0020 2AD1     		bne	.L383
2615:.\sd/ff.c     **** 				dir = fp->dir_ptr;
 5196              		.loc 1 2615 0
 5197 0022 256A     		ldr	r5, [r4, #32]
 5198              	.LVL726:
2616:.\sd/ff.c     **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 5199              		.loc 1 2616 0
 5200 0024 EA7A     		ldrb	r2, [r5, #11]
 5201 0026 2023     		mov	r3, #32
 5202 0028 1343     		orr	r3, r2
 5203 002a EB72     		strb	r3, [r5, #11]
2617:.\sd/ff.c     **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 5204              		.loc 1 2617 0
 5205 002c 237B     		ldrb	r3, [r4, #12]
 5206 002e 2B77     		strb	r3, [r5, #28]
 5207 0030 A389     		ldrh	r3, [r4, #12]
 5208 0032 1B0A     		lsr	r3, r3, #8
 5209 0034 6B77     		strb	r3, [r5, #29]
 5210 0036 A37B     		ldrb	r3, [r4, #14]
 5211 0038 AB77     		strb	r3, [r5, #30]
 5212 003a E37B     		ldrb	r3, [r4, #15]
 5213 003c EB77     		strb	r3, [r5, #31]
2618:.\sd/ff.c     **** 				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 5214              		.loc 1 2618 0
 5215 003e 237C     		ldrb	r3, [r4, #16]
 5216 0040 AB76     		strb	r3, [r5, #26]
 5217 0042 238A     		ldrh	r3, [r4, #16]
 5218 0044 1B0A     		lsr	r3, r3, #8
 5219 0046 EB76     		strb	r3, [r5, #27]
 5220 0048 A37C     		ldrb	r3, [r4, #18]
 5221 004a 2B75     		strb	r3, [r5, #20]
 5222 004c 638A     		ldrh	r3, [r4, #18]
 5223 004e 1B0A     		lsr	r3, r3, #8
 5224 0050 6B75     		strb	r3, [r5, #21]
2619:.\sd/ff.c     **** 				tim = get_fattime();						/* Update updated time */
 5225              		.loc 1 2619 0
 5226 0052 FFF7FEFF 		bl	get_fattime
 5227              	.LVL727:
2620:.\sd/ff.c     **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5228              		.loc 1 2620 0
 5229 0056 A875     		strb	r0, [r5, #22]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 147


 5230 0058 030A     		lsr	r3, r0, #8
 5231 005a EB75     		strb	r3, [r5, #23]
 5232 005c 030C     		lsr	r3, r0, #16
 5233 005e 2B76     		strb	r3, [r5, #24]
 5234 0060 000E     		lsr	r0, r0, #24
 5235              	.LVL728:
 5236 0062 6876     		strb	r0, [r5, #25]
2621:.\sd/ff.c     **** 				fp->flag &= ~FA__WRITTEN;
 5237              		.loc 1 2621 0
 5238 0064 A379     		ldrb	r3, [r4, #6]
 5239 0066 2022     		mov	r2, #32
 5240 0068 9343     		bic	r3, r2
 5241 006a A371     		strb	r3, [r4, #6]
2622:.\sd/ff.c     **** 				fp->fs->wflag = 1;
 5242              		.loc 1 2622 0
 5243 006c 0123     		mov	r3, #1
 5244 006e 2268     		ldr	r2, [r4]
 5245 0070 1371     		strb	r3, [r2, #4]
2623:.\sd/ff.c     **** 				res = sync(fp->fs);
 5246              		.loc 1 2623 0
 5247 0072 2068     		ldr	r0, [r4]
 5248 0074 FFF7FEFF 		bl	sync
 5249              	.LVL729:
 5250              	.L383:
2624:.\sd/ff.c     **** 			}
2625:.\sd/ff.c     **** 		}
2626:.\sd/ff.c     **** 	}
2627:.\sd/ff.c     **** 
2628:.\sd/ff.c     **** 	LEAVE_FF(fp->fs, res);
2629:.\sd/ff.c     **** }
 5251              		.loc 1 2629 0
 5252              		@ sp needed
 5253              	.LVL730:
 5254 0078 38BD     		pop	{r3, r4, r5, pc}
 5255              		.cfi_endproc
 5256              	.LFE32:
 5257              		.size	f_sync, .-f_sync
 5258 007a C046     		.section	.text.f_close,"ax",%progbits
 5259              		.align	2
 5260              		.global	f_close
 5261              		.code	16
 5262              		.thumb_func
 5263              		.type	f_close, %function
 5264              	f_close:
 5265              	.LFB33:
2630:.\sd/ff.c     **** 
2631:.\sd/ff.c     **** #endif /* !_FS_READONLY */
2632:.\sd/ff.c     **** 
2633:.\sd/ff.c     **** 
2634:.\sd/ff.c     **** 
2635:.\sd/ff.c     **** 
2636:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2637:.\sd/ff.c     **** /* Close File                                                            */
2638:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2639:.\sd/ff.c     **** 
2640:.\sd/ff.c     **** FRESULT f_close (
2641:.\sd/ff.c     **** 	FIL *fp		/* Pointer to the file object to be closed */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 148


2642:.\sd/ff.c     **** )
2643:.\sd/ff.c     **** {
 5266              		.loc 1 2643 0
 5267              		.cfi_startproc
 5268              	.LVL731:
 5269 0000 10B5     		push	{r4, lr}
 5270              		.cfi_def_cfa_offset 8
 5271              		.cfi_offset 4, -8
 5272              		.cfi_offset 14, -4
 5273 0002 041C     		mov	r4, r0
2644:.\sd/ff.c     **** 	FRESULT res;
2645:.\sd/ff.c     **** 
2646:.\sd/ff.c     **** #if _FS_READONLY
2647:.\sd/ff.c     **** 	FATFS *fs = fp->fs;
2648:.\sd/ff.c     **** 	res = validate(fs, fp->id);
2649:.\sd/ff.c     **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2650:.\sd/ff.c     **** 	LEAVE_FF(fs, res);
2651:.\sd/ff.c     **** 
2652:.\sd/ff.c     **** #else
2653:.\sd/ff.c     **** 	res = f_sync(fp);		/* Flush cached data */
 5274              		.loc 1 2653 0
 5275 0004 FFF7FEFF 		bl	f_sync
 5276              	.LVL732:
2654:.\sd/ff.c     **** #if _FS_SHARE
2655:.\sd/ff.c     **** 	if (res == FR_OK) {		/* Decrement open counter */
 5277              		.loc 1 2655 0
 5278 0008 0028     		cmp	r0, #0
 5279 000a 02D1     		bne	.L385
2656:.\sd/ff.c     **** #if _FS_REENTRANT
2657:.\sd/ff.c     **** 		res = validate(fp->fs, fp->id);
2658:.\sd/ff.c     **** 		if (res == FR_OK) {
2659:.\sd/ff.c     **** 			res = dec_lock(fp->lockid);	
2660:.\sd/ff.c     **** 			unlock_fs(fp->fs, FR_OK);
2661:.\sd/ff.c     **** 		}
2662:.\sd/ff.c     **** #else
2663:.\sd/ff.c     **** 		res = dec_lock(fp->lockid);
 5280              		.loc 1 2663 0
 5281 000c 606A     		ldr	r0, [r4, #36]
 5282              	.LVL733:
 5283 000e FFF7FEFF 		bl	dec_lock
 5284              	.LVL734:
 5285              	.L385:
2664:.\sd/ff.c     **** #endif
2665:.\sd/ff.c     **** 	}
2666:.\sd/ff.c     **** #endif
2667:.\sd/ff.c     **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 5286              		.loc 1 2667 0
 5287 0012 0028     		cmp	r0, #0
 5288 0014 01D1     		bne	.L386
 5289              		.loc 1 2667 0 is_stmt 0 discriminator 1
 5290 0016 0022     		mov	r2, #0
 5291 0018 2260     		str	r2, [r4]
 5292              	.L386:
2668:.\sd/ff.c     **** 	return res;
2669:.\sd/ff.c     **** #endif
2670:.\sd/ff.c     **** }
 5293              		.loc 1 2670 0 is_stmt 1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 149


 5294              		@ sp needed
 5295              	.LVL735:
 5296 001a 10BD     		pop	{r4, pc}
 5297              		.cfi_endproc
 5298              	.LFE33:
 5299              		.size	f_close, .-f_close
 5300              		.section	.text.f_lseek,"ax",%progbits
 5301              		.align	2
 5302              		.global	f_lseek
 5303              		.code	16
 5304              		.thumb_func
 5305              		.type	f_lseek, %function
 5306              	f_lseek:
 5307              	.LFB34:
2671:.\sd/ff.c     **** 
2672:.\sd/ff.c     **** 
2673:.\sd/ff.c     **** 
2674:.\sd/ff.c     **** 
2675:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2676:.\sd/ff.c     **** /* Current Drive/Directory Handlings                                     */
2677:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2678:.\sd/ff.c     **** 
2679:.\sd/ff.c     **** #if _FS_RPATH >= 1
2680:.\sd/ff.c     **** 
2681:.\sd/ff.c     **** FRESULT f_chdrive (
2682:.\sd/ff.c     **** 	BYTE drv		/* Drive number */
2683:.\sd/ff.c     **** )
2684:.\sd/ff.c     **** {
2685:.\sd/ff.c     **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2686:.\sd/ff.c     **** 
2687:.\sd/ff.c     **** 	CurrVol = drv;
2688:.\sd/ff.c     **** 
2689:.\sd/ff.c     **** 	return FR_OK;
2690:.\sd/ff.c     **** }
2691:.\sd/ff.c     **** 
2692:.\sd/ff.c     **** 
2693:.\sd/ff.c     **** 
2694:.\sd/ff.c     **** FRESULT f_chdir (
2695:.\sd/ff.c     **** 	const TCHAR *path	/* Pointer to the directory path */
2696:.\sd/ff.c     **** )
2697:.\sd/ff.c     **** {
2698:.\sd/ff.c     **** 	FRESULT res;
2699:.\sd/ff.c     **** 	DIR dj;
2700:.\sd/ff.c     **** 	DEF_NAMEBUF;
2701:.\sd/ff.c     **** 
2702:.\sd/ff.c     **** 
2703:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 0);
2704:.\sd/ff.c     **** 	if (res == FR_OK) {
2705:.\sd/ff.c     **** 		INIT_BUF(dj);
2706:.\sd/ff.c     **** 		res = follow_path(&dj, path);		/* Follow the path */
2707:.\sd/ff.c     **** 		FREE_BUF();
2708:.\sd/ff.c     **** 		if (res == FR_OK) {					/* Follow completed */
2709:.\sd/ff.c     **** 			if (!dj.dir) {
2710:.\sd/ff.c     **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2711:.\sd/ff.c     **** 			} else {
2712:.\sd/ff.c     **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2713:.\sd/ff.c     **** 					dj.fs->cdir = LD_CLUST(dj.dir);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 150


2714:.\sd/ff.c     **** 				else
2715:.\sd/ff.c     **** 					res = FR_NO_PATH;		/* Reached but a file */
2716:.\sd/ff.c     **** 			}
2717:.\sd/ff.c     **** 		}
2718:.\sd/ff.c     **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2719:.\sd/ff.c     **** 	}
2720:.\sd/ff.c     **** 
2721:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
2722:.\sd/ff.c     **** }
2723:.\sd/ff.c     **** 
2724:.\sd/ff.c     **** 
2725:.\sd/ff.c     **** #if _FS_RPATH >= 2
2726:.\sd/ff.c     **** FRESULT f_getcwd (
2727:.\sd/ff.c     **** 	TCHAR *path,	/* Pointer to the directory path */
2728:.\sd/ff.c     **** 	UINT sz_path	/* Size of path */
2729:.\sd/ff.c     **** )
2730:.\sd/ff.c     **** {
2731:.\sd/ff.c     **** 	FRESULT res;
2732:.\sd/ff.c     **** 	DIR dj;
2733:.\sd/ff.c     **** 	UINT i, n;
2734:.\sd/ff.c     **** 	DWORD ccl;
2735:.\sd/ff.c     **** 	TCHAR *tp;
2736:.\sd/ff.c     **** 	FILINFO fno;
2737:.\sd/ff.c     **** 	DEF_NAMEBUF;
2738:.\sd/ff.c     **** 
2739:.\sd/ff.c     **** 
2740:.\sd/ff.c     **** 	*path = 0;
2741:.\sd/ff.c     **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2742:.\sd/ff.c     **** 	if (res == FR_OK) {
2743:.\sd/ff.c     **** 		INIT_BUF(dj);
2744:.\sd/ff.c     **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2745:.\sd/ff.c     **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2746:.\sd/ff.c     **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2747:.\sd/ff.c     **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2748:.\sd/ff.c     **** 			if (res != FR_OK) break;
2749:.\sd/ff.c     **** 			res = dir_read(&dj);
2750:.\sd/ff.c     **** 			if (res != FR_OK) break;
2751:.\sd/ff.c     **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2752:.\sd/ff.c     **** 			res = dir_sdi(&dj, 0);
2753:.\sd/ff.c     **** 			if (res != FR_OK) break;
2754:.\sd/ff.c     **** 			do {							/* Find the entry links to the child dir */
2755:.\sd/ff.c     **** 				res = dir_read(&dj);
2756:.\sd/ff.c     **** 				if (res != FR_OK) break;
2757:.\sd/ff.c     **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2758:.\sd/ff.c     **** 				res = dir_next(&dj, 0);	
2759:.\sd/ff.c     **** 			} while (res == FR_OK);
2760:.\sd/ff.c     **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2761:.\sd/ff.c     **** 			if (res != FR_OK) break;
2762:.\sd/ff.c     **** #if _USE_LFN
2763:.\sd/ff.c     **** 			fno.lfname = path;
2764:.\sd/ff.c     **** 			fno.lfsize = i;
2765:.\sd/ff.c     **** #endif
2766:.\sd/ff.c     **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2767:.\sd/ff.c     **** 			tp = fno.fname;
2768:.\sd/ff.c     **** 			if (_USE_LFN && *path) tp = path;
2769:.\sd/ff.c     **** 			for (n = 0; tp[n]; n++) ;
2770:.\sd/ff.c     **** 			if (i < n + 3) {
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 151


2771:.\sd/ff.c     **** 				res = FR_NOT_ENOUGH_CORE; break;
2772:.\sd/ff.c     **** 			}
2773:.\sd/ff.c     **** 			while (n) path[--i] = tp[--n];
2774:.\sd/ff.c     **** 			path[--i] = '/';
2775:.\sd/ff.c     **** 		}
2776:.\sd/ff.c     **** 		tp = path;
2777:.\sd/ff.c     **** 		if (res == FR_OK) {
2778:.\sd/ff.c     **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2779:.\sd/ff.c     **** 			*tp++ = ':';
2780:.\sd/ff.c     **** 			if (i == sz_path) {				/* Root-dir */
2781:.\sd/ff.c     **** 				*tp++ = '/';
2782:.\sd/ff.c     **** 			} else {						/* Sub-dir */
2783:.\sd/ff.c     **** 				do		/* Add stacked path str */
2784:.\sd/ff.c     **** 					*tp++ = path[i++];
2785:.\sd/ff.c     **** 				while (i < sz_path);
2786:.\sd/ff.c     **** 			}
2787:.\sd/ff.c     **** 		}
2788:.\sd/ff.c     **** 		*tp = 0;
2789:.\sd/ff.c     **** 		FREE_BUF();
2790:.\sd/ff.c     **** 	}
2791:.\sd/ff.c     **** 
2792:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
2793:.\sd/ff.c     **** }
2794:.\sd/ff.c     **** #endif /* _FS_RPATH >= 2 */
2795:.\sd/ff.c     **** #endif /* _FS_RPATH >= 1 */
2796:.\sd/ff.c     **** 
2797:.\sd/ff.c     **** 
2798:.\sd/ff.c     **** 
2799:.\sd/ff.c     **** #if _FS_MINIMIZE <= 2
2800:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2801:.\sd/ff.c     **** /* Seek File R/W Pointer                                                 */
2802:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2803:.\sd/ff.c     **** 
2804:.\sd/ff.c     **** FRESULT f_lseek (
2805:.\sd/ff.c     **** 	FIL *fp,		/* Pointer to the file object */
2806:.\sd/ff.c     **** 	DWORD ofs		/* File pointer from top of file */
2807:.\sd/ff.c     **** )
2808:.\sd/ff.c     **** {
 5308              		.loc 1 2808 0
 5309              		.cfi_startproc
 5310              	.LVL736:
 5311 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5312              		.cfi_def_cfa_offset 20
 5313              		.cfi_offset 4, -20
 5314              		.cfi_offset 5, -16
 5315              		.cfi_offset 6, -12
 5316              		.cfi_offset 7, -8
 5317              		.cfi_offset 14, -4
 5318 0002 5746     		mov	r7, r10
 5319 0004 4E46     		mov	r6, r9
 5320 0006 4546     		mov	r5, r8
 5321 0008 E0B4     		push	{r5, r6, r7}
 5322              		.cfi_def_cfa_offset 32
 5323              		.cfi_offset 8, -32
 5324              		.cfi_offset 9, -28
 5325              		.cfi_offset 10, -24
 5326 000a 041C     		mov	r4, r0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 152


 5327 000c 0D1C     		mov	r5, r1
2809:.\sd/ff.c     **** 	FRESULT res;
2810:.\sd/ff.c     **** 
2811:.\sd/ff.c     **** 
2812:.\sd/ff.c     **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5328              		.loc 1 2812 0
 5329 000e 8188     		ldrh	r1, [r0, #4]
 5330              	.LVL737:
 5331 0010 0068     		ldr	r0, [r0]
 5332              	.LVL738:
 5333 0012 FFF7FEFF 		bl	validate
 5334              	.LVL739:
 5335 0016 071E     		sub	r7, r0, #0
 5336              	.LVL740:
2813:.\sd/ff.c     **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5337              		.loc 1 2813 0
 5338 0018 00D0     		beq	.LCB5983
 5339 001a A2E0     		b	.L407	@long jump
 5340              	.LCB5983:
2814:.\sd/ff.c     **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 5341              		.loc 1 2814 0
 5342 001c A379     		ldrb	r3, [r4, #6]
 5343 001e 5AB2     		sxtb	r2, r3
 5344 0020 002A     		cmp	r2, #0
 5345 0022 00DA     		bge	.LCB5988
 5346 0024 9EE0     		b	.L408	@long jump
 5347              	.LCB5988:
 5348              	.LBB6:
2815:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2816:.\sd/ff.c     **** 
2817:.\sd/ff.c     **** #if _USE_FASTSEEK
2818:.\sd/ff.c     **** 	if (fp->cltbl) {	/* Fast seek */
2819:.\sd/ff.c     **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2820:.\sd/ff.c     **** 
2821:.\sd/ff.c     **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2822:.\sd/ff.c     **** 			tbl = fp->cltbl;
2823:.\sd/ff.c     **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2824:.\sd/ff.c     **** 			cl = fp->sclust;			/* Top of the chain */
2825:.\sd/ff.c     **** 			if (cl) {
2826:.\sd/ff.c     **** 				do {
2827:.\sd/ff.c     **** 					/* Get a fragment */
2828:.\sd/ff.c     **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2829:.\sd/ff.c     **** 					do {
2830:.\sd/ff.c     **** 						pcl = cl; ncl++;
2831:.\sd/ff.c     **** 						cl = get_fat(fp->fs, cl);
2832:.\sd/ff.c     **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2833:.\sd/ff.c     **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2834:.\sd/ff.c     **** 					} while (cl == pcl + 1);
2835:.\sd/ff.c     **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2836:.\sd/ff.c     **** 						*tbl++ = ncl; *tbl++ = tcl;
2837:.\sd/ff.c     **** 					}
2838:.\sd/ff.c     **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2839:.\sd/ff.c     **** 			}
2840:.\sd/ff.c     **** 			*fp->cltbl = ulen;	/* Number of items used */
2841:.\sd/ff.c     **** 			if (ulen <= tlen)
2842:.\sd/ff.c     **** 				*tbl = 0;		/* Terminate table */
2843:.\sd/ff.c     **** 			else
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 153


2844:.\sd/ff.c     **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2845:.\sd/ff.c     **** 
2846:.\sd/ff.c     **** 		} else {						/* Fast seek */
2847:.\sd/ff.c     **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2848:.\sd/ff.c     **** 				ofs = fp->fsize;
2849:.\sd/ff.c     **** 			fp->fptr = ofs;				/* Set file pointer */
2850:.\sd/ff.c     **** 			if (ofs) {
2851:.\sd/ff.c     **** 				fp->clust = clmt_clust(fp, ofs - 1);
2852:.\sd/ff.c     **** 				dsc = clust2sect(fp->fs, fp->clust);
2853:.\sd/ff.c     **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2854:.\sd/ff.c     **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
2855:.\sd/ff.c     **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2856:.\sd/ff.c     **** #if !_FS_TINY
2857:.\sd/ff.c     **** #if !_FS_READONLY
2858:.\sd/ff.c     **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2859:.\sd/ff.c     **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2860:.\sd/ff.c     **** 							ABORT(fp->fs, FR_DISK_ERR);
2861:.\sd/ff.c     **** 						fp->flag &= ~FA__DIRTY;
2862:.\sd/ff.c     **** 					}
2863:.\sd/ff.c     **** #endif
2864:.\sd/ff.c     **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2865:.\sd/ff.c     **** 						ABORT(fp->fs, FR_DISK_ERR);
2866:.\sd/ff.c     **** #endif
2867:.\sd/ff.c     **** 					fp->dsect = dsc;
2868:.\sd/ff.c     **** 				}
2869:.\sd/ff.c     **** 			}
2870:.\sd/ff.c     **** 		}
2871:.\sd/ff.c     **** 	} else
2872:.\sd/ff.c     **** #endif
2873:.\sd/ff.c     **** 
2874:.\sd/ff.c     **** 	/* Normal Seek */
2875:.\sd/ff.c     **** 	{
2876:.\sd/ff.c     **** 		DWORD clst, bcs, nsect, ifptr;
2877:.\sd/ff.c     **** 
2878:.\sd/ff.c     **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 5349              		.loc 1 2878 0
 5350 0026 E268     		ldr	r2, [r4, #12]
 5351 0028 AA42     		cmp	r2, r5
 5352 002a 02D2     		bcs	.L389
2879:.\sd/ff.c     **** #if !_FS_READONLY
2880:.\sd/ff.c     **** 			 && !(fp->flag & FA_WRITE)
 5353              		.loc 1 2880 0
 5354 002c 9907     		lsl	r1, r3, #30
 5355 002e 00D4     		bmi	.L389
2881:.\sd/ff.c     **** #endif
2882:.\sd/ff.c     **** 			) ofs = fp->fsize;
 5356              		.loc 1 2882 0
 5357 0030 151C     		mov	r5, r2
 5358              	.LVL741:
 5359              	.L389:
2883:.\sd/ff.c     **** 
2884:.\sd/ff.c     **** 		ifptr = fp->fptr;
 5360              		.loc 1 2884 0
 5361 0032 A268     		ldr	r2, [r4, #8]
 5362 0034 9046     		mov	r8, r2
 5363              	.LVL742:
2885:.\sd/ff.c     **** 		fp->fptr = nsect = 0;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 154


 5364              		.loc 1 2885 0
 5365 0036 0023     		mov	r3, #0
 5366 0038 A360     		str	r3, [r4, #8]
2886:.\sd/ff.c     **** 		if (ofs) {
 5367              		.loc 1 2886 0
 5368 003a 002D     		cmp	r5, #0
 5369 003c 7DD0     		beq	.L410
2887:.\sd/ff.c     **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 5370              		.loc 1 2887 0
 5371 003e 2368     		ldr	r3, [r4]
 5372 0040 9946     		mov	r9, r3
 5373 0042 9E78     		ldrb	r6, [r3, #2]
 5374 0044 7602     		lsl	r6, r6, #9
 5375              	.LVL743:
2888:.\sd/ff.c     **** 			if (ifptr > 0 &&
 5376              		.loc 1 2888 0
 5377 0046 002A     		cmp	r2, #0
 5378 0048 14D0     		beq	.L391
2889:.\sd/ff.c     **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5379              		.loc 1 2889 0 discriminator 1
 5380 004a 681E     		sub	r0, r5, #1
 5381              	.LVL744:
 5382 004c 311C     		mov	r1, r6
 5383 004e FFF7FEFF 		bl	__aeabi_uidiv
 5384              	.LVL745:
 5385 0052 8246     		mov	r10, r0
 5386 0054 0123     		mov	r3, #1
 5387 0056 5B42     		neg	r3, r3
 5388 0058 9844     		add	r8, r8, r3
 5389              	.LVL746:
 5390 005a 4046     		mov	r0, r8
 5391 005c 311C     		mov	r1, r6
 5392 005e FFF7FEFF 		bl	__aeabi_uidiv
 5393              	.LVL747:
2888:.\sd/ff.c     **** 			if (ifptr > 0 &&
 5394              		.loc 1 2888 0 discriminator 1
 5395 0062 8245     		cmp	r10, r0
 5396 0064 06D3     		bcc	.L391
2890:.\sd/ff.c     **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 5397              		.loc 1 2890 0
 5398 0066 7342     		neg	r3, r6
 5399 0068 4146     		mov	r1, r8
 5400 006a 0B40     		and	r3, r1
 5401 006c A360     		str	r3, [r4, #8]
2891:.\sd/ff.c     **** 				ofs -= fp->fptr;
 5402              		.loc 1 2891 0
 5403 006e ED1A     		sub	r5, r5, r3
 5404              	.LVL748:
2892:.\sd/ff.c     **** 				clst = fp->clust;
 5405              		.loc 1 2892 0
 5406 0070 6169     		ldr	r1, [r4, #20]
 5407              	.LVL749:
 5408 0072 1AE0     		b	.L392
 5409              	.LVL750:
 5410              	.L391:
2893:.\sd/ff.c     **** 			} else {									/* When seek to back cluster, */
2894:.\sd/ff.c     **** 				clst = fp->sclust;						/* start from the first cluster */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 155


 5411              		.loc 1 2894 0
 5412 0074 2169     		ldr	r1, [r4, #16]
 5413              	.LVL751:
2895:.\sd/ff.c     **** #if !_FS_READONLY
2896:.\sd/ff.c     **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 5414              		.loc 1 2896 0
 5415 0076 0029     		cmp	r1, #0
 5416 0078 16D1     		bne	.L393
2897:.\sd/ff.c     **** 					clst = create_chain(fp->fs, 0);
 5417              		.loc 1 2897 0
 5418 007a 4846     		mov	r0, r9
 5419 007c FFF7FEFF 		bl	create_chain
 5420              	.LVL752:
 5421 0080 011E     		sub	r1, r0, #0
 5422              	.LVL753:
2898:.\sd/ff.c     **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5423              		.loc 1 2898 0
 5424 0082 0129     		cmp	r1, #1
 5425 0084 06D1     		bne	.L394
 5426              		.loc 1 2898 0 is_stmt 0 discriminator 1
 5427 0086 A279     		ldrb	r2, [r4, #6]
 5428 0088 8023     		mov	r3, #128
 5429 008a 5B42     		neg	r3, r3
 5430 008c 1343     		orr	r3, r2
 5431 008e A371     		strb	r3, [r4, #6]
 5432 0090 0220     		mov	r0, #2
 5433              	.LVL754:
 5434 0092 68E0     		b	.L388
 5435              	.LVL755:
 5436              	.L394:
2899:.\sd/ff.c     **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5437              		.loc 1 2899 0 is_stmt 1
 5438 0094 421C     		add	r2, r0, #1
 5439 0096 06D1     		bne	.L395
 5440              		.loc 1 2899 0 is_stmt 0 discriminator 1
 5441 0098 A279     		ldrb	r2, [r4, #6]
 5442 009a 8023     		mov	r3, #128
 5443 009c 5B42     		neg	r3, r3
 5444 009e 1343     		orr	r3, r2
 5445 00a0 A371     		strb	r3, [r4, #6]
 5446 00a2 0120     		mov	r0, #1
 5447              	.LVL756:
 5448 00a4 5FE0     		b	.L388
 5449              	.LVL757:
 5450              	.L395:
2900:.\sd/ff.c     **** 					fp->sclust = clst;
 5451              		.loc 1 2900 0 is_stmt 1
 5452 00a6 2061     		str	r0, [r4, #16]
 5453              	.LVL758:
 5454              	.L393:
2901:.\sd/ff.c     **** 				}
2902:.\sd/ff.c     **** #endif
2903:.\sd/ff.c     **** 				fp->clust = clst;
 5455              		.loc 1 2903 0
 5456 00a8 6161     		str	r1, [r4, #20]
 5457              	.L392:
2904:.\sd/ff.c     **** 			}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 156


2905:.\sd/ff.c     **** 			if (clst != 0) {
 5458              		.loc 1 2905 0
 5459 00aa 0029     		cmp	r1, #0
 5460 00ac 2BD1     		bne	.L396
2885:.\sd/ff.c     **** 		fp->fptr = nsect = 0;
 5461              		.loc 1 2885 0
 5462 00ae 0025     		mov	r5, #0
 5463              	.LVL759:
 5464 00b0 46E0     		b	.L390
 5465              	.LVL760:
 5466              	.L403:
2906:.\sd/ff.c     **** 				while (ofs > bcs) {						/* Cluster following loop */
2907:.\sd/ff.c     **** #if !_FS_READONLY
2908:.\sd/ff.c     **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 5467              		.loc 1 2908 0
 5468 00b2 A279     		ldrb	r2, [r4, #6]
 5469 00b4 4346     		mov	r3, r8
 5470 00b6 1342     		tst	r3, r2
 5471 00b8 05D0     		beq	.L397
2909:.\sd/ff.c     **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 5472              		.loc 1 2909 0
 5473 00ba 2068     		ldr	r0, [r4]
 5474 00bc FFF7FEFF 		bl	create_chain
 5475              	.LVL761:
 5476 00c0 011E     		sub	r1, r0, #0
 5477              	.LVL762:
2910:.\sd/ff.c     **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 5478              		.loc 1 2910 0
 5479 00c2 04D1     		bne	.L399
 5480 00c4 24E0     		b	.L411
 5481              	.LVL763:
 5482              	.L397:
2911:.\sd/ff.c     **** 							ofs = bcs; break;
2912:.\sd/ff.c     **** 						}
2913:.\sd/ff.c     **** 					} else
2914:.\sd/ff.c     **** #endif
2915:.\sd/ff.c     **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 5483              		.loc 1 2915 0
 5484 00c6 2068     		ldr	r0, [r4]
 5485 00c8 FFF7FEFF 		bl	get_fat
 5486              	.LVL764:
 5487 00cc 011C     		mov	r1, r0
 5488              	.LVL765:
 5489              	.L399:
2916:.\sd/ff.c     **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5490              		.loc 1 2916 0
 5491 00ce 4A1C     		add	r2, r1, #1
 5492 00d0 06D1     		bne	.L400
 5493              		.loc 1 2916 0 is_stmt 0 discriminator 1
 5494 00d2 A279     		ldrb	r2, [r4, #6]
 5495 00d4 8023     		mov	r3, #128
 5496 00d6 5B42     		neg	r3, r3
 5497 00d8 1343     		orr	r3, r2
 5498 00da A371     		strb	r3, [r4, #6]
 5499 00dc 0120     		mov	r0, #1
 5500              	.LVL766:
 5501 00de 42E0     		b	.L388
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 157


 5502              	.LVL767:
 5503              	.L400:
2917:.\sd/ff.c     **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5504              		.loc 1 2917 0 is_stmt 1
 5505 00e0 0129     		cmp	r1, #1
 5506 00e2 03D9     		bls	.L401
 5507              		.loc 1 2917 0 is_stmt 0 discriminator 2
 5508 00e4 2268     		ldr	r2, [r4]
 5509 00e6 9269     		ldr	r2, [r2, #24]
 5510 00e8 8A42     		cmp	r2, r1
 5511 00ea 06D8     		bhi	.L402
 5512              	.L401:
 5513              		.loc 1 2917 0 discriminator 1
 5514 00ec A279     		ldrb	r2, [r4, #6]
 5515 00ee 8023     		mov	r3, #128
 5516 00f0 5B42     		neg	r3, r3
 5517 00f2 1343     		orr	r3, r2
 5518 00f4 A371     		strb	r3, [r4, #6]
 5519 00f6 0220     		mov	r0, #2
 5520              	.LVL768:
 5521 00f8 35E0     		b	.L388
 5522              	.LVL769:
 5523              	.L402:
2918:.\sd/ff.c     **** 					fp->clust = clst;
 5524              		.loc 1 2918 0 is_stmt 1
 5525 00fa 6161     		str	r1, [r4, #20]
2919:.\sd/ff.c     **** 					fp->fptr += bcs;
 5526              		.loc 1 2919 0
 5527 00fc A368     		ldr	r3, [r4, #8]
 5528 00fe 9A19     		add	r2, r3, r6
 5529 0100 A260     		str	r2, [r4, #8]
2920:.\sd/ff.c     **** 					ofs -= bcs;
 5530              		.loc 1 2920 0
 5531 0102 AD1B     		sub	r5, r5, r6
 5532              	.LVL770:
 5533 0104 01E0     		b	.L413
 5534              	.LVL771:
 5535              	.L396:
2908:.\sd/ff.c     **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 5536              		.loc 1 2908 0 discriminator 1
 5537 0106 0222     		mov	r2, #2
 5538 0108 9046     		mov	r8, r2
 5539              	.L413:
2906:.\sd/ff.c     **** 				while (ofs > bcs) {						/* Cluster following loop */
 5540              		.loc 1 2906 0 discriminator 1
 5541 010a B542     		cmp	r5, r6
 5542 010c D1D8     		bhi	.L403
 5543 010e 00E0     		b	.L398
 5544              	.LVL772:
 5545              	.L411:
2911:.\sd/ff.c     **** 							ofs = bcs; break;
 5546              		.loc 1 2911 0
 5547 0110 351C     		mov	r5, r6
 5548              	.LVL773:
 5549              	.L398:
2921:.\sd/ff.c     **** 				}
2922:.\sd/ff.c     **** 				fp->fptr += ofs;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 158


 5550              		.loc 1 2922 0
 5551 0112 A368     		ldr	r3, [r4, #8]
 5552 0114 5A19     		add	r2, r3, r5
 5553 0116 A260     		str	r2, [r4, #8]
2923:.\sd/ff.c     **** 				if (ofs % SS(fp->fs)) {
 5554              		.loc 1 2923 0
 5555 0118 EA05     		lsl	r2, r5, #23
 5556 011a 10D0     		beq	.L412
2924:.\sd/ff.c     **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 5557              		.loc 1 2924 0
 5558 011c 2068     		ldr	r0, [r4]
 5559 011e FFF7FEFF 		bl	clust2sect
 5560              	.LVL774:
2925:.\sd/ff.c     **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 5561              		.loc 1 2925 0
 5562 0122 0028     		cmp	r0, #0
 5563 0124 06D1     		bne	.L404
 5564              		.loc 1 2925 0 is_stmt 0 discriminator 1
 5565 0126 A279     		ldrb	r2, [r4, #6]
 5566 0128 8023     		mov	r3, #128
 5567 012a 5B42     		neg	r3, r3
 5568 012c 1343     		orr	r3, r2
 5569 012e A371     		strb	r3, [r4, #6]
 5570 0130 0220     		mov	r0, #2
 5571              	.LVL775:
 5572 0132 18E0     		b	.L388
 5573              	.LVL776:
 5574              	.L404:
2926:.\sd/ff.c     **** 					nsect += ofs / SS(fp->fs);
 5575              		.loc 1 2926 0 is_stmt 1
 5576 0134 6D0A     		lsr	r5, r5, #9
 5577              	.LVL777:
 5578 0136 2D18     		add	r5, r5, r0
 5579              	.LVL778:
 5580 0138 02E0     		b	.L390
 5581              	.LVL779:
 5582              	.L410:
2885:.\sd/ff.c     **** 		fp->fptr = nsect = 0;
 5583              		.loc 1 2885 0
 5584 013a 0025     		mov	r5, #0
 5585              	.LVL780:
 5586 013c 00E0     		b	.L390
 5587              	.LVL781:
 5588              	.L412:
 5589 013e 0025     		mov	r5, #0
 5590              	.LVL782:
 5591              	.L390:
2927:.\sd/ff.c     **** 				}
2928:.\sd/ff.c     **** 			}
2929:.\sd/ff.c     **** 		}
2930:.\sd/ff.c     **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 5592              		.loc 1 2930 0
 5593 0140 A368     		ldr	r3, [r4, #8]
 5594 0142 DA05     		lsl	r2, r3, #23
 5595 0144 03D0     		beq	.L405
 5596              		.loc 1 2930 0 is_stmt 0 discriminator 1
 5597 0146 A169     		ldr	r1, [r4, #24]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 159


 5598 0148 A942     		cmp	r1, r5
 5599 014a 00D0     		beq	.L405
2931:.\sd/ff.c     **** #if !_FS_TINY
2932:.\sd/ff.c     **** #if !_FS_READONLY
2933:.\sd/ff.c     **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
2934:.\sd/ff.c     **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2935:.\sd/ff.c     **** 					ABORT(fp->fs, FR_DISK_ERR);
2936:.\sd/ff.c     **** 				fp->flag &= ~FA__DIRTY;
2937:.\sd/ff.c     **** 			}
2938:.\sd/ff.c     **** #endif
2939:.\sd/ff.c     **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
2940:.\sd/ff.c     **** 				ABORT(fp->fs, FR_DISK_ERR);
2941:.\sd/ff.c     **** #endif
2942:.\sd/ff.c     **** 			fp->dsect = nsect;
 5600              		.loc 1 2942 0 is_stmt 1
 5601 014c A561     		str	r5, [r4, #24]
 5602              	.L405:
2943:.\sd/ff.c     **** 		}
2944:.\sd/ff.c     **** #if !_FS_READONLY
2945:.\sd/ff.c     **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 5603              		.loc 1 2945 0
 5604 014e E268     		ldr	r2, [r4, #12]
 5605 0150 9342     		cmp	r3, r2
 5606 0152 04D9     		bls	.L406
2946:.\sd/ff.c     **** 			fp->fsize = fp->fptr;
 5607              		.loc 1 2946 0
 5608 0154 E360     		str	r3, [r4, #12]
2947:.\sd/ff.c     **** 			fp->flag |= FA__WRITTEN;
 5609              		.loc 1 2947 0
 5610 0156 A279     		ldrb	r2, [r4, #6]
 5611 0158 2023     		mov	r3, #32
 5612 015a 1343     		orr	r3, r2
 5613 015c A371     		strb	r3, [r4, #6]
 5614              	.L406:
 5615              	.LBE6:
2948:.\sd/ff.c     **** 		}
2949:.\sd/ff.c     **** #endif
2950:.\sd/ff.c     **** 	}
2951:.\sd/ff.c     **** 
2952:.\sd/ff.c     **** 	LEAVE_FF(fp->fs, res);
 5616              		.loc 1 2952 0
 5617 015e 381C     		mov	r0, r7
 5618 0160 01E0     		b	.L388
 5619              	.LVL783:
 5620              	.L407:
 5621 0162 00E0     		b	.L388
 5622              	.L408:
2815:.\sd/ff.c     **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 5623              		.loc 1 2815 0
 5624 0164 0220     		mov	r0, #2
 5625              	.LVL784:
 5626              	.L388:
2953:.\sd/ff.c     **** }
 5627              		.loc 1 2953 0
 5628              		@ sp needed
 5629              	.LVL785:
 5630              	.LVL786:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 160


 5631 0166 1CBC     		pop	{r2, r3, r4}
 5632 0168 9046     		mov	r8, r2
 5633 016a 9946     		mov	r9, r3
 5634 016c A246     		mov	r10, r4
 5635 016e F0BD     		pop	{r4, r5, r6, r7, pc}
 5636              		.cfi_endproc
 5637              	.LFE34:
 5638              		.size	f_lseek, .-f_lseek
 5639              		.section	.text.f_opendir,"ax",%progbits
 5640              		.align	2
 5641              		.global	f_opendir
 5642              		.code	16
 5643              		.thumb_func
 5644              		.type	f_opendir, %function
 5645              	f_opendir:
 5646              	.LFB35:
2954:.\sd/ff.c     **** 
2955:.\sd/ff.c     **** 
2956:.\sd/ff.c     **** 
2957:.\sd/ff.c     **** #if _FS_MINIMIZE <= 1
2958:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2959:.\sd/ff.c     **** /* Create a Directroy Object                                             */
2960:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2961:.\sd/ff.c     **** 
2962:.\sd/ff.c     **** FRESULT f_opendir (
2963:.\sd/ff.c     **** 	DIR *dj,			/* Pointer to directory object to create */
2964:.\sd/ff.c     **** 	const TCHAR *path	/* Pointer to the directory path */
2965:.\sd/ff.c     **** )
2966:.\sd/ff.c     **** {
 5647              		.loc 1 2966 0
 5648              		.cfi_startproc
 5649              	.LVL787:
 5650 0000 30B5     		push	{r4, r5, lr}
 5651              		.cfi_def_cfa_offset 12
 5652              		.cfi_offset 4, -12
 5653              		.cfi_offset 5, -8
 5654              		.cfi_offset 14, -4
 5655 0002 87B0     		sub	sp, sp, #28
 5656              		.cfi_def_cfa_offset 40
 5657 0004 041C     		mov	r4, r0
 5658 0006 0191     		str	r1, [sp, #4]
2967:.\sd/ff.c     **** 	FRESULT res;
2968:.\sd/ff.c     **** 	DEF_NAMEBUF;
2969:.\sd/ff.c     **** 
2970:.\sd/ff.c     **** 
2971:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj->fs, 0);
 5659              		.loc 1 2971 0
 5660 0008 01A8     		add	r0, sp, #4
 5661              	.LVL788:
 5662 000a 211C     		mov	r1, r4
 5663              	.LVL789:
 5664 000c 0022     		mov	r2, #0
 5665 000e FFF7FEFF 		bl	chk_mounted
 5666              	.LVL790:
2972:.\sd/ff.c     **** 	if (res == FR_OK) {
 5667              		.loc 1 2972 0
 5668 0012 0028     		cmp	r0, #0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 161


 5669 0014 27D1     		bne	.L415
2973:.\sd/ff.c     **** 		INIT_BUF(*dj);
 5670              		.loc 1 2973 0
 5671 0016 03AB     		add	r3, sp, #12
 5672 0018 A361     		str	r3, [r4, #24]
2974:.\sd/ff.c     **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 5673              		.loc 1 2974 0
 5674 001a 201C     		mov	r0, r4
 5675              	.LVL791:
 5676 001c 0199     		ldr	r1, [sp, #4]
 5677 001e FFF7FEFF 		bl	follow_path
 5678              	.LVL792:
2975:.\sd/ff.c     **** 		FREE_BUF();
2976:.\sd/ff.c     **** 		if (res == FR_OK) {						/* Follow completed */
 5679              		.loc 1 2976 0
 5680 0022 0028     		cmp	r0, #0
 5681 0024 1CD1     		bne	.L416
2977:.\sd/ff.c     **** 			if (dj->dir) {						/* It is not the root dir */
 5682              		.loc 1 2977 0
 5683 0026 6269     		ldr	r2, [r4, #20]
 5684 0028 002A     		cmp	r2, #0
 5685 002a 10D0     		beq	.L417
2978:.\sd/ff.c     **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 5686              		.loc 1 2978 0
 5687 002c D17A     		ldrb	r1, [r2, #11]
 5688 002e CB06     		lsl	r3, r1, #27
 5689 0030 0CD5     		bpl	.L418
2979:.\sd/ff.c     **** 					dj->sclust = LD_CLUST(dj->dir);
 5690              		.loc 1 2979 0
 5691 0032 517D     		ldrb	r1, [r2, #21]
 5692 0034 0902     		lsl	r1, r1, #8
 5693 0036 137D     		ldrb	r3, [r2, #20]
 5694 0038 1943     		orr	r1, r3
 5695 003a 0904     		lsl	r1, r1, #16
 5696 003c D57E     		ldrb	r5, [r2, #27]
 5697 003e 2D02     		lsl	r5, r5, #8
 5698 0040 937E     		ldrb	r3, [r2, #26]
 5699 0042 2A1C     		mov	r2, r5
 5700 0044 1A43     		orr	r2, r3
 5701 0046 0A43     		orr	r2, r1
 5702 0048 A260     		str	r2, [r4, #8]
 5703 004a 00E0     		b	.L417
 5704              	.L418:
2980:.\sd/ff.c     **** 				} else {						/* The object is not a directory */
2981:.\sd/ff.c     **** 					res = FR_NO_PATH;
 5705              		.loc 1 2981 0
 5706 004c 0520     		mov	r0, #5
 5707              	.LVL793:
 5708              	.L417:
2982:.\sd/ff.c     **** 				}
2983:.\sd/ff.c     **** 			}
2984:.\sd/ff.c     **** 			if (res == FR_OK) {
 5709              		.loc 1 2984 0
 5710 004e 0028     		cmp	r0, #0
 5711 0050 06D1     		bne	.L416
2985:.\sd/ff.c     **** 				dj->id = dj->fs->id;
 5712              		.loc 1 2985 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 162


 5713 0052 2268     		ldr	r2, [r4]
 5714 0054 D388     		ldrh	r3, [r2, #6]
 5715 0056 A380     		strh	r3, [r4, #4]
2986:.\sd/ff.c     **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 5716              		.loc 1 2986 0
 5717 0058 201C     		mov	r0, r4
 5718              	.LVL794:
 5719 005a 0021     		mov	r1, #0
 5720 005c FFF7FEFF 		bl	dir_sdi
 5721              	.LVL795:
 5722              	.L416:
2987:.\sd/ff.c     **** 			}
2988:.\sd/ff.c     **** 		}
2989:.\sd/ff.c     **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 5723              		.loc 1 2989 0
 5724 0060 0428     		cmp	r0, #4
 5725 0062 00D1     		bne	.L415
 5726 0064 0520     		mov	r0, #5
 5727              	.LVL796:
 5728              	.L415:
2990:.\sd/ff.c     **** 	}
2991:.\sd/ff.c     **** 
2992:.\sd/ff.c     **** 	LEAVE_FF(dj->fs, res);
2993:.\sd/ff.c     **** }
 5729              		.loc 1 2993 0
 5730 0066 07B0     		add	sp, sp, #28
 5731              		@ sp needed
 5732              	.LVL797:
 5733 0068 30BD     		pop	{r4, r5, pc}
 5734              		.cfi_endproc
 5735              	.LFE35:
 5736              		.size	f_opendir, .-f_opendir
 5737 006a C046     		.section	.text.f_readdir,"ax",%progbits
 5738              		.align	2
 5739              		.global	f_readdir
 5740              		.code	16
 5741              		.thumb_func
 5742              		.type	f_readdir, %function
 5743              	f_readdir:
 5744              	.LFB36:
2994:.\sd/ff.c     **** 
2995:.\sd/ff.c     **** 
2996:.\sd/ff.c     **** 
2997:.\sd/ff.c     **** 
2998:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
2999:.\sd/ff.c     **** /* Read Directory Entry in Sequense                                      */
3000:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3001:.\sd/ff.c     **** 
3002:.\sd/ff.c     **** FRESULT f_readdir (
3003:.\sd/ff.c     **** 	DIR *dj,			/* Pointer to the open directory object */
3004:.\sd/ff.c     **** 	FILINFO *fno		/* Pointer to file information to return */
3005:.\sd/ff.c     **** )
3006:.\sd/ff.c     **** {
 5745              		.loc 1 3006 0
 5746              		.cfi_startproc
 5747              	.LVL798:
 5748 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 163


 5749              		.cfi_def_cfa_offset 20
 5750              		.cfi_offset 4, -20
 5751              		.cfi_offset 5, -16
 5752              		.cfi_offset 6, -12
 5753              		.cfi_offset 7, -8
 5754              		.cfi_offset 14, -4
 5755 0002 85B0     		sub	sp, sp, #20
 5756              		.cfi_def_cfa_offset 40
 5757 0004 041C     		mov	r4, r0
 5758 0006 0F1C     		mov	r7, r1
3007:.\sd/ff.c     **** 	FRESULT res;
3008:.\sd/ff.c     **** 	DEF_NAMEBUF;
3009:.\sd/ff.c     **** 
3010:.\sd/ff.c     **** 
3011:.\sd/ff.c     **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 5759              		.loc 1 3011 0
 5760 0008 8188     		ldrh	r1, [r0, #4]
 5761              	.LVL799:
 5762 000a 0068     		ldr	r0, [r0]
 5763              	.LVL800:
 5764 000c FFF7FEFF 		bl	validate
 5765              	.LVL801:
 5766 0010 061E     		sub	r6, r0, #0
 5767              	.LVL802:
3012:.\sd/ff.c     **** 	if (res == FR_OK) {
 5768              		.loc 1 3012 0
 5769 0012 22D1     		bne	.L421
3013:.\sd/ff.c     **** 		if (!fno) {
 5770              		.loc 1 3013 0
 5771 0014 002F     		cmp	r7, #0
 5772 0016 04D1     		bne	.L422
3014:.\sd/ff.c     **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 5773              		.loc 1 3014 0
 5774 0018 201C     		mov	r0, r4
 5775              	.LVL803:
 5776 001a 0021     		mov	r1, #0
 5777 001c FFF7FEFF 		bl	dir_sdi
 5778              	.LVL804:
 5779 0020 1BE0     		b	.L421
 5780              	.L422:
3015:.\sd/ff.c     **** 		} else {
3016:.\sd/ff.c     **** 			INIT_BUF(*dj);
 5781              		.loc 1 3016 0
 5782 0022 01AB     		add	r3, sp, #4
 5783 0024 A361     		str	r3, [r4, #24]
3017:.\sd/ff.c     **** 			res = dir_read(dj);				/* Read an directory item */
 5784              		.loc 1 3017 0
 5785 0026 201C     		mov	r0, r4
 5786              	.LVL805:
 5787 0028 FFF7FEFF 		bl	dir_read
 5788              	.LVL806:
 5789 002c 051E     		sub	r5, r0, #0
 5790              	.LVL807:
3018:.\sd/ff.c     **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 5791              		.loc 1 3018 0
 5792 002e 042D     		cmp	r5, #4
 5793 0030 02D1     		bne	.L423
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 164


3019:.\sd/ff.c     **** 				dj->sect = 0;
 5794              		.loc 1 3019 0
 5795 0032 0023     		mov	r3, #0
 5796 0034 2361     		str	r3, [r4, #16]
 5797              	.LVL808:
3020:.\sd/ff.c     **** 				res = FR_OK;
 5798              		.loc 1 3020 0
 5799 0036 351C     		mov	r5, r6
 5800              	.LVL809:
 5801              	.L423:
3021:.\sd/ff.c     **** 			}
3022:.\sd/ff.c     **** 			if (res == FR_OK) {				/* A valid entry is found */
 5802              		.loc 1 3022 0
 5803 0038 002D     		cmp	r5, #0
 5804 003a 0DD1     		bne	.L424
3023:.\sd/ff.c     **** 				get_fileinfo(dj, fno);		/* Get the object information */
 5805              		.loc 1 3023 0
 5806 003c 201C     		mov	r0, r4
 5807 003e 391C     		mov	r1, r7
 5808 0040 FFF7FEFF 		bl	get_fileinfo
 5809              	.LVL810:
3024:.\sd/ff.c     **** 				res = dir_next(dj, 0);		/* Increment index for next */
 5810              		.loc 1 3024 0
 5811 0044 201C     		mov	r0, r4
 5812 0046 0021     		mov	r1, #0
 5813 0048 FFF7FEFF 		bl	dir_next
 5814              	.LVL811:
3025:.\sd/ff.c     **** 				if (res == FR_NO_FILE) {
 5815              		.loc 1 3025 0
 5816 004c 0428     		cmp	r0, #4
 5817 004e 04D1     		bne	.L421
3026:.\sd/ff.c     **** 					dj->sect = 0;
 5818              		.loc 1 3026 0
 5819 0050 0023     		mov	r3, #0
 5820 0052 2361     		str	r3, [r4, #16]
 5821              	.LVL812:
3027:.\sd/ff.c     **** 					res = FR_OK;
 5822              		.loc 1 3027 0
 5823 0054 281C     		mov	r0, r5
 5824 0056 00E0     		b	.L421
 5825              	.LVL813:
 5826              	.L424:
 5827 0058 281C     		mov	r0, r5
 5828              	.LVL814:
 5829              	.L421:
3028:.\sd/ff.c     **** 				}
3029:.\sd/ff.c     **** 			}
3030:.\sd/ff.c     **** 			FREE_BUF();
3031:.\sd/ff.c     **** 		}
3032:.\sd/ff.c     **** 	}
3033:.\sd/ff.c     **** 
3034:.\sd/ff.c     **** 	LEAVE_FF(dj->fs, res);
3035:.\sd/ff.c     **** }
 5830              		.loc 1 3035 0
 5831 005a 05B0     		add	sp, sp, #20
 5832              		@ sp needed
 5833              	.LVL815:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 165


 5834              	.LVL816:
 5835 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 5836              		.cfi_endproc
 5837              	.LFE36:
 5838              		.size	f_readdir, .-f_readdir
 5839 005e C046     		.section	.text.f_stat,"ax",%progbits
 5840              		.align	2
 5841              		.global	f_stat
 5842              		.code	16
 5843              		.thumb_func
 5844              		.type	f_stat, %function
 5845              	f_stat:
 5846              	.LFB37:
3036:.\sd/ff.c     **** 
3037:.\sd/ff.c     **** 
3038:.\sd/ff.c     **** 
3039:.\sd/ff.c     **** #if _FS_MINIMIZE == 0
3040:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3041:.\sd/ff.c     **** /* Get File Status                                                       */
3042:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3043:.\sd/ff.c     **** 
3044:.\sd/ff.c     **** FRESULT f_stat (
3045:.\sd/ff.c     **** 	const TCHAR *path,	/* Pointer to the file path */
3046:.\sd/ff.c     **** 	FILINFO *fno		/* Pointer to file information to return */
3047:.\sd/ff.c     **** )
3048:.\sd/ff.c     **** {
 5847              		.loc 1 3048 0
 5848              		.cfi_startproc
 5849              	.LVL817:
 5850 0000 30B5     		push	{r4, r5, lr}
 5851              		.cfi_def_cfa_offset 12
 5852              		.cfi_offset 4, -12
 5853              		.cfi_offset 5, -8
 5854              		.cfi_offset 14, -4
 5855 0002 8DB0     		sub	sp, sp, #52
 5856              		.cfi_def_cfa_offset 64
 5857 0004 0190     		str	r0, [sp, #4]
 5858 0006 0D1C     		mov	r5, r1
3049:.\sd/ff.c     **** 	FRESULT res;
3050:.\sd/ff.c     **** 	DIR dj;
3051:.\sd/ff.c     **** 	DEF_NAMEBUF;
3052:.\sd/ff.c     **** 
3053:.\sd/ff.c     **** 
3054:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 0);
 5859              		.loc 1 3054 0
 5860 0008 01A8     		add	r0, sp, #4
 5861              	.LVL818:
 5862 000a 05A9     		add	r1, sp, #20
 5863              	.LVL819:
 5864 000c 0022     		mov	r2, #0
 5865 000e FFF7FEFF 		bl	chk_mounted
 5866              	.LVL820:
 5867 0012 041E     		sub	r4, r0, #0
 5868              	.LVL821:
3055:.\sd/ff.c     **** 	if (res == FR_OK) {
 5869              		.loc 1 3055 0
 5870 0014 10D1     		bne	.L426
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 166


3056:.\sd/ff.c     **** 		INIT_BUF(dj);
 5871              		.loc 1 3056 0
 5872 0016 02AB     		add	r3, sp, #8
 5873 0018 0B93     		str	r3, [sp, #44]
3057:.\sd/ff.c     **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5874              		.loc 1 3057 0
 5875 001a 05A8     		add	r0, sp, #20
 5876              	.LVL822:
 5877 001c 0199     		ldr	r1, [sp, #4]
 5878 001e FFF7FEFF 		bl	follow_path
 5879              	.LVL823:
 5880 0022 041E     		sub	r4, r0, #0
 5881              	.LVL824:
3058:.\sd/ff.c     **** 		if (res == FR_OK) {				/* Follow completed */
 5882              		.loc 1 3058 0
 5883 0024 08D1     		bne	.L426
3059:.\sd/ff.c     **** 			if (dj.dir)		/* Found an object */
 5884              		.loc 1 3059 0
 5885 0026 0A9B     		ldr	r3, [sp, #40]
 5886 0028 002B     		cmp	r3, #0
 5887 002a 04D0     		beq	.L427
3060:.\sd/ff.c     **** 				get_fileinfo(&dj, fno);
 5888              		.loc 1 3060 0
 5889 002c 05A8     		add	r0, sp, #20
 5890              	.LVL825:
 5891 002e 291C     		mov	r1, r5
 5892 0030 FFF7FEFF 		bl	get_fileinfo
 5893              	.LVL826:
 5894 0034 00E0     		b	.L426
 5895              	.LVL827:
 5896              	.L427:
3061:.\sd/ff.c     **** 			else			/* It is root dir */
3062:.\sd/ff.c     **** 				res = FR_INVALID_NAME;
 5897              		.loc 1 3062 0
 5898 0036 0624     		mov	r4, #6
 5899              	.LVL828:
 5900              	.L426:
3063:.\sd/ff.c     **** 		}
3064:.\sd/ff.c     **** 		FREE_BUF();
3065:.\sd/ff.c     **** 	}
3066:.\sd/ff.c     **** 
3067:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
3068:.\sd/ff.c     **** }
 5901              		.loc 1 3068 0
 5902 0038 201C     		mov	r0, r4
 5903 003a 0DB0     		add	sp, sp, #52
 5904              		@ sp needed
 5905              	.LVL829:
 5906              	.LVL830:
 5907 003c 30BD     		pop	{r4, r5, pc}
 5908              		.cfi_endproc
 5909              	.LFE37:
 5910              		.size	f_stat, .-f_stat
 5911 003e C046     		.section	.text.f_getfree,"ax",%progbits
 5912              		.align	2
 5913              		.global	f_getfree
 5914              		.code	16
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 167


 5915              		.thumb_func
 5916              		.type	f_getfree, %function
 5917              	f_getfree:
 5918              	.LFB38:
3069:.\sd/ff.c     **** 
3070:.\sd/ff.c     **** 
3071:.\sd/ff.c     **** 
3072:.\sd/ff.c     **** #if !_FS_READONLY
3073:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3074:.\sd/ff.c     **** /* Get Number of Free Clusters                                           */
3075:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3076:.\sd/ff.c     **** 
3077:.\sd/ff.c     **** FRESULT f_getfree (
3078:.\sd/ff.c     **** 	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
3079:.\sd/ff.c     **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
3080:.\sd/ff.c     **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
3081:.\sd/ff.c     **** )
3082:.\sd/ff.c     **** {
 5919              		.loc 1 3082 0
 5920              		.cfi_startproc
 5921              	.LVL831:
 5922 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5923              		.cfi_def_cfa_offset 20
 5924              		.cfi_offset 4, -20
 5925              		.cfi_offset 5, -16
 5926              		.cfi_offset 6, -12
 5927              		.cfi_offset 7, -8
 5928              		.cfi_offset 14, -4
 5929 0002 5F46     		mov	r7, fp
 5930 0004 5646     		mov	r6, r10
 5931 0006 4D46     		mov	r5, r9
 5932 0008 4446     		mov	r4, r8
 5933 000a F0B4     		push	{r4, r5, r6, r7}
 5934              		.cfi_def_cfa_offset 36
 5935              		.cfi_offset 8, -36
 5936              		.cfi_offset 9, -32
 5937              		.cfi_offset 10, -28
 5938              		.cfi_offset 11, -24
 5939 000c 83B0     		sub	sp, sp, #12
 5940              		.cfi_def_cfa_offset 48
 5941 000e 0190     		str	r0, [sp, #4]
 5942 0010 8A46     		mov	r10, r1
 5943 0012 151C     		mov	r5, r2
3083:.\sd/ff.c     **** 	FRESULT res;
3084:.\sd/ff.c     **** 	DWORD n, clst, sect, stat;
3085:.\sd/ff.c     **** 	UINT i;
3086:.\sd/ff.c     **** 	BYTE fat, *p;
3087:.\sd/ff.c     **** 
3088:.\sd/ff.c     **** 
3089:.\sd/ff.c     **** 	/* Get drive number */
3090:.\sd/ff.c     **** 	res = chk_mounted(&path, fatfs, 0);
 5944              		.loc 1 3090 0
 5945 0014 01A8     		add	r0, sp, #4
 5946              	.LVL832:
 5947 0016 111C     		mov	r1, r2
 5948              	.LVL833:
 5949 0018 0022     		mov	r2, #0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 168


 5950              	.LVL834:
 5951 001a FFF7FEFF 		bl	chk_mounted
 5952              	.LVL835:
 5953 001e 071E     		sub	r7, r0, #0
 5954              	.LVL836:
3091:.\sd/ff.c     **** 	if (res == FR_OK) {
 5955              		.loc 1 3091 0
 5956 0020 66D1     		bne	.L429
3092:.\sd/ff.c     **** 		/* If free_clust is valid, return it without full cluster scan */
3093:.\sd/ff.c     **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
 5957              		.loc 1 3093 0
 5958 0022 2B68     		ldr	r3, [r5]
 5959 0024 1A69     		ldr	r2, [r3, #16]
 5960 0026 9C69     		ldr	r4, [r3, #24]
 5961 0028 A11E     		sub	r1, r4, #2
 5962 002a 8A42     		cmp	r2, r1
 5963 002c 02D8     		bhi	.L430
3094:.\sd/ff.c     **** 			*nclst = (*fatfs)->free_clust;
 5964              		.loc 1 3094 0
 5965 002e 5046     		mov	r0, r10
 5966              	.LVL837:
 5967 0030 0260     		str	r2, [r0]
 5968 0032 5DE0     		b	.L429
 5969              	.LVL838:
 5970              	.L430:
3095:.\sd/ff.c     **** 		} else {
3096:.\sd/ff.c     **** 			/* Get number of free clusters */
3097:.\sd/ff.c     **** 			fat = (*fatfs)->fs_type;
 5971              		.loc 1 3097 0
 5972 0034 1978     		ldrb	r1, [r3]
 5973 0036 8846     		mov	r8, r1
 5974              	.LVL839:
3098:.\sd/ff.c     **** 			n = 0;
3099:.\sd/ff.c     **** 			if (fat == FS_FAT12) {
 5975              		.loc 1 3099 0
 5976 0038 0129     		cmp	r1, #1
 5977 003a 12D1     		bne	.L431
 5978 003c 0224     		mov	r4, #2
 5979 003e 0026     		mov	r6, #0
 5980              	.LVL840:
 5981              	.L434:
3100:.\sd/ff.c     **** 				clst = 2;
3101:.\sd/ff.c     **** 				do {
3102:.\sd/ff.c     **** 					stat = get_fat(*fatfs, clst);
 5982              		.loc 1 3102 0
 5983 0040 2868     		ldr	r0, [r5]
 5984 0042 211C     		mov	r1, r4
 5985 0044 FFF7FEFF 		bl	get_fat
 5986              	.LVL841:
3103:.\sd/ff.c     **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 5987              		.loc 1 3103 0
 5988 0048 421C     		add	r2, r0, #1
 5989 004a 44D0     		beq	.L442
3104:.\sd/ff.c     **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 5990              		.loc 1 3104 0
 5991 004c 0128     		cmp	r0, #1
 5992 004e 44D0     		beq	.L443
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 169


3105:.\sd/ff.c     **** 					if (stat == 0) n++;
 5993              		.loc 1 3105 0
 5994 0050 0028     		cmp	r0, #0
 5995 0052 00D1     		bne	.L433
 5996              		.loc 1 3105 0 is_stmt 0 discriminator 1
 5997 0054 0136     		add	r6, r6, #1
 5998              	.LVL842:
 5999              	.L433:
3106:.\sd/ff.c     **** 				} while (++clst < (*fatfs)->n_fatent);
 6000              		.loc 1 3106 0 is_stmt 1
 6001 0056 0134     		add	r4, r4, #1
 6002              	.LVL843:
 6003 0058 2B68     		ldr	r3, [r5]
 6004 005a 9B69     		ldr	r3, [r3, #24]
 6005 005c 9C42     		cmp	r4, r3
 6006 005e EFD3     		bcc	.L434
 6007 0060 3CE0     		b	.L432
 6008              	.LVL844:
 6009              	.L431:
3107:.\sd/ff.c     **** 			} else {
3108:.\sd/ff.c     **** 				clst = (*fatfs)->n_fatent;
3109:.\sd/ff.c     **** 				sect = (*fatfs)->fatbase;
 6010              		.loc 1 3109 0
 6011 0062 1B6A     		ldr	r3, [r3, #32]
 6012              	.LVL845:
 6013 0064 0093     		str	r3, [sp]
 6014              	.LVL846:
3110:.\sd/ff.c     **** 				i = 0; p = 0;
 6015              		.loc 1 3110 0
 6016 0066 0023     		mov	r3, #0
 6017              	.LVL847:
 6018 0068 0022     		mov	r2, #0
3098:.\sd/ff.c     **** 			n = 0;
 6019              		.loc 1 3098 0
 6020 006a 0026     		mov	r6, #0
3111:.\sd/ff.c     **** 				do {
3112:.\sd/ff.c     **** 					if (!i) {
3113:.\sd/ff.c     **** 						res = move_window(*fatfs, sect++);
3114:.\sd/ff.c     **** 						if (res != FR_OK) break;
3115:.\sd/ff.c     **** 						p = (*fatfs)->win;
3116:.\sd/ff.c     **** 						i = SS(*fatfs);
 6021              		.loc 1 3116 0
 6022 006c 8020     		mov	r0, #128
 6023              	.LVL848:
 6024 006e 8000     		lsl	r0, r0, #2
 6025 0070 8346     		mov	fp, r0
 6026              	.LVL849:
 6027              	.L440:
3112:.\sd/ff.c     **** 					if (!i) {
 6028              		.loc 1 3112 0
 6029 0072 002A     		cmp	r2, #0
 6030 0074 0ED1     		bne	.L435
3113:.\sd/ff.c     **** 						res = move_window(*fatfs, sect++);
 6031              		.loc 1 3113 0
 6032 0076 009B     		ldr	r3, [sp]
 6033              	.LVL850:
 6034 0078 9946     		mov	r9, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 170


 6035 007a 0123     		mov	r3, #1
 6036 007c 9944     		add	r9, r9, r3
 6037              	.LVL851:
 6038 007e 2868     		ldr	r0, [r5]
 6039 0080 0099     		ldr	r1, [sp]
 6040 0082 FFF7FEFF 		bl	move_window
 6041              	.LVL852:
 6042 0086 071E     		sub	r7, r0, #0
 6043              	.LVL853:
3114:.\sd/ff.c     **** 						if (res != FR_OK) break;
 6044              		.loc 1 3114 0
 6045 0088 28D1     		bne	.L432
3115:.\sd/ff.c     **** 						p = (*fatfs)->win;
 6046              		.loc 1 3115 0
 6047 008a 2B68     		ldr	r3, [r5]
 6048 008c 3033     		add	r3, r3, #48
 6049              	.LVL854:
3113:.\sd/ff.c     **** 						res = move_window(*fatfs, sect++);
 6050              		.loc 1 3113 0
 6051 008e 4946     		mov	r1, r9
 6052 0090 0091     		str	r1, [sp]
 6053              		.loc 1 3116 0
 6054 0092 5A46     		mov	r2, fp
 6055              	.LVL855:
 6056              	.L435:
3117:.\sd/ff.c     **** 					}
3118:.\sd/ff.c     **** 					if (fat == FS_FAT16) {
 6057              		.loc 1 3118 0
 6058 0094 4046     		mov	r0, r8
 6059 0096 0228     		cmp	r0, #2
 6060 0098 08D1     		bne	.L436
 6061              	.LVL856:
3119:.\sd/ff.c     **** 						if (LD_WORD(p) == 0) n++;
 6062              		.loc 1 3119 0
 6063 009a 5878     		ldrb	r0, [r3, #1]
 6064              	.LVL857:
 6065 009c 0002     		lsl	r0, r0, #8
 6066 009e 1978     		ldrb	r1, [r3]
 6067 00a0 0143     		orr	r1, r0
 6068 00a2 00D1     		bne	.L437
 6069              		.loc 1 3119 0 is_stmt 0 discriminator 1
 6070 00a4 0136     		add	r6, r6, #1
 6071              	.LVL858:
 6072              	.L437:
3120:.\sd/ff.c     **** 						p += 2; i -= 2;
 6073              		.loc 1 3120 0 is_stmt 1
 6074 00a6 0233     		add	r3, r3, #2
 6075              	.LVL859:
 6076 00a8 023A     		sub	r2, r2, #2
 6077              	.LVL860:
 6078 00aa 10E0     		b	.L438
 6079              	.LVL861:
 6080              	.L436:
3121:.\sd/ff.c     **** 					} else {
3122:.\sd/ff.c     **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 6081              		.loc 1 3122 0
 6082 00ac D878     		ldrb	r0, [r3, #3]
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 171


 6083              	.LVL862:
 6084 00ae 0006     		lsl	r0, r0, #24
 6085 00b0 8446     		mov	ip, r0
 6086 00b2 9878     		ldrb	r0, [r3, #2]
 6087 00b4 0004     		lsl	r0, r0, #16
 6088 00b6 6146     		mov	r1, ip
 6089 00b8 0143     		orr	r1, r0
 6090 00ba 5878     		ldrb	r0, [r3, #1]
 6091 00bc 0002     		lsl	r0, r0, #8
 6092 00be 0143     		orr	r1, r0
 6093 00c0 1878     		ldrb	r0, [r3]
 6094 00c2 0843     		orr	r0, r1
 6095 00c4 0001     		lsl	r0, r0, #4
 6096 00c6 00D1     		bne	.L439
 6097              		.loc 1 3122 0 is_stmt 0 discriminator 1
 6098 00c8 0136     		add	r6, r6, #1
 6099              	.LVL863:
 6100              	.L439:
3123:.\sd/ff.c     **** 						p += 4; i -= 4;
 6101              		.loc 1 3123 0 is_stmt 1
 6102 00ca 0433     		add	r3, r3, #4
 6103              	.LVL864:
 6104 00cc 043A     		sub	r2, r2, #4
 6105              	.LVL865:
 6106              	.L438:
3124:.\sd/ff.c     **** 					}
3125:.\sd/ff.c     **** 				} while (--clst);
 6107              		.loc 1 3125 0
 6108 00ce 013C     		sub	r4, r4, #1
 6109              	.LVL866:
 6110 00d0 002C     		cmp	r4, #0
 6111 00d2 CED1     		bne	.L440
 6112 00d4 02E0     		b	.L432
 6113              	.LVL867:
 6114              	.L442:
3103:.\sd/ff.c     **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6115              		.loc 1 3103 0
 6116 00d6 0127     		mov	r7, #1
 6117              	.LVL868:
 6118 00d8 00E0     		b	.L432
 6119              	.LVL869:
 6120              	.L443:
3104:.\sd/ff.c     **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6121              		.loc 1 3104 0
 6122 00da 0227     		mov	r7, #2
 6123              	.LVL870:
 6124              	.L432:
3126:.\sd/ff.c     **** 			}
3127:.\sd/ff.c     **** 			(*fatfs)->free_clust = n;
 6125              		.loc 1 3127 0
 6126 00dc 2B68     		ldr	r3, [r5]
 6127 00de 1E61     		str	r6, [r3, #16]
3128:.\sd/ff.c     **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 6128              		.loc 1 3128 0
 6129 00e0 4246     		mov	r2, r8
 6130 00e2 032A     		cmp	r2, #3
 6131 00e4 02D1     		bne	.L441
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 172


 6132              	.LVL871:
 6133              		.loc 1 3128 0 is_stmt 0 discriminator 1
 6134 00e6 2B68     		ldr	r3, [r5]
 6135 00e8 0122     		mov	r2, #1
 6136              	.LVL872:
 6137 00ea 5A71     		strb	r2, [r3, #5]
 6138              	.L441:
3129:.\sd/ff.c     **** 			*nclst = n;
 6139              		.loc 1 3129 0 is_stmt 1
 6140 00ec 5346     		mov	r3, r10
 6141 00ee 1E60     		str	r6, [r3]
 6142              	.LVL873:
 6143              	.L429:
3130:.\sd/ff.c     **** 		}
3131:.\sd/ff.c     **** 	}
3132:.\sd/ff.c     **** 	LEAVE_FF(*fatfs, res);
3133:.\sd/ff.c     **** }
 6144              		.loc 1 3133 0
 6145 00f0 381C     		mov	r0, r7
 6146 00f2 03B0     		add	sp, sp, #12
 6147              		@ sp needed
 6148              	.LVL874:
 6149              	.LVL875:
 6150              	.LVL876:
 6151 00f4 3CBC     		pop	{r2, r3, r4, r5}
 6152 00f6 9046     		mov	r8, r2
 6153 00f8 9946     		mov	r9, r3
 6154 00fa A246     		mov	r10, r4
 6155 00fc AB46     		mov	fp, r5
 6156 00fe F0BD     		pop	{r4, r5, r6, r7, pc}
 6157              		.cfi_endproc
 6158              	.LFE38:
 6159              		.size	f_getfree, .-f_getfree
 6160              		.section	.text.f_truncate,"ax",%progbits
 6161              		.align	2
 6162              		.global	f_truncate
 6163              		.code	16
 6164              		.thumb_func
 6165              		.type	f_truncate, %function
 6166              	f_truncate:
 6167              	.LFB39:
3134:.\sd/ff.c     **** 
3135:.\sd/ff.c     **** 
3136:.\sd/ff.c     **** 
3137:.\sd/ff.c     **** 
3138:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3139:.\sd/ff.c     **** /* Truncate File                                                         */
3140:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3141:.\sd/ff.c     **** 
3142:.\sd/ff.c     **** FRESULT f_truncate (
3143:.\sd/ff.c     **** 	FIL *fp		/* Pointer to the file object */
3144:.\sd/ff.c     **** )
3145:.\sd/ff.c     **** {
 6168              		.loc 1 3145 0
 6169              		.cfi_startproc
 6170              	.LVL877:
 6171 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 173


 6172              		.cfi_def_cfa_offset 16
 6173              		.cfi_offset 4, -16
 6174              		.cfi_offset 5, -12
 6175              		.cfi_offset 6, -8
 6176              		.cfi_offset 14, -4
 6177 0002 041C     		mov	r4, r0
3146:.\sd/ff.c     **** 	FRESULT res;
3147:.\sd/ff.c     **** 	DWORD ncl;
3148:.\sd/ff.c     **** 
3149:.\sd/ff.c     **** 
3150:.\sd/ff.c     **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 6178              		.loc 1 3150 0
 6179 0004 8188     		ldrh	r1, [r0, #4]
 6180 0006 0068     		ldr	r0, [r0]
 6181              	.LVL878:
 6182 0008 FFF7FEFF 		bl	validate
 6183              	.LVL879:
 6184 000c 051E     		sub	r5, r0, #0
 6185              	.LVL880:
3151:.\sd/ff.c     **** 	if (res == FR_OK) {
 6186              		.loc 1 3151 0
 6187 000e 09D1     		bne	.L447
3152:.\sd/ff.c     **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 6188              		.loc 1 3152 0
 6189 0010 A379     		ldrb	r3, [r4, #6]
 6190 0012 5AB2     		sxtb	r2, r3
 6191 0014 002A     		cmp	r2, #0
 6192 0016 02DB     		blt	.L453
3153:.\sd/ff.c     **** 			res = FR_INT_ERR;
3154:.\sd/ff.c     **** 		} else {
3155:.\sd/ff.c     **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 6193              		.loc 1 3155 0
 6194 0018 9A07     		lsl	r2, r3, #30
 6195 001a 02D5     		bpl	.L454
 6196 001c 02E0     		b	.L447
 6197              	.L453:
3153:.\sd/ff.c     **** 			res = FR_INT_ERR;
 6198              		.loc 1 3153 0
 6199 001e 0225     		mov	r5, #2
 6200 0020 00E0     		b	.L447
 6201              	.L454:
3156:.\sd/ff.c     **** 				res = FR_DENIED;
 6202              		.loc 1 3156 0
 6203 0022 0725     		mov	r5, #7
 6204              	.L447:
 6205              	.LVL881:
3157:.\sd/ff.c     **** 		}
3158:.\sd/ff.c     **** 	}
3159:.\sd/ff.c     **** 	if (res == FR_OK) {
 6206              		.loc 1 3159 0
 6207 0024 002D     		cmp	r5, #0
 6208 0026 35D1     		bne	.L448
3160:.\sd/ff.c     **** 		if (fp->fsize > fp->fptr) {
 6209              		.loc 1 3160 0
 6210 0028 A368     		ldr	r3, [r4, #8]
 6211 002a E268     		ldr	r2, [r4, #12]
 6212 002c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 174


 6213 002e 2AD9     		bls	.L449
3161:.\sd/ff.c     **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 6214              		.loc 1 3161 0
 6215 0030 E360     		str	r3, [r4, #12]
3162:.\sd/ff.c     **** 			fp->flag |= FA__WRITTEN;
 6216              		.loc 1 3162 0
 6217 0032 A179     		ldrb	r1, [r4, #6]
 6218 0034 2022     		mov	r2, #32
 6219 0036 0A43     		orr	r2, r1
 6220 0038 A271     		strb	r2, [r4, #6]
3163:.\sd/ff.c     **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 6221              		.loc 1 3163 0
 6222 003a 002B     		cmp	r3, #0
 6223 003c 07D1     		bne	.L450
3164:.\sd/ff.c     **** 				res = remove_chain(fp->fs, fp->sclust);
 6224              		.loc 1 3164 0
 6225 003e 2068     		ldr	r0, [r4]
 6226 0040 2169     		ldr	r1, [r4, #16]
 6227 0042 FFF7FEFF 		bl	remove_chain
 6228              	.LVL882:
 6229 0046 051C     		mov	r5, r0
 6230              	.LVL883:
3165:.\sd/ff.c     **** 				fp->sclust = 0;
 6231              		.loc 1 3165 0
 6232 0048 0023     		mov	r3, #0
 6233 004a 2361     		str	r3, [r4, #16]
 6234 004c 1BE0     		b	.L449
 6235              	.LVL884:
 6236              	.L450:
3166:.\sd/ff.c     **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3167:.\sd/ff.c     **** 				ncl = get_fat(fp->fs, fp->clust);
 6237              		.loc 1 3167 0
 6238 004e 2068     		ldr	r0, [r4]
 6239 0050 6169     		ldr	r1, [r4, #20]
 6240 0052 FFF7FEFF 		bl	get_fat
 6241              	.LVL885:
 6242 0056 061C     		mov	r6, r0
 6243              	.LVL886:
3168:.\sd/ff.c     **** 				res = FR_OK;
3169:.\sd/ff.c     **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 6244              		.loc 1 3169 0
 6245 0058 431C     		add	r3, r0, #1
 6246 005a 00D1     		bne	.L451
 6247 005c 0125     		mov	r5, #1
 6248              	.L451:
 6249              	.LVL887:
3170:.\sd/ff.c     **** 				if (ncl == 1) res = FR_INT_ERR;
 6250              		.loc 1 3170 0
 6251 005e 012E     		cmp	r6, #1
 6252 0060 00D1     		bne	.L452
 6253 0062 0225     		mov	r5, #2
 6254              	.LVL888:
 6255              	.L452:
3171:.\sd/ff.c     **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 6256              		.loc 1 3171 0
 6257 0064 002D     		cmp	r5, #0
 6258 0066 0ED1     		bne	.L449
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 175


 6259              		.loc 1 3171 0 is_stmt 0 discriminator 1
 6260 0068 2068     		ldr	r0, [r4]
 6261              	.LVL889:
 6262 006a 8269     		ldr	r2, [r0, #24]
 6263 006c B242     		cmp	r2, r6
 6264 006e 0AD9     		bls	.L449
3172:.\sd/ff.c     **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 6265              		.loc 1 3172 0 is_stmt 1
 6266 0070 6169     		ldr	r1, [r4, #20]
 6267 0072 094A     		ldr	r2, .L457
 6268 0074 FFF7FEFF 		bl	put_fat
 6269              	.LVL890:
 6270 0078 051E     		sub	r5, r0, #0
 6271              	.LVL891:
3173:.\sd/ff.c     **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 6272              		.loc 1 3173 0
 6273 007a 04D1     		bne	.L449
 6274              		.loc 1 3173 0 is_stmt 0 discriminator 1
 6275 007c 2068     		ldr	r0, [r4]
 6276              	.LVL892:
 6277 007e 311C     		mov	r1, r6
 6278 0080 FFF7FEFF 		bl	remove_chain
 6279              	.LVL893:
 6280 0084 051C     		mov	r5, r0
 6281              	.LVL894:
 6282              	.L449:
3174:.\sd/ff.c     **** 				}
3175:.\sd/ff.c     **** 			}
3176:.\sd/ff.c     **** 		}
3177:.\sd/ff.c     **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 6283              		.loc 1 3177 0 is_stmt 1
 6284 0086 002D     		cmp	r5, #0
 6285 0088 04D0     		beq	.L448
 6286              		.loc 1 3177 0 is_stmt 0 discriminator 1
 6287 008a A279     		ldrb	r2, [r4, #6]
 6288 008c 8023     		mov	r3, #128
 6289 008e 5B42     		neg	r3, r3
 6290 0090 1343     		orr	r3, r2
 6291 0092 A371     		strb	r3, [r4, #6]
 6292              	.LVL895:
 6293              	.L448:
3178:.\sd/ff.c     **** 	}
3179:.\sd/ff.c     **** 
3180:.\sd/ff.c     **** 	LEAVE_FF(fp->fs, res);
3181:.\sd/ff.c     **** }
 6294              		.loc 1 3181 0 is_stmt 1
 6295 0094 281C     		mov	r0, r5
 6296              		@ sp needed
 6297              	.LVL896:
 6298              	.LVL897:
 6299 0096 70BD     		pop	{r4, r5, r6, pc}
 6300              	.L458:
 6301              		.align	2
 6302              	.L457:
 6303 0098 FFFFFF0F 		.word	268435455
 6304              		.cfi_endproc
 6305              	.LFE39:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 176


 6306              		.size	f_truncate, .-f_truncate
 6307              		.section	.text.f_unlink,"ax",%progbits
 6308              		.align	2
 6309              		.global	f_unlink
 6310              		.code	16
 6311              		.thumb_func
 6312              		.type	f_unlink, %function
 6313              	f_unlink:
 6314              	.LFB40:
3182:.\sd/ff.c     **** 
3183:.\sd/ff.c     **** 
3184:.\sd/ff.c     **** 
3185:.\sd/ff.c     **** 
3186:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3187:.\sd/ff.c     **** /* Delete a File or Directory                                            */
3188:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3189:.\sd/ff.c     **** 
3190:.\sd/ff.c     **** FRESULT f_unlink (
3191:.\sd/ff.c     **** 	const TCHAR *path		/* Pointer to the file or directory path */
3192:.\sd/ff.c     **** )
3193:.\sd/ff.c     **** {
 6315              		.loc 1 3193 0
 6316              		.cfi_startproc
 6317              	.LVL898:
 6318 0000 30B5     		push	{r4, r5, lr}
 6319              		.cfi_def_cfa_offset 12
 6320              		.cfi_offset 4, -12
 6321              		.cfi_offset 5, -8
 6322              		.cfi_offset 14, -4
 6323 0002 95B0     		sub	sp, sp, #84
 6324              		.cfi_def_cfa_offset 96
 6325 0004 0190     		str	r0, [sp, #4]
3194:.\sd/ff.c     **** 	FRESULT res;
3195:.\sd/ff.c     **** 	DIR dj, sdj;
3196:.\sd/ff.c     **** 	BYTE *dir;
3197:.\sd/ff.c     **** 	DWORD dclst;
3198:.\sd/ff.c     **** 	DEF_NAMEBUF;
3199:.\sd/ff.c     **** 
3200:.\sd/ff.c     **** 
3201:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 1);
 6326              		.loc 1 3201 0
 6327 0006 01A8     		add	r0, sp, #4
 6328              	.LVL899:
 6329 0008 0DA9     		add	r1, sp, #52
 6330 000a 0122     		mov	r2, #1
 6331 000c FFF7FEFF 		bl	chk_mounted
 6332              	.LVL900:
 6333 0010 041E     		sub	r4, r0, #0
 6334              	.LVL901:
3202:.\sd/ff.c     **** 	if (res == FR_OK) {
 6335              		.loc 1 3202 0
 6336 0012 55D1     		bne	.L460
3203:.\sd/ff.c     **** 		INIT_BUF(dj);
 6337              		.loc 1 3203 0
 6338 0014 03AB     		add	r3, sp, #12
 6339 0016 1393     		str	r3, [sp, #76]
3204:.\sd/ff.c     **** 		res = follow_path(&dj, path);		/* Follow the file path */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 177


 6340              		.loc 1 3204 0
 6341 0018 0DA8     		add	r0, sp, #52
 6342              	.LVL902:
 6343 001a 0199     		ldr	r1, [sp, #4]
 6344 001c FFF7FEFF 		bl	follow_path
 6345              	.LVL903:
 6346 0020 041E     		sub	r4, r0, #0
 6347              	.LVL904:
3205:.\sd/ff.c     **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3206:.\sd/ff.c     **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
3207:.\sd/ff.c     **** #if _FS_SHARE
3208:.\sd/ff.c     **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
 6348              		.loc 1 3208 0
 6349 0022 04D1     		bne	.L461
 6350              		.loc 1 3208 0 is_stmt 0 discriminator 1
 6351 0024 0DA8     		add	r0, sp, #52
 6352              	.LVL905:
 6353 0026 0221     		mov	r1, #2
 6354 0028 FFF7FEFF 		bl	chk_lock
 6355              	.LVL906:
 6356 002c 041C     		mov	r4, r0
 6357              	.LVL907:
 6358              	.L461:
3209:.\sd/ff.c     **** #endif
3210:.\sd/ff.c     **** 		if (res == FR_OK) {					/* The object is accessible */
 6359              		.loc 1 3210 0 is_stmt 1
 6360 002e 002C     		cmp	r4, #0
 6361 0030 46D1     		bne	.L460
3211:.\sd/ff.c     **** 			dir = dj.dir;
 6362              		.loc 1 3211 0
 6363 0032 129B     		ldr	r3, [sp, #72]
 6364              	.LVL908:
3212:.\sd/ff.c     **** 			if (!dir) {
 6365              		.loc 1 3212 0
 6366 0034 002B     		cmp	r3, #0
 6367 0036 03D0     		beq	.L466
3213:.\sd/ff.c     **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
3214:.\sd/ff.c     **** 			} else {
3215:.\sd/ff.c     **** 				if (dir[DIR_Attr] & AM_RDO)
 6368              		.loc 1 3215 0
 6369 0038 DA7A     		ldrb	r2, [r3, #11]
 6370 003a D107     		lsl	r1, r2, #31
 6371 003c 02D4     		bmi	.L467
 6372 003e 02E0     		b	.L462
 6373              	.L466:
3213:.\sd/ff.c     **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 6374              		.loc 1 3213 0
 6375 0040 0624     		mov	r4, #6
 6376              	.LVL909:
 6377 0042 00E0     		b	.L462
 6378              	.LVL910:
 6379              	.L467:
3216:.\sd/ff.c     **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 6380              		.loc 1 3216 0
 6381 0044 0724     		mov	r4, #7
 6382              	.LVL911:
 6383              	.L462:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 178


3217:.\sd/ff.c     **** 			}
3218:.\sd/ff.c     **** 			dclst = LD_CLUST(dir);
 6384              		.loc 1 3218 0
 6385 0046 597D     		ldrb	r1, [r3, #21]
 6386 0048 0902     		lsl	r1, r1, #8
 6387 004a 1A7D     		ldrb	r2, [r3, #20]
 6388 004c 1143     		orr	r1, r2
 6389 004e 0904     		lsl	r1, r1, #16
 6390 0050 DA7E     		ldrb	r2, [r3, #27]
 6391 0052 1202     		lsl	r2, r2, #8
 6392 0054 987E     		ldrb	r0, [r3, #26]
 6393 0056 0243     		orr	r2, r0
 6394 0058 0D1C     		mov	r5, r1
 6395 005a 1543     		orr	r5, r2
 6396              	.LVL912:
3219:.\sd/ff.c     **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 6397              		.loc 1 3219 0
 6398 005c 002C     		cmp	r4, #0
 6399 005e 1BD1     		bne	.L463
 6400              		.loc 1 3219 0 is_stmt 0 discriminator 1
 6401 0060 DB7A     		ldrb	r3, [r3, #11]
 6402              	.LVL913:
 6403 0062 DA06     		lsl	r2, r3, #27
 6404 0064 18D5     		bpl	.L463
3220:.\sd/ff.c     **** 				if (dclst < 2) {
 6405              		.loc 1 3220 0 is_stmt 1
 6406 0066 012D     		cmp	r5, #1
 6407 0068 15D9     		bls	.L468
3221:.\sd/ff.c     **** 					res = FR_INT_ERR;
3222:.\sd/ff.c     **** 				} else {
3223:.\sd/ff.c     **** 					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 6408              		.loc 1 3223 0
 6409 006a 06A8     		add	r0, sp, #24
 6410 006c 0DA9     		add	r1, sp, #52
 6411 006e 1C22     		mov	r2, #28
 6412 0070 FFF7FEFF 		bl	mem_cpy
 6413              	.LVL914:
3224:.\sd/ff.c     **** 					sdj.sclust = dclst;
 6414              		.loc 1 3224 0
 6415 0074 0895     		str	r5, [sp, #32]
3225:.\sd/ff.c     **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 6416              		.loc 1 3225 0
 6417 0076 06A8     		add	r0, sp, #24
 6418 0078 0221     		mov	r1, #2
 6419 007a FFF7FEFF 		bl	dir_sdi
 6420              	.LVL915:
 6421 007e 041E     		sub	r4, r0, #0
 6422              	.LVL916:
3226:.\sd/ff.c     **** 					if (res == FR_OK) {
 6423              		.loc 1 3226 0
 6424 0080 0AD1     		bne	.L463
3227:.\sd/ff.c     **** 						res = dir_read(&sdj);
 6425              		.loc 1 3227 0
 6426 0082 06A8     		add	r0, sp, #24
 6427              	.LVL917:
 6428 0084 FFF7FEFF 		bl	dir_read
 6429              	.LVL918:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 179


3228:.\sd/ff.c     **** 						if (res == FR_OK			/* Not empty dir */
 6430              		.loc 1 3228 0
 6431 0088 0028     		cmp	r0, #0
 6432 008a 00D1     		bne	.L464
3229:.\sd/ff.c     **** #if _FS_RPATH
3230:.\sd/ff.c     **** 						|| dclst == sdj.fs->cdir	/* Current dir */
3231:.\sd/ff.c     **** #endif
3232:.\sd/ff.c     **** 						) res = FR_DENIED;
 6433              		.loc 1 3232 0
 6434 008c 0720     		mov	r0, #7
 6435              	.LVL919:
 6436              	.L464:
3233:.\sd/ff.c     **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 6437              		.loc 1 3233 0
 6438 008e 0428     		cmp	r0, #4
 6439 0090 02D0     		beq	.L463
 6440 0092 041C     		mov	r4, r0
 6441 0094 00E0     		b	.L463
 6442              	.LVL920:
 6443              	.L468:
3221:.\sd/ff.c     **** 					res = FR_INT_ERR;
 6444              		.loc 1 3221 0
 6445 0096 0224     		mov	r4, #2
 6446              	.LVL921:
 6447              	.L463:
3234:.\sd/ff.c     **** 					}
3235:.\sd/ff.c     **** 				}
3236:.\sd/ff.c     **** 			}
3237:.\sd/ff.c     **** 			if (res == FR_OK) {
 6448              		.loc 1 3237 0
 6449 0098 002C     		cmp	r4, #0
 6450 009a 11D1     		bne	.L460
3238:.\sd/ff.c     **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 6451              		.loc 1 3238 0
 6452 009c 0DA8     		add	r0, sp, #52
 6453 009e FFF7FEFF 		bl	dir_remove
 6454              	.LVL922:
 6455 00a2 041E     		sub	r4, r0, #0
 6456              	.LVL923:
3239:.\sd/ff.c     **** 				if (res == FR_OK) {
 6457              		.loc 1 3239 0
 6458 00a4 0CD1     		bne	.L460
3240:.\sd/ff.c     **** 					if (dclst)				/* Remove the cluster chain if exist */
 6459              		.loc 1 3240 0
 6460 00a6 002D     		cmp	r5, #0
 6461 00a8 04D0     		beq	.L465
3241:.\sd/ff.c     **** 						res = remove_chain(dj.fs, dclst);
 6462              		.loc 1 3241 0
 6463 00aa 0D98     		ldr	r0, [sp, #52]
 6464              	.LVL924:
 6465 00ac 291C     		mov	r1, r5
 6466 00ae FFF7FEFF 		bl	remove_chain
 6467              	.LVL925:
 6468 00b2 041C     		mov	r4, r0
 6469              	.LVL926:
 6470              	.L465:
3242:.\sd/ff.c     **** 					if (res == FR_OK) res = sync(dj.fs);
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 180


 6471              		.loc 1 3242 0
 6472 00b4 002C     		cmp	r4, #0
 6473 00b6 03D1     		bne	.L460
 6474              		.loc 1 3242 0 is_stmt 0 discriminator 1
 6475 00b8 0D98     		ldr	r0, [sp, #52]
 6476 00ba FFF7FEFF 		bl	sync
 6477              	.LVL927:
 6478 00be 041C     		mov	r4, r0
 6479              	.LVL928:
 6480              	.L460:
3243:.\sd/ff.c     **** 				}
3244:.\sd/ff.c     **** 			}
3245:.\sd/ff.c     **** 		}
3246:.\sd/ff.c     **** 		FREE_BUF();
3247:.\sd/ff.c     **** 	}
3248:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
3249:.\sd/ff.c     **** }
 6481              		.loc 1 3249 0 is_stmt 1
 6482 00c0 201C     		mov	r0, r4
 6483 00c2 15B0     		add	sp, sp, #84
 6484              		@ sp needed
 6485              	.LVL929:
 6486 00c4 30BD     		pop	{r4, r5, pc}
 6487              		.cfi_endproc
 6488              	.LFE40:
 6489              		.size	f_unlink, .-f_unlink
 6490 00c6 C046     		.section	.text.f_mkdir,"ax",%progbits
 6491              		.align	2
 6492              		.global	f_mkdir
 6493              		.code	16
 6494              		.thumb_func
 6495              		.type	f_mkdir, %function
 6496              	f_mkdir:
 6497              	.LFB41:
3250:.\sd/ff.c     **** 
3251:.\sd/ff.c     **** 
3252:.\sd/ff.c     **** 
3253:.\sd/ff.c     **** 
3254:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3255:.\sd/ff.c     **** /* Create a Directory                                                    */
3256:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3257:.\sd/ff.c     **** 
3258:.\sd/ff.c     **** FRESULT f_mkdir (
3259:.\sd/ff.c     **** 	const TCHAR *path		/* Pointer to the directory path */
3260:.\sd/ff.c     **** )
3261:.\sd/ff.c     **** {
 6498              		.loc 1 3261 0
 6499              		.cfi_startproc
 6500              	.LVL930:
 6501 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6502              		.cfi_def_cfa_offset 20
 6503              		.cfi_offset 4, -20
 6504              		.cfi_offset 5, -16
 6505              		.cfi_offset 6, -12
 6506              		.cfi_offset 7, -8
 6507              		.cfi_offset 14, -4
 6508 0002 5F46     		mov	r7, fp
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 181


 6509 0004 5646     		mov	r6, r10
 6510 0006 4D46     		mov	r5, r9
 6511 0008 4446     		mov	r4, r8
 6512 000a F0B4     		push	{r4, r5, r6, r7}
 6513              		.cfi_def_cfa_offset 36
 6514              		.cfi_offset 8, -36
 6515              		.cfi_offset 9, -32
 6516              		.cfi_offset 10, -28
 6517              		.cfi_offset 11, -24
 6518 000c 8DB0     		sub	sp, sp, #52
 6519              		.cfi_def_cfa_offset 88
 6520 000e 0190     		str	r0, [sp, #4]
3262:.\sd/ff.c     **** 	FRESULT res;
3263:.\sd/ff.c     **** 	DIR dj;
3264:.\sd/ff.c     **** 	BYTE *dir, n;
3265:.\sd/ff.c     **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
 6521              		.loc 1 3265 0
 6522 0010 FFF7FEFF 		bl	get_fattime
 6523              	.LVL931:
 6524 0014 051C     		mov	r5, r0
 6525              	.LVL932:
3266:.\sd/ff.c     **** 	DEF_NAMEBUF;
3267:.\sd/ff.c     **** 
3268:.\sd/ff.c     **** 
3269:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 1);
 6526              		.loc 1 3269 0
 6527 0016 01A8     		add	r0, sp, #4
 6528              	.LVL933:
 6529 0018 05A9     		add	r1, sp, #20
 6530 001a 0122     		mov	r2, #1
 6531 001c FFF7FEFF 		bl	chk_mounted
 6532              	.LVL934:
 6533 0020 041E     		sub	r4, r0, #0
 6534              	.LVL935:
3270:.\sd/ff.c     **** 	if (res == FR_OK) {
 6535              		.loc 1 3270 0
 6536 0022 00D0     		beq	.LCB7368
 6537 0024 B7E0     		b	.L471	@long jump
 6538              	.LCB7368:
3271:.\sd/ff.c     **** 		INIT_BUF(dj);
 6539              		.loc 1 3271 0
 6540 0026 02AB     		add	r3, sp, #8
 6541 0028 0B93     		str	r3, [sp, #44]
3272:.\sd/ff.c     **** 		res = follow_path(&dj, path);			/* Follow the file path */
 6542              		.loc 1 3272 0
 6543 002a 05A8     		add	r0, sp, #20
 6544              	.LVL936:
 6545 002c 0199     		ldr	r1, [sp, #4]
 6546 002e FFF7FEFF 		bl	follow_path
 6547              	.LVL937:
3273:.\sd/ff.c     **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 6548              		.loc 1 3273 0
 6549 0032 0028     		cmp	r0, #0
 6550 0034 00D1     		bne	.L472
 6551 0036 0820     		mov	r0, #8
 6552              	.LVL938:
 6553              	.L472:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 182


3274:.\sd/ff.c     **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
3275:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
3276:.\sd/ff.c     **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 6554              		.loc 1 3276 0
 6555 0038 0428     		cmp	r0, #4
 6556 003a 00D0     		beq	.LCB7386
 6557 003c AAE0     		b	.L484	@long jump
 6558              	.LCB7386:
3277:.\sd/ff.c     **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 6559              		.loc 1 3277 0
 6560 003e 0598     		ldr	r0, [sp, #20]
 6561              	.LVL939:
 6562 0040 0021     		mov	r1, #0
 6563 0042 FFF7FEFF 		bl	create_chain
 6564              	.LVL940:
 6565 0046 8046     		mov	r8, r0
 6566              	.LVL941:
3278:.\sd/ff.c     **** 			res = FR_OK;
3279:.\sd/ff.c     **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 6567              		.loc 1 3279 0
 6568 0048 0028     		cmp	r0, #0
 6569 004a 00D1     		bne	.L473
 6570 004c 0724     		mov	r4, #7
 6571              	.L473:
 6572              	.LVL942:
3280:.\sd/ff.c     **** 			if (dcl == 1) res = FR_INT_ERR;
 6573              		.loc 1 3280 0
 6574 004e 4146     		mov	r1, r8
 6575 0050 0129     		cmp	r1, #1
 6576 0052 00D1     		bne	.L474
 6577 0054 0224     		mov	r4, #2
 6578              	.LVL943:
 6579              	.L474:
3281:.\sd/ff.c     **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 6580              		.loc 1 3281 0
 6581 0056 4246     		mov	r2, r8
 6582 0058 0132     		add	r2, r2, #1
 6583 005a 00D1     		bne	.L475
 6584 005c 0124     		mov	r4, #1
 6585              	.LVL944:
 6586              	.L475:
3282:.\sd/ff.c     **** 			if (res == FR_OK)					/* Flush FAT */
 6587              		.loc 1 3282 0
 6588 005e 002C     		cmp	r4, #0
 6589 0060 04D1     		bne	.L476
3283:.\sd/ff.c     **** 				res = move_window(dj.fs, 0);
 6590              		.loc 1 3283 0
 6591 0062 0598     		ldr	r0, [sp, #20]
 6592              	.LVL945:
 6593 0064 0021     		mov	r1, #0
 6594              	.LVL946:
 6595 0066 FFF7FEFF 		bl	move_window
 6596              	.LVL947:
 6597 006a 041C     		mov	r4, r0
 6598              	.LVL948:
 6599              	.L476:
3284:.\sd/ff.c     **** 			if (res == FR_OK) {					/* Initialize the new directory table */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 183


 6600              		.loc 1 3284 0
 6601 006c 002C     		cmp	r4, #0
 6602 006e 6AD1     		bne	.L477
3285:.\sd/ff.c     **** 				dsc = clust2sect(dj.fs, dcl);
 6603              		.loc 1 3285 0
 6604 0070 059E     		ldr	r6, [sp, #20]
 6605 0072 301C     		mov	r0, r6
 6606 0074 4146     		mov	r1, r8
 6607 0076 FFF7FEFF 		bl	clust2sect
 6608              	.LVL949:
 6609 007a 071C     		mov	r7, r0
 6610              	.LVL950:
3286:.\sd/ff.c     **** 				dir = dj.fs->win;
 6611              		.loc 1 3286 0
 6612 007c 3023     		mov	r3, #48
 6613 007e 9B19     		add	r3, r3, r6
 6614 0080 9A46     		mov	r10, r3
 6615              	.LVL951:
3287:.\sd/ff.c     **** 				mem_set(dir, 0, SS(dj.fs));
 6616              		.loc 1 3287 0
 6617 0082 181C     		mov	r0, r3
 6618              	.LVL952:
 6619 0084 0021     		mov	r1, #0
 6620 0086 8022     		mov	r2, #128
 6621 0088 9200     		lsl	r2, r2, #2
 6622 008a FFF7FEFF 		bl	mem_set
 6623              	.LVL953:
3288:.\sd/ff.c     **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
 6624              		.loc 1 3288 0
 6625 008e 5046     		mov	r0, r10
 6626 0090 2021     		mov	r1, #32
 6627 0092 0B22     		mov	r2, #11
 6628 0094 FFF7FEFF 		bl	mem_set
 6629              	.LVL954:
3289:.\sd/ff.c     **** 				dir[DIR_Name] = '.';
 6630              		.loc 1 3289 0
 6631 0098 2E21     		mov	r1, #46
 6632 009a 8946     		mov	r9, r1
 6633 009c 3023     		mov	r3, #48
 6634 009e F154     		strb	r1, [r6, r3]
3290:.\sd/ff.c     **** 				dir[DIR_Attr] = AM_DIR;
 6635              		.loc 1 3290 0
 6636 00a0 1022     		mov	r2, #16
 6637 00a2 3B23     		mov	r3, #59
 6638 00a4 F254     		strb	r2, [r6, r3]
3291:.\sd/ff.c     **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 6639              		.loc 1 3291 0
 6640 00a6 4623     		mov	r3, #70
 6641 00a8 F554     		strb	r5, [r6, r3]
 6642 00aa 2B0A     		lsr	r3, r5, #8
 6643 00ac 4722     		mov	r2, #71
 6644 00ae B354     		strb	r3, [r6, r2]
 6645 00b0 2B0C     		lsr	r3, r5, #16
 6646 00b2 4822     		mov	r2, #72
 6647 00b4 B354     		strb	r3, [r6, r2]
 6648 00b6 2B0E     		lsr	r3, r5, #24
 6649 00b8 4922     		mov	r2, #73
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 184


 6650 00ba B354     		strb	r3, [r6, r2]
3292:.\sd/ff.c     **** 				ST_CLUST(dir, dcl);
 6651              		.loc 1 3292 0
 6652 00bc 4A23     		mov	r3, #74
 6653 00be 4146     		mov	r1, r8
 6654 00c0 F154     		strb	r1, [r6, r3]
 6655 00c2 4246     		mov	r2, r8
 6656 00c4 130A     		lsr	r3, r2, #8
 6657 00c6 4B22     		mov	r2, #75
 6658 00c8 B354     		strb	r3, [r6, r2]
 6659 00ca 4146     		mov	r1, r8
 6660 00cc 0B0C     		lsr	r3, r1, #16
 6661 00ce 4422     		mov	r2, #68
 6662 00d0 B354     		strb	r3, [r6, r2]
 6663 00d2 1B0A     		lsr	r3, r3, #8
 6664 00d4 4522     		mov	r2, #69
 6665 00d6 B354     		strb	r3, [r6, r2]
3293:.\sd/ff.c     **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 6666              		.loc 1 3293 0
 6667 00d8 301C     		mov	r0, r6
 6668 00da 5030     		add	r0, r0, #80
 6669 00dc 5146     		mov	r1, r10
 6670 00de 2022     		mov	r2, #32
 6671 00e0 FFF7FEFF 		bl	mem_cpy
 6672              	.LVL955:
3294:.\sd/ff.c     **** 				dir[33] = '.'; pcl = dj.sclust;
 6673              		.loc 1 3294 0
 6674 00e4 5123     		mov	r3, #81
 6675 00e6 4A46     		mov	r2, r9
 6676 00e8 F254     		strb	r2, [r6, r3]
 6677 00ea 079B     		ldr	r3, [sp, #28]
 6678              	.LVL956:
3295:.\sd/ff.c     **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 6679              		.loc 1 3295 0
 6680 00ec 059A     		ldr	r2, [sp, #20]
 6681 00ee 1178     		ldrb	r1, [r2]
 6682 00f0 0329     		cmp	r1, #3
 6683 00f2 03D1     		bne	.L478
 6684              		.loc 1 3295 0 is_stmt 0 discriminator 1
 6685 00f4 516A     		ldr	r1, [r2, #36]
 6686 00f6 9942     		cmp	r1, r3
 6687 00f8 00D1     		bne	.L478
3296:.\sd/ff.c     **** 					pcl = 0;
 6688              		.loc 1 3296 0 is_stmt 1
 6689 00fa 0023     		mov	r3, #0
 6690              	.LVL957:
 6691              	.L478:
3297:.\sd/ff.c     **** 				ST_CLUST(dir+SZ_DIR, pcl);
 6692              		.loc 1 3297 0
 6693 00fc 6A21     		mov	r1, #106
 6694 00fe 7354     		strb	r3, [r6, r1]
 6695 0100 180A     		lsr	r0, r3, #8
 6696 0102 6B21     		mov	r1, #107
 6697 0104 7054     		strb	r0, [r6, r1]
 6698 0106 1B0C     		lsr	r3, r3, #16
 6699              	.LVL958:
 6700 0108 6421     		mov	r1, #100
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 185


 6701 010a 7354     		strb	r3, [r6, r1]
 6702 010c 1B0A     		lsr	r3, r3, #8
 6703 010e 6521     		mov	r1, #101
 6704 0110 7354     		strb	r3, [r6, r1]
3298:.\sd/ff.c     **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 6705              		.loc 1 3298 0
 6706 0112 9678     		ldrb	r6, [r2, #2]
 6707              	.LVL959:
3299:.\sd/ff.c     **** 					dj.fs->winsect = dsc++;
3300:.\sd/ff.c     **** 					dj.fs->wflag = 1;
 6708              		.loc 1 3300 0
 6709 0114 0122     		mov	r2, #1
 6710              	.LVL960:
 6711 0116 9346     		mov	fp, r2
3298:.\sd/ff.c     **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 6712              		.loc 1 3298 0
 6713 0118 13E0     		b	.L479
 6714              	.LVL961:
 6715              	.L480:
3299:.\sd/ff.c     **** 					dj.fs->winsect = dsc++;
 6716              		.loc 1 3299 0
 6717 011a 0598     		ldr	r0, [sp, #20]
 6718 011c 7B1C     		add	r3, r7, #1
 6719 011e 9946     		mov	r9, r3
 6720              	.LVL962:
 6721 0120 C762     		str	r7, [r0, #44]
 6722              		.loc 1 3300 0
 6723 0122 5946     		mov	r1, fp
 6724 0124 0171     		strb	r1, [r0, #4]
3301:.\sd/ff.c     **** 					res = move_window(dj.fs, 0);
 6725              		.loc 1 3301 0
 6726 0126 0021     		mov	r1, #0
 6727 0128 FFF7FEFF 		bl	move_window
 6728              	.LVL963:
 6729 012c 041E     		sub	r4, r0, #0
 6730              	.LVL964:
3302:.\sd/ff.c     **** 					if (res != FR_OK) break;
 6731              		.loc 1 3302 0
 6732 012e 0AD1     		bne	.L477
3303:.\sd/ff.c     **** 					mem_set(dir, 0, SS(dj.fs));
 6733              		.loc 1 3303 0
 6734 0130 5046     		mov	r0, r10
 6735              	.LVL965:
 6736 0132 0021     		mov	r1, #0
 6737 0134 8022     		mov	r2, #128
 6738 0136 9200     		lsl	r2, r2, #2
 6739 0138 FFF7FEFF 		bl	mem_set
 6740              	.LVL966:
3298:.\sd/ff.c     **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 6741              		.loc 1 3298 0
 6742 013c 013E     		sub	r6, r6, #1
 6743              	.LVL967:
 6744 013e F6B2     		uxtb	r6, r6
 6745              	.LVL968:
3299:.\sd/ff.c     **** 					dj.fs->winsect = dsc++;
 6746              		.loc 1 3299 0
 6747 0140 4F46     		mov	r7, r9
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 186


 6748              	.LVL969:
 6749              	.L479:
3298:.\sd/ff.c     **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 6750              		.loc 1 3298 0 discriminator 1
 6751 0142 002E     		cmp	r6, #0
 6752 0144 E9D1     		bne	.L480
 6753              	.LVL970:
 6754              	.L477:
3304:.\sd/ff.c     **** 				}
3305:.\sd/ff.c     **** 			}
3306:.\sd/ff.c     **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 6755              		.loc 1 3306 0
 6756 0146 002C     		cmp	r4, #0
 6757 0148 03D1     		bne	.L481
 6758              		.loc 1 3306 0 is_stmt 0 discriminator 1
 6759 014a 05A8     		add	r0, sp, #20
 6760 014c FFF7FEFF 		bl	dir_register
 6761              	.LVL971:
 6762 0150 041C     		mov	r4, r0
 6763              	.LVL972:
 6764              	.L481:
3307:.\sd/ff.c     **** 			if (res != FR_OK) {
 6765              		.loc 1 3307 0 is_stmt 1
 6766 0152 002C     		cmp	r4, #0
 6767 0154 04D0     		beq	.L482
3308:.\sd/ff.c     **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 6768              		.loc 1 3308 0
 6769 0156 0598     		ldr	r0, [sp, #20]
 6770 0158 4146     		mov	r1, r8
 6771 015a FFF7FEFF 		bl	remove_chain
 6772              	.LVL973:
 6773 015e 1AE0     		b	.L471
 6774              	.L482:
3309:.\sd/ff.c     **** 			} else {
3310:.\sd/ff.c     **** 				dir = dj.dir;
 6775              		.loc 1 3310 0
 6776 0160 0A9B     		ldr	r3, [sp, #40]
 6777              	.LVL974:
3311:.\sd/ff.c     **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 6778              		.loc 1 3311 0
 6779 0162 1022     		mov	r2, #16
 6780 0164 DA72     		strb	r2, [r3, #11]
3312:.\sd/ff.c     **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 6781              		.loc 1 3312 0
 6782 0166 9D75     		strb	r5, [r3, #22]
 6783 0168 2A0A     		lsr	r2, r5, #8
 6784 016a DA75     		strb	r2, [r3, #23]
 6785 016c 2A0C     		lsr	r2, r5, #16
 6786 016e 1A76     		strb	r2, [r3, #24]
 6787 0170 2D0E     		lsr	r5, r5, #24
 6788              	.LVL975:
 6789 0172 5D76     		strb	r5, [r3, #25]
3313:.\sd/ff.c     **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 6790              		.loc 1 3313 0
 6791 0174 4246     		mov	r2, r8
 6792 0176 9A76     		strb	r2, [r3, #26]
 6793 0178 4146     		mov	r1, r8
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 187


 6794 017a 0A0A     		lsr	r2, r1, #8
 6795 017c DA76     		strb	r2, [r3, #27]
 6796 017e 0A0C     		lsr	r2, r1, #16
 6797 0180 1A75     		strb	r2, [r3, #20]
 6798 0182 120A     		lsr	r2, r2, #8
 6799 0184 5A75     		strb	r2, [r3, #21]
3314:.\sd/ff.c     **** 				dj.fs->wflag = 1;
 6800              		.loc 1 3314 0
 6801 0186 0598     		ldr	r0, [sp, #20]
 6802 0188 0123     		mov	r3, #1
 6803              	.LVL976:
 6804 018a 0371     		strb	r3, [r0, #4]
3315:.\sd/ff.c     **** 				res = sync(dj.fs);
 6805              		.loc 1 3315 0
 6806 018c FFF7FEFF 		bl	sync
 6807              	.LVL977:
 6808 0190 041C     		mov	r4, r0
 6809              	.LVL978:
 6810 0192 00E0     		b	.L471
 6811              	.LVL979:
 6812              	.L484:
 6813 0194 041C     		mov	r4, r0
 6814              	.LVL980:
 6815              	.L471:
3316:.\sd/ff.c     **** 			}
3317:.\sd/ff.c     **** 		}
3318:.\sd/ff.c     **** 		FREE_BUF();
3319:.\sd/ff.c     **** 	}
3320:.\sd/ff.c     **** 
3321:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
3322:.\sd/ff.c     **** }
 6816              		.loc 1 3322 0
 6817 0196 201C     		mov	r0, r4
 6818 0198 0DB0     		add	sp, sp, #52
 6819              		@ sp needed
 6820              	.LVL981:
 6821 019a 3CBC     		pop	{r2, r3, r4, r5}
 6822 019c 9046     		mov	r8, r2
 6823 019e 9946     		mov	r9, r3
 6824 01a0 A246     		mov	r10, r4
 6825 01a2 AB46     		mov	fp, r5
 6826 01a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 6827              		.cfi_endproc
 6828              	.LFE41:
 6829              		.size	f_mkdir, .-f_mkdir
 6830 01a6 C046     		.section	.text.f_chmod,"ax",%progbits
 6831              		.align	2
 6832              		.global	f_chmod
 6833              		.code	16
 6834              		.thumb_func
 6835              		.type	f_chmod, %function
 6836              	f_chmod:
 6837              	.LFB42:
3323:.\sd/ff.c     **** 
3324:.\sd/ff.c     **** 
3325:.\sd/ff.c     **** 
3326:.\sd/ff.c     **** 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 188


3327:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3328:.\sd/ff.c     **** /* Change Attribute                                                      */
3329:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3330:.\sd/ff.c     **** 
3331:.\sd/ff.c     **** FRESULT f_chmod (
3332:.\sd/ff.c     **** 	const TCHAR *path,	/* Pointer to the file path */
3333:.\sd/ff.c     **** 	BYTE value,			/* Attribute bits */
3334:.\sd/ff.c     **** 	BYTE mask			/* Attribute mask to change */
3335:.\sd/ff.c     **** )
3336:.\sd/ff.c     **** {
 6838              		.loc 1 3336 0
 6839              		.cfi_startproc
 6840              	.LVL982:
 6841 0000 30B5     		push	{r4, r5, lr}
 6842              		.cfi_def_cfa_offset 12
 6843              		.cfi_offset 4, -12
 6844              		.cfi_offset 5, -8
 6845              		.cfi_offset 14, -4
 6846 0002 8DB0     		sub	sp, sp, #52
 6847              		.cfi_def_cfa_offset 64
 6848 0004 0190     		str	r0, [sp, #4]
 6849 0006 0C1C     		mov	r4, r1
 6850 0008 151C     		mov	r5, r2
3337:.\sd/ff.c     **** 	FRESULT res;
3338:.\sd/ff.c     **** 	DIR dj;
3339:.\sd/ff.c     **** 	BYTE *dir;
3340:.\sd/ff.c     **** 	DEF_NAMEBUF;
3341:.\sd/ff.c     **** 
3342:.\sd/ff.c     **** 
3343:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 1);
 6851              		.loc 1 3343 0
 6852 000a 01A8     		add	r0, sp, #4
 6853              	.LVL983:
 6854 000c 05A9     		add	r1, sp, #20
 6855              	.LVL984:
 6856 000e 0122     		mov	r2, #1
 6857              	.LVL985:
 6858 0010 FFF7FEFF 		bl	chk_mounted
 6859              	.LVL986:
3344:.\sd/ff.c     **** 	if (res == FR_OK) {
 6860              		.loc 1 3344 0
 6861 0014 0028     		cmp	r0, #0
 6862 0016 18D1     		bne	.L490
3345:.\sd/ff.c     **** 		INIT_BUF(dj);
 6863              		.loc 1 3345 0
 6864 0018 02AB     		add	r3, sp, #8
 6865 001a 0B93     		str	r3, [sp, #44]
3346:.\sd/ff.c     **** 		res = follow_path(&dj, path);		/* Follow the file path */
 6866              		.loc 1 3346 0
 6867 001c 05A8     		add	r0, sp, #20
 6868              	.LVL987:
 6869 001e 0199     		ldr	r1, [sp, #4]
 6870 0020 FFF7FEFF 		bl	follow_path
 6871              	.LVL988:
3347:.\sd/ff.c     **** 		FREE_BUF();
3348:.\sd/ff.c     **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3349:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 189


3350:.\sd/ff.c     **** 		if (res == FR_OK) {
 6872              		.loc 1 3350 0
 6873 0024 0028     		cmp	r0, #0
 6874 0026 10D1     		bne	.L490
3351:.\sd/ff.c     **** 			dir = dj.dir;
 6875              		.loc 1 3351 0
 6876 0028 0A9B     		ldr	r3, [sp, #40]
 6877              	.LVL989:
3352:.\sd/ff.c     **** 			if (!dir) {						/* Is it a root directory? */
 6878              		.loc 1 3352 0
 6879 002a 002B     		cmp	r3, #0
 6880 002c 0CD0     		beq	.L491
3353:.\sd/ff.c     **** 				res = FR_INVALID_NAME;
3354:.\sd/ff.c     **** 			} else {						/* File or sub directory */
3355:.\sd/ff.c     **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 6881              		.loc 1 3355 0
 6882 002e 2722     		mov	r2, #39
 6883 0030 1540     		and	r5, r2
 6884              	.LVL990:
3356:.\sd/ff.c     **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 6885              		.loc 1 3356 0
 6886 0032 DA7A     		ldrb	r2, [r3, #11]
 6887 0034 2C40     		and	r4, r5
 6888 0036 AA43     		bic	r2, r5
 6889 0038 1443     		orr	r4, r2
 6890 003a DC72     		strb	r4, [r3, #11]
3357:.\sd/ff.c     **** 				dj.fs->wflag = 1;
 6891              		.loc 1 3357 0
 6892 003c 0598     		ldr	r0, [sp, #20]
 6893              	.LVL991:
 6894 003e 0123     		mov	r3, #1
 6895              	.LVL992:
 6896 0040 0371     		strb	r3, [r0, #4]
3358:.\sd/ff.c     **** 				res = sync(dj.fs);
 6897              		.loc 1 3358 0
 6898 0042 FFF7FEFF 		bl	sync
 6899              	.LVL993:
 6900 0046 00E0     		b	.L490
 6901              	.LVL994:
 6902              	.L491:
3353:.\sd/ff.c     **** 				res = FR_INVALID_NAME;
 6903              		.loc 1 3353 0
 6904 0048 0620     		mov	r0, #6
 6905              	.LVL995:
 6906              	.L490:
3359:.\sd/ff.c     **** 			}
3360:.\sd/ff.c     **** 		}
3361:.\sd/ff.c     **** 	}
3362:.\sd/ff.c     **** 
3363:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
3364:.\sd/ff.c     **** }
 6907              		.loc 1 3364 0
 6908 004a 0DB0     		add	sp, sp, #52
 6909              		@ sp needed
 6910 004c 30BD     		pop	{r4, r5, pc}
 6911              		.cfi_endproc
 6912              	.LFE42:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 190


 6913              		.size	f_chmod, .-f_chmod
 6914 004e C046     		.section	.text.f_utime,"ax",%progbits
 6915              		.align	2
 6916              		.global	f_utime
 6917              		.code	16
 6918              		.thumb_func
 6919              		.type	f_utime, %function
 6920              	f_utime:
 6921              	.LFB43:
3365:.\sd/ff.c     **** 
3366:.\sd/ff.c     **** 
3367:.\sd/ff.c     **** 
3368:.\sd/ff.c     **** 
3369:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3370:.\sd/ff.c     **** /* Change Timestamp                                                      */
3371:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3372:.\sd/ff.c     **** 
3373:.\sd/ff.c     **** FRESULT f_utime (
3374:.\sd/ff.c     **** 	const TCHAR *path,	/* Pointer to the file/directory name */
3375:.\sd/ff.c     **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
3376:.\sd/ff.c     **** )
3377:.\sd/ff.c     **** {
 6922              		.loc 1 3377 0
 6923              		.cfi_startproc
 6924              	.LVL996:
 6925 0000 10B5     		push	{r4, lr}
 6926              		.cfi_def_cfa_offset 8
 6927              		.cfi_offset 4, -8
 6928              		.cfi_offset 14, -4
 6929 0002 8CB0     		sub	sp, sp, #48
 6930              		.cfi_def_cfa_offset 56
 6931 0004 0190     		str	r0, [sp, #4]
 6932 0006 0C1C     		mov	r4, r1
3378:.\sd/ff.c     **** 	FRESULT res;
3379:.\sd/ff.c     **** 	DIR dj;
3380:.\sd/ff.c     **** 	BYTE *dir;
3381:.\sd/ff.c     **** 	DEF_NAMEBUF;
3382:.\sd/ff.c     **** 
3383:.\sd/ff.c     **** 
3384:.\sd/ff.c     **** 	res = chk_mounted(&path, &dj.fs, 1);
 6933              		.loc 1 3384 0
 6934 0008 01A8     		add	r0, sp, #4
 6935              	.LVL997:
 6936 000a 05A9     		add	r1, sp, #20
 6937              	.LVL998:
 6938 000c 0122     		mov	r2, #1
 6939 000e FFF7FEFF 		bl	chk_mounted
 6940              	.LVL999:
3385:.\sd/ff.c     **** 	if (res == FR_OK) {
 6941              		.loc 1 3385 0
 6942 0012 0028     		cmp	r0, #0
 6943 0014 1BD1     		bne	.L493
3386:.\sd/ff.c     **** 		INIT_BUF(dj);
 6944              		.loc 1 3386 0
 6945 0016 02AB     		add	r3, sp, #8
 6946 0018 0B93     		str	r3, [sp, #44]
3387:.\sd/ff.c     **** 		res = follow_path(&dj, path);	/* Follow the file path */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 191


 6947              		.loc 1 3387 0
 6948 001a 05A8     		add	r0, sp, #20
 6949              	.LVL1000:
 6950 001c 0199     		ldr	r1, [sp, #4]
 6951 001e FFF7FEFF 		bl	follow_path
 6952              	.LVL1001:
3388:.\sd/ff.c     **** 		FREE_BUF();
3389:.\sd/ff.c     **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3390:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
3391:.\sd/ff.c     **** 		if (res == FR_OK) {
 6953              		.loc 1 3391 0
 6954 0022 0028     		cmp	r0, #0
 6955 0024 13D1     		bne	.L493
3392:.\sd/ff.c     **** 			dir = dj.dir;
 6956              		.loc 1 3392 0
 6957 0026 0A9B     		ldr	r3, [sp, #40]
 6958              	.LVL1002:
3393:.\sd/ff.c     **** 			if (!dir) {					/* Root directory */
 6959              		.loc 1 3393 0
 6960 0028 002B     		cmp	r3, #0
 6961 002a 0FD0     		beq	.L494
3394:.\sd/ff.c     **** 				res = FR_INVALID_NAME;
3395:.\sd/ff.c     **** 			} else {					/* File or sub-directory */
3396:.\sd/ff.c     **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 6962              		.loc 1 3396 0
 6963 002c A279     		ldrb	r2, [r4, #6]
 6964 002e 9A75     		strb	r2, [r3, #22]
 6965 0030 E288     		ldrh	r2, [r4, #6]
 6966 0032 120A     		lsr	r2, r2, #8
 6967 0034 DA75     		strb	r2, [r3, #23]
3397:.\sd/ff.c     **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 6968              		.loc 1 3397 0
 6969 0036 2279     		ldrb	r2, [r4, #4]
 6970 0038 1A76     		strb	r2, [r3, #24]
 6971 003a A288     		ldrh	r2, [r4, #4]
 6972 003c 120A     		lsr	r2, r2, #8
 6973 003e 5A76     		strb	r2, [r3, #25]
3398:.\sd/ff.c     **** 				dj.fs->wflag = 1;
 6974              		.loc 1 3398 0
 6975 0040 0598     		ldr	r0, [sp, #20]
 6976              	.LVL1003:
 6977 0042 0123     		mov	r3, #1
 6978              	.LVL1004:
 6979 0044 0371     		strb	r3, [r0, #4]
3399:.\sd/ff.c     **** 				res = sync(dj.fs);
 6980              		.loc 1 3399 0
 6981 0046 FFF7FEFF 		bl	sync
 6982              	.LVL1005:
 6983 004a 00E0     		b	.L493
 6984              	.LVL1006:
 6985              	.L494:
3394:.\sd/ff.c     **** 				res = FR_INVALID_NAME;
 6986              		.loc 1 3394 0
 6987 004c 0620     		mov	r0, #6
 6988              	.LVL1007:
 6989              	.L493:
3400:.\sd/ff.c     **** 			}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 192


3401:.\sd/ff.c     **** 		}
3402:.\sd/ff.c     **** 	}
3403:.\sd/ff.c     **** 
3404:.\sd/ff.c     **** 	LEAVE_FF(dj.fs, res);
3405:.\sd/ff.c     **** }
 6990              		.loc 1 3405 0
 6991 004e 0CB0     		add	sp, sp, #48
 6992              		@ sp needed
 6993              	.LVL1008:
 6994 0050 10BD     		pop	{r4, pc}
 6995              		.cfi_endproc
 6996              	.LFE43:
 6997              		.size	f_utime, .-f_utime
 6998 0052 C046     		.section	.text.f_rename,"ax",%progbits
 6999              		.align	2
 7000              		.global	f_rename
 7001              		.code	16
 7002              		.thumb_func
 7003              		.type	f_rename, %function
 7004              	f_rename:
 7005              	.LFB44:
3406:.\sd/ff.c     **** 
3407:.\sd/ff.c     **** 
3408:.\sd/ff.c     **** 
3409:.\sd/ff.c     **** 
3410:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3411:.\sd/ff.c     **** /* Rename File/Directory                                                 */
3412:.\sd/ff.c     **** /*-----------------------------------------------------------------------*/
3413:.\sd/ff.c     **** 
3414:.\sd/ff.c     **** FRESULT f_rename (
3415:.\sd/ff.c     **** 	const TCHAR *path_old,	/* Pointer to the old name */
3416:.\sd/ff.c     **** 	const TCHAR *path_new	/* Pointer to the new name */
3417:.\sd/ff.c     **** )
3418:.\sd/ff.c     **** {
 7006              		.loc 1 3418 0
 7007              		.cfi_startproc
 7008              	.LVL1009:
 7009 0000 30B5     		push	{r4, r5, lr}
 7010              		.cfi_def_cfa_offset 12
 7011              		.cfi_offset 4, -12
 7012              		.cfi_offset 5, -8
 7013              		.cfi_offset 14, -4
 7014 0002 9BB0     		sub	sp, sp, #108
 7015              		.cfi_def_cfa_offset 120
 7016 0004 0190     		str	r0, [sp, #4]
 7017 0006 0D1C     		mov	r5, r1
3419:.\sd/ff.c     **** 	FRESULT res;
3420:.\sd/ff.c     **** 	DIR djo, djn;
3421:.\sd/ff.c     **** 	BYTE buf[21], *dir;
3422:.\sd/ff.c     **** 	DWORD dw;
3423:.\sd/ff.c     **** 	DEF_NAMEBUF;
3424:.\sd/ff.c     **** 
3425:.\sd/ff.c     **** 
3426:.\sd/ff.c     **** 	res = chk_mounted(&path_old, &djo.fs, 1);
 7018              		.loc 1 3426 0
 7019 0008 01A8     		add	r0, sp, #4
 7020              	.LVL1010:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 193


 7021 000a 13A9     		add	r1, sp, #76
 7022              	.LVL1011:
 7023 000c 0122     		mov	r2, #1
 7024 000e FFF7FEFF 		bl	chk_mounted
 7025              	.LVL1012:
 7026 0012 041E     		sub	r4, r0, #0
 7027              	.LVL1013:
3427:.\sd/ff.c     **** 	if (res == FR_OK) {
 7028              		.loc 1 3427 0
 7029 0014 00D0     		beq	.LCB7905
 7030 0016 82E0     		b	.L496	@long jump
 7031              	.LCB7905:
3428:.\sd/ff.c     **** 		djn.fs = djo.fs;
 7032              		.loc 1 3428 0
 7033 0018 1399     		ldr	r1, [sp, #76]
 7034 001a 0C91     		str	r1, [sp, #48]
3429:.\sd/ff.c     **** 		INIT_BUF(djo);
 7035              		.loc 1 3429 0
 7036 001c 03AB     		add	r3, sp, #12
 7037 001e 1993     		str	r3, [sp, #100]
3430:.\sd/ff.c     **** 		res = follow_path(&djo, path_old);		/* Check old object */
 7038              		.loc 1 3430 0
 7039 0020 13A8     		add	r0, sp, #76
 7040              	.LVL1014:
 7041 0022 0199     		ldr	r1, [sp, #4]
 7042 0024 FFF7FEFF 		bl	follow_path
 7043              	.LVL1015:
 7044 0028 041E     		sub	r4, r0, #0
 7045              	.LVL1016:
3431:.\sd/ff.c     **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
3432:.\sd/ff.c     **** 			res = FR_INVALID_NAME;
3433:.\sd/ff.c     **** #if _FS_SHARE
3434:.\sd/ff.c     **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
 7046              		.loc 1 3434 0
 7047 002a 04D1     		bne	.L497
 7048              		.loc 1 3434 0 is_stmt 0 discriminator 1
 7049 002c 13A8     		add	r0, sp, #76
 7050              	.LVL1017:
 7051 002e 0221     		mov	r1, #2
 7052 0030 FFF7FEFF 		bl	chk_lock
 7053              	.LVL1018:
 7054 0034 041C     		mov	r4, r0
 7055              	.LVL1019:
 7056              	.L497:
3435:.\sd/ff.c     **** #endif
3436:.\sd/ff.c     **** 		if (res == FR_OK) {						/* Old object is found */
 7057              		.loc 1 3436 0 is_stmt 1
 7058 0036 002C     		cmp	r4, #0
 7059 0038 71D1     		bne	.L496
3437:.\sd/ff.c     **** 			if (!djo.dir) {						/* Is root dir? */
 7060              		.loc 1 3437 0
 7061 003a 1899     		ldr	r1, [sp, #96]
 7062 003c 0029     		cmp	r1, #0
 7063 003e 6DD0     		beq	.L502
3438:.\sd/ff.c     **** 				res = FR_NO_FILE;
3439:.\sd/ff.c     **** 			} else {
3440:.\sd/ff.c     **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 194


 7064              		.loc 1 3440 0
 7065 0040 0B31     		add	r1, r1, #11
 7066 0042 06A8     		add	r0, sp, #24
 7067 0044 1522     		mov	r2, #21
 7068 0046 FFF7FEFF 		bl	mem_cpy
 7069              	.LVL1020:
3441:.\sd/ff.c     **** 				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
 7070              		.loc 1 3441 0
 7071 004a 0CA8     		add	r0, sp, #48
 7072 004c 13A9     		add	r1, sp, #76
 7073 004e 1C22     		mov	r2, #28
 7074 0050 FFF7FEFF 		bl	mem_cpy
 7075              	.LVL1021:
3442:.\sd/ff.c     **** 				res = follow_path(&djn, path_new);
 7076              		.loc 1 3442 0
 7077 0054 0CA8     		add	r0, sp, #48
 7078 0056 291C     		mov	r1, r5
 7079 0058 FFF7FEFF 		bl	follow_path
 7080              	.LVL1022:
 7081 005c 041E     		sub	r4, r0, #0
 7082              	.LVL1023:
3443:.\sd/ff.c     **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 7083              		.loc 1 3443 0
 7084 005e 00D1     		bne	.L498
 7085 0060 0824     		mov	r4, #8
 7086              	.L498:
 7087              	.LVL1024:
3444:.\sd/ff.c     **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 7088              		.loc 1 3444 0
 7089 0062 042C     		cmp	r4, #4
 7090 0064 5BD1     		bne	.L496
3445:.\sd/ff.c     **** /* Start critical section that any interruption or error can cause cross-link */
3446:.\sd/ff.c     **** 					res = dir_register(&djn);			/* Register the new entry */
 7091              		.loc 1 3446 0
 7092 0066 0CA8     		add	r0, sp, #48
 7093 0068 FFF7FEFF 		bl	dir_register
 7094              	.LVL1025:
 7095 006c 041E     		sub	r4, r0, #0
 7096              	.LVL1026:
3447:.\sd/ff.c     **** 					if (res == FR_OK) {
 7097              		.loc 1 3447 0
 7098 006e 56D1     		bne	.L496
3448:.\sd/ff.c     **** 						dir = djn.dir;					/* Copy object information except for name */
 7099              		.loc 1 3448 0
 7100 0070 119D     		ldr	r5, [sp, #68]
 7101              	.LVL1027:
3449:.\sd/ff.c     **** 						mem_cpy(dir+13, buf+2, 19);
 7102              		.loc 1 3449 0
 7103 0072 281C     		mov	r0, r5
 7104              	.LVL1028:
 7105 0074 0D30     		add	r0, r0, #13
 7106 0076 6946     		mov	r1, sp
 7107 0078 1A31     		add	r1, r1, #26
 7108 007a 1322     		mov	r2, #19
 7109 007c FFF7FEFF 		bl	mem_cpy
 7110              	.LVL1029:
3450:.\sd/ff.c     **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 195


 7111              		.loc 1 3450 0
 7112 0080 06AB     		add	r3, sp, #24
 7113 0082 1A78     		ldrb	r2, [r3]
 7114 0084 2023     		mov	r3, #32
 7115 0086 1343     		orr	r3, r2
 7116 0088 EB72     		strb	r3, [r5, #11]
3451:.\sd/ff.c     **** 						djo.fs->wflag = 1;
 7117              		.loc 1 3451 0
 7118 008a 0123     		mov	r3, #1
 7119 008c 139A     		ldr	r2, [sp, #76]
 7120 008e 1371     		strb	r3, [r2, #4]
3452:.\sd/ff.c     **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 7121              		.loc 1 3452 0
 7122 0090 0E9B     		ldr	r3, [sp, #56]
 7123 0092 1599     		ldr	r1, [sp, #84]
 7124 0094 9942     		cmp	r1, r3
 7125 0096 35D0     		beq	.L499
 7126              		.loc 1 3452 0 is_stmt 0 discriminator 1
 7127 0098 EB7A     		ldrb	r3, [r5, #11]
 7128 009a DA06     		lsl	r2, r3, #27
 7129 009c 32D5     		bpl	.L499
3453:.\sd/ff.c     **** 							dw = clust2sect(djn.fs, LD_CLUST(dir));
 7130              		.loc 1 3453 0 is_stmt 1
 7131 009e 0C9C     		ldr	r4, [sp, #48]
 7132              	.LVL1030:
 7133 00a0 697D     		ldrb	r1, [r5, #21]
 7134 00a2 0902     		lsl	r1, r1, #8
 7135 00a4 2B7D     		ldrb	r3, [r5, #20]
 7136 00a6 1943     		orr	r1, r3
 7137 00a8 0904     		lsl	r1, r1, #16
 7138 00aa EA7E     		ldrb	r2, [r5, #27]
 7139 00ac 1202     		lsl	r2, r2, #8
 7140 00ae AB7E     		ldrb	r3, [r5, #26]
 7141 00b0 1343     		orr	r3, r2
 7142 00b2 1943     		orr	r1, r3
 7143 00b4 201C     		mov	r0, r4
 7144 00b6 FFF7FEFF 		bl	clust2sect
 7145              	.LVL1031:
 7146 00ba 011E     		sub	r1, r0, #0
 7147              	.LVL1032:
3454:.\sd/ff.c     **** 							if (!dw) {
 7148              		.loc 1 3454 0
 7149 00bc 21D0     		beq	.L504
3455:.\sd/ff.c     **** 								res = FR_INT_ERR;
3456:.\sd/ff.c     **** 							} else {
3457:.\sd/ff.c     **** 								res = move_window(djn.fs, dw);
 7150              		.loc 1 3457 0
 7151 00be 201C     		mov	r0, r4
 7152              	.LVL1033:
 7153 00c0 FFF7FEFF 		bl	move_window
 7154              	.LVL1034:
 7155 00c4 041C     		mov	r4, r0
 7156              	.LVL1035:
3458:.\sd/ff.c     **** 								dir = djn.fs->win+SZ_DIR;	/* .. entry */
 7157              		.loc 1 3458 0
 7158 00c6 0C9B     		ldr	r3, [sp, #48]
 7159              	.LVL1036:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 196


3459:.\sd/ff.c     **** 								if (res == FR_OK && dir[1] == '.') {
 7160              		.loc 1 3459 0
 7161 00c8 1CD1     		bne	.L499
 7162              		.loc 1 3459 0 is_stmt 0 discriminator 1
 7163 00ca 5122     		mov	r2, #81
 7164 00cc 9A5C     		ldrb	r2, [r3, r2]
 7165 00ce 2E2A     		cmp	r2, #46
 7166 00d0 18D1     		bne	.L499
3460:.\sd/ff.c     **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 7167              		.loc 1 3460 0 is_stmt 1
 7168 00d2 1A78     		ldrb	r2, [r3]
 7169 00d4 032A     		cmp	r2, #3
 7170 00d6 03D1     		bne	.L500
 7171              		.loc 1 3460 0 is_stmt 0 discriminator 2
 7172 00d8 0E99     		ldr	r1, [sp, #56]
 7173 00da 5A6A     		ldr	r2, [r3, #36]
 7174 00dc 9142     		cmp	r1, r2
 7175 00de 01D0     		beq	.L505
 7176              	.L500:
 7177              		.loc 1 3460 0 discriminator 1
 7178 00e0 0E9A     		ldr	r2, [sp, #56]
 7179 00e2 00E0     		b	.L501
 7180              	.L505:
 7181              		.loc 1 3460 0
 7182 00e4 0022     		mov	r2, #0
 7183              	.L501:
 7184              	.LVL1037:
3461:.\sd/ff.c     **** 									ST_CLUST(dir, dw);
 7185              		.loc 1 3461 0 is_stmt 1 discriminator 3
 7186 00e6 6A21     		mov	r1, #106
 7187 00e8 5A54     		strb	r2, [r3, r1]
 7188 00ea 100A     		lsr	r0, r2, #8
 7189              	.LVL1038:
 7190 00ec 6B21     		mov	r1, #107
 7191 00ee 5854     		strb	r0, [r3, r1]
 7192 00f0 120C     		lsr	r2, r2, #16
 7193              	.LVL1039:
 7194 00f2 6421     		mov	r1, #100
 7195 00f4 5A54     		strb	r2, [r3, r1]
 7196 00f6 120A     		lsr	r2, r2, #8
 7197 00f8 6521     		mov	r1, #101
 7198 00fa 5A54     		strb	r2, [r3, r1]
3462:.\sd/ff.c     **** 									djn.fs->wflag = 1;
 7199              		.loc 1 3462 0 discriminator 3
 7200 00fc 0122     		mov	r2, #1
 7201 00fe 1A71     		strb	r2, [r3, #4]
 7202 0100 00E0     		b	.L499
 7203              	.LVL1040:
 7204              	.L504:
3455:.\sd/ff.c     **** 								res = FR_INT_ERR;
 7205              		.loc 1 3455 0
 7206 0102 0224     		mov	r4, #2
 7207              	.LVL1041:
 7208              	.L499:
3463:.\sd/ff.c     **** 								}
3464:.\sd/ff.c     **** 							}
3465:.\sd/ff.c     **** 						}
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 197


3466:.\sd/ff.c     **** 						if (res == FR_OK) {
 7209              		.loc 1 3466 0
 7210 0104 002C     		cmp	r4, #0
 7211 0106 0AD1     		bne	.L496
3467:.\sd/ff.c     **** 							res = dir_remove(&djo);		/* Remove old entry */
 7212              		.loc 1 3467 0
 7213 0108 13A8     		add	r0, sp, #76
 7214 010a FFF7FEFF 		bl	dir_remove
 7215              	.LVL1042:
 7216 010e 041E     		sub	r4, r0, #0
 7217              	.LVL1043:
3468:.\sd/ff.c     **** 							if (res == FR_OK)
 7218              		.loc 1 3468 0
 7219 0110 05D1     		bne	.L496
3469:.\sd/ff.c     **** 								res = sync(djo.fs);
 7220              		.loc 1 3469 0
 7221 0112 1398     		ldr	r0, [sp, #76]
 7222              	.LVL1044:
 7223 0114 FFF7FEFF 		bl	sync
 7224              	.LVL1045:
 7225 0118 041C     		mov	r4, r0
 7226              	.LVL1046:
 7227 011a 00E0     		b	.L496
 7228              	.LVL1047:
 7229              	.L502:
3438:.\sd/ff.c     **** 				res = FR_NO_FILE;
 7230              		.loc 1 3438 0
 7231 011c 0424     		mov	r4, #4
 7232              	.LVL1048:
 7233              	.L496:
3470:.\sd/ff.c     **** 						}
3471:.\sd/ff.c     **** 					}
3472:.\sd/ff.c     **** /* End critical section */
3473:.\sd/ff.c     **** 				}
3474:.\sd/ff.c     **** 			}
3475:.\sd/ff.c     **** 		}
3476:.\sd/ff.c     **** 		FREE_BUF();
3477:.\sd/ff.c     **** 	}
3478:.\sd/ff.c     **** 	LEAVE_FF(djo.fs, res);
3479:.\sd/ff.c     **** }
 7234              		.loc 1 3479 0
 7235 011e 201C     		mov	r0, r4
 7236 0120 1BB0     		add	sp, sp, #108
 7237              		@ sp needed
 7238              	.LVL1049:
 7239 0122 30BD     		pop	{r4, r5, pc}
 7240              		.cfi_endproc
 7241              	.LFE44:
 7242              		.size	f_rename, .-f_rename
 7243              		.section	.rodata
 7244              		.align	2
 7245              		.set	.LANCHOR1,. + 0
 7246              		.type	excvt.4505, %object
 7247              		.size	excvt.4505, 128
 7248              	excvt.4505:
 7249 0000 80       		.byte	-128
 7250 0001 81       		.byte	-127
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 198


 7251 0002 82       		.byte	-126
 7252 0003 82       		.byte	-126
 7253 0004 84       		.byte	-124
 7254 0005 85       		.byte	-123
 7255 0006 86       		.byte	-122
 7256 0007 87       		.byte	-121
 7257 0008 88       		.byte	-120
 7258 0009 89       		.byte	-119
 7259 000a 8A       		.byte	-118
 7260 000b 8B       		.byte	-117
 7261 000c 8C       		.byte	-116
 7262 000d 8D       		.byte	-115
 7263 000e 8E       		.byte	-114
 7264 000f 8F       		.byte	-113
 7265 0010 80       		.byte	-128
 7266 0011 91       		.byte	-111
 7267 0012 92       		.byte	-110
 7268 0013 93       		.byte	-109
 7269 0014 94       		.byte	-108
 7270 0015 95       		.byte	-107
 7271 0016 96       		.byte	-106
 7272 0017 97       		.byte	-105
 7273 0018 98       		.byte	-104
 7274 0019 99       		.byte	-103
 7275 001a 8A       		.byte	-118
 7276 001b 9B       		.byte	-101
 7277 001c 8C       		.byte	-116
 7278 001d 8D       		.byte	-115
 7279 001e 8E       		.byte	-114
 7280 001f 8F       		.byte	-113
 7281 0020 A0       		.byte	-96
 7282 0021 A2       		.byte	-94
 7283 0022 A2       		.byte	-94
 7284 0023 A3       		.byte	-93
 7285 0024 A4       		.byte	-92
 7286 0025 A5       		.byte	-91
 7287 0026 A6       		.byte	-90
 7288 0027 A7       		.byte	-89
 7289 0028 A8       		.byte	-88
 7290 0029 A9       		.byte	-87
 7291 002a AA       		.byte	-86
 7292 002b AB       		.byte	-85
 7293 002c AC       		.byte	-84
 7294 002d AD       		.byte	-83
 7295 002e AE       		.byte	-82
 7296 002f AF       		.byte	-81
 7297 0030 B0       		.byte	-80
 7298 0031 B1       		.byte	-79
 7299 0032 B2       		.byte	-78
 7300 0033 B2       		.byte	-78
 7301 0034 A5       		.byte	-91
 7302 0035 B5       		.byte	-75
 7303 0036 B6       		.byte	-74
 7304 0037 B7       		.byte	-73
 7305 0038 A8       		.byte	-88
 7306 0039 B9       		.byte	-71
 7307 003a AA       		.byte	-86
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 199


 7308 003b BB       		.byte	-69
 7309 003c A3       		.byte	-93
 7310 003d BD       		.byte	-67
 7311 003e BD       		.byte	-67
 7312 003f AF       		.byte	-81
 7313 0040 C0       		.byte	-64
 7314 0041 C1       		.byte	-63
 7315 0042 C2       		.byte	-62
 7316 0043 C3       		.byte	-61
 7317 0044 C4       		.byte	-60
 7318 0045 C5       		.byte	-59
 7319 0046 C6       		.byte	-58
 7320 0047 C7       		.byte	-57
 7321 0048 C8       		.byte	-56
 7322 0049 C9       		.byte	-55
 7323 004a CA       		.byte	-54
 7324 004b CB       		.byte	-53
 7325 004c CC       		.byte	-52
 7326 004d CD       		.byte	-51
 7327 004e CE       		.byte	-50
 7328 004f CF       		.byte	-49
 7329 0050 D0       		.byte	-48
 7330 0051 D1       		.byte	-47
 7331 0052 D2       		.byte	-46
 7332 0053 D3       		.byte	-45
 7333 0054 D4       		.byte	-44
 7334 0055 D5       		.byte	-43
 7335 0056 D6       		.byte	-42
 7336 0057 D7       		.byte	-41
 7337 0058 D8       		.byte	-40
 7338 0059 D9       		.byte	-39
 7339 005a DA       		.byte	-38
 7340 005b DB       		.byte	-37
 7341 005c DC       		.byte	-36
 7342 005d DD       		.byte	-35
 7343 005e DE       		.byte	-34
 7344 005f DF       		.byte	-33
 7345 0060 C0       		.byte	-64
 7346 0061 C1       		.byte	-63
 7347 0062 C2       		.byte	-62
 7348 0063 C3       		.byte	-61
 7349 0064 C4       		.byte	-60
 7350 0065 C5       		.byte	-59
 7351 0066 C6       		.byte	-58
 7352 0067 C7       		.byte	-57
 7353 0068 C8       		.byte	-56
 7354 0069 C9       		.byte	-55
 7355 006a CA       		.byte	-54
 7356 006b CB       		.byte	-53
 7357 006c CC       		.byte	-52
 7358 006d CD       		.byte	-51
 7359 006e CE       		.byte	-50
 7360 006f CF       		.byte	-49
 7361 0070 D0       		.byte	-48
 7362 0071 D1       		.byte	-47
 7363 0072 D2       		.byte	-46
 7364 0073 D3       		.byte	-45
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 200


 7365 0074 D4       		.byte	-44
 7366 0075 D5       		.byte	-43
 7367 0076 D6       		.byte	-42
 7368 0077 D7       		.byte	-41
 7369 0078 D8       		.byte	-40
 7370 0079 D9       		.byte	-39
 7371 007a DA       		.byte	-38
 7372 007b DB       		.byte	-37
 7373 007c DC       		.byte	-36
 7374 007d DD       		.byte	-35
 7375 007e DE       		.byte	-34
 7376 007f DF       		.byte	-33
 7377              		.section	.rodata.str1.4,"aMS",%progbits,1
 7378              		.align	2
 7379              	.LC6:
 7380 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 7380      3A3B3C3D 
 7380      3E3F5B5D 
 7380      7C7F00
 7381 000f 00       		.bss
 7382              		.align	2
 7383              		.set	.LANCHOR0,. + 0
 7384              		.type	Files, %object
 7385              		.size	Files, 36
 7386              	Files:
 7387 0000 00000000 		.space	36
 7387      00000000 
 7387      00000000 
 7387      00000000 
 7387      00000000 
 7388              		.type	FatFs, %object
 7389              		.size	FatFs, 4
 7390              	FatFs:
 7391 0024 00000000 		.space	4
 7392              		.type	Fsid, %object
 7393              		.size	Fsid, 2
 7394              	Fsid:
 7395 0028 0000     		.space	2
 7396 002a 0000     		.text
 7397              	.Letext0:
 7398              		.file 2 "c:\\program files\\cypress\\psoc creator\\3.2\\psoc creator\\import\\gnu\\arm\\4.8.4\\arm
 7399              		.file 3 "c:\\program files\\cypress\\psoc creator\\3.2\\psoc creator\\import\\gnu\\arm\\4.8.4\\arm
 7400              		.file 4 "./sd/integer.h"
 7401              		.file 5 "./sd/ff.h"
 7402              		.file 6 "./sd/diskio.h"
 7403              		.section	.debug_info,"",%progbits
 7404              	.Ldebug_info0:
 7405 0000 99250000 		.4byte	0x2599
 7406 0004 0400     		.2byte	0x4
 7407 0006 00000000 		.4byte	.Ldebug_abbrev0
 7408 000a 04       		.byte	0x4
 7409 000b 01       		.uleb128 0x1
 7410 000c 90000000 		.4byte	.LASF167
 7411 0010 01       		.byte	0x1
 7412 0011 B2050000 		.4byte	.LASF168
 7413 0015 2E050000 		.4byte	.LASF169
 7414 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 201


 7415 001d 00000000 		.4byte	0
 7416 0021 00000000 		.4byte	.Ldebug_line0
 7417 0025 02       		.uleb128 0x2
 7418 0026 01       		.byte	0x1
 7419 0027 06       		.byte	0x6
 7420 0028 94010000 		.4byte	.LASF0
 7421 002c 03       		.uleb128 0x3
 7422 002d 58000000 		.4byte	.LASF3
 7423 0031 02       		.byte	0x2
 7424 0032 1C       		.byte	0x1c
 7425 0033 37000000 		.4byte	0x37
 7426 0037 02       		.uleb128 0x2
 7427 0038 01       		.byte	0x1
 7428 0039 08       		.byte	0x8
 7429 003a 8A040000 		.4byte	.LASF1
 7430 003e 02       		.uleb128 0x2
 7431 003f 02       		.byte	0x2
 7432 0040 05       		.byte	0x5
 7433 0041 AF040000 		.4byte	.LASF2
 7434 0045 03       		.uleb128 0x3
 7435 0046 7F050000 		.4byte	.LASF4
 7436 004a 02       		.byte	0x2
 7437 004b 26       		.byte	0x26
 7438 004c 50000000 		.4byte	0x50
 7439 0050 02       		.uleb128 0x2
 7440 0051 02       		.byte	0x2
 7441 0052 07       		.byte	0x7
 7442 0053 FB020000 		.4byte	.LASF5
 7443 0057 02       		.uleb128 0x2
 7444 0058 04       		.byte	0x4
 7445 0059 05       		.byte	0x5
 7446 005a D4010000 		.4byte	.LASF6
 7447 005e 03       		.uleb128 0x3
 7448 005f 72020000 		.4byte	.LASF7
 7449 0063 02       		.byte	0x2
 7450 0064 38       		.byte	0x38
 7451 0065 69000000 		.4byte	0x69
 7452 0069 02       		.uleb128 0x2
 7453 006a 04       		.byte	0x4
 7454 006b 07       		.byte	0x7
 7455 006c C8020000 		.4byte	.LASF8
 7456 0070 02       		.uleb128 0x2
 7457 0071 08       		.byte	0x8
 7458 0072 05       		.byte	0x5
 7459 0073 86010000 		.4byte	.LASF9
 7460 0077 02       		.uleb128 0x2
 7461 0078 08       		.byte	0x8
 7462 0079 07       		.byte	0x7
 7463 007a 0C010000 		.4byte	.LASF10
 7464 007e 04       		.uleb128 0x4
 7465 007f 04       		.byte	0x4
 7466 0080 05       		.byte	0x5
 7467 0081 696E7400 		.ascii	"int\000"
 7468 0085 02       		.uleb128 0x2
 7469 0086 04       		.byte	0x4
 7470 0087 07       		.byte	0x7
 7471 0088 B0020000 		.4byte	.LASF11
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 202


 7472 008c 03       		.uleb128 0x3
 7473 008d 3B060000 		.4byte	.LASF12
 7474 0091 03       		.byte	0x3
 7475 0092 2A       		.byte	0x2a
 7476 0093 2C000000 		.4byte	0x2c
 7477 0097 03       		.uleb128 0x3
 7478 0098 1A020000 		.4byte	.LASF13
 7479 009c 03       		.byte	0x3
 7480 009d 36       		.byte	0x36
 7481 009e 45000000 		.4byte	0x45
 7482 00a2 03       		.uleb128 0x3
 7483 00a3 25050000 		.4byte	.LASF14
 7484 00a7 03       		.byte	0x3
 7485 00a8 42       		.byte	0x42
 7486 00a9 5E000000 		.4byte	0x5e
 7487 00ad 03       		.uleb128 0x3
 7488 00ae BD020000 		.4byte	.LASF15
 7489 00b2 04       		.byte	0x4
 7490 00b3 0A       		.byte	0xa
 7491 00b4 A2000000 		.4byte	0xa2
 7492 00b8 03       		.uleb128 0x3
 7493 00b9 9B020000 		.4byte	.LASF16
 7494 00bd 04       		.byte	0x4
 7495 00be 0D       		.byte	0xd
 7496 00bf 8C000000 		.4byte	0x8c
 7497 00c3 03       		.uleb128 0x3
 7498 00c4 09040000 		.4byte	.LASF17
 7499 00c8 04       		.byte	0x4
 7500 00c9 10       		.byte	0x10
 7501 00ca 97000000 		.4byte	0x97
 7502 00ce 03       		.uleb128 0x3
 7503 00cf 54020000 		.4byte	.LASF18
 7504 00d3 04       		.byte	0x4
 7505 00d4 14       		.byte	0x14
 7506 00d5 A2000000 		.4byte	0xa2
 7507 00d9 03       		.uleb128 0x3
 7508 00da 38040000 		.4byte	.LASF19
 7509 00de 05       		.byte	0x5
 7510 00df 42       		.byte	0x42
 7511 00e0 E4000000 		.4byte	0xe4
 7512 00e4 02       		.uleb128 0x2
 7513 00e5 01       		.byte	0x1
 7514 00e6 08       		.byte	0x8
 7515 00e7 69050000 		.4byte	.LASF20
 7516 00eb 05       		.uleb128 0x5
 7517 00ec 3002     		.2byte	0x230
 7518 00ee 05       		.byte	0x5
 7519 00ef 4D       		.byte	0x4d
 7520 00f0 CC010000 		.4byte	0x1cc
 7521 00f4 06       		.uleb128 0x6
 7522 00f5 42000000 		.4byte	.LASF21
 7523 00f9 05       		.byte	0x5
 7524 00fa 4E       		.byte	0x4e
 7525 00fb B8000000 		.4byte	0xb8
 7526 00ff 00       		.byte	0
 7527 0100 07       		.uleb128 0x7
 7528 0101 64727600 		.ascii	"drv\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 203


 7529 0105 05       		.byte	0x5
 7530 0106 4F       		.byte	0x4f
 7531 0107 B8000000 		.4byte	0xb8
 7532 010b 01       		.byte	0x1
 7533 010c 06       		.uleb128 0x6
 7534 010d 7D020000 		.4byte	.LASF22
 7535 0111 05       		.byte	0x5
 7536 0112 50       		.byte	0x50
 7537 0113 B8000000 		.4byte	0xb8
 7538 0117 02       		.byte	0x2
 7539 0118 06       		.uleb128 0x6
 7540 0119 F3010000 		.4byte	.LASF23
 7541 011d 05       		.byte	0x5
 7542 011e 51       		.byte	0x51
 7543 011f B8000000 		.4byte	0xb8
 7544 0123 03       		.byte	0x3
 7545 0124 06       		.uleb128 0x6
 7546 0125 1F050000 		.4byte	.LASF24
 7547 0129 05       		.byte	0x5
 7548 012a 52       		.byte	0x52
 7549 012b B8000000 		.4byte	0xb8
 7550 012f 04       		.byte	0x4
 7551 0130 06       		.uleb128 0x6
 7552 0131 F2050000 		.4byte	.LASF25
 7553 0135 05       		.byte	0x5
 7554 0136 53       		.byte	0x53
 7555 0137 B8000000 		.4byte	0xb8
 7556 013b 05       		.byte	0x5
 7557 013c 07       		.uleb128 0x7
 7558 013d 696400   		.ascii	"id\000"
 7559 0140 05       		.byte	0x5
 7560 0141 54       		.byte	0x54
 7561 0142 C3000000 		.4byte	0xc3
 7562 0146 06       		.byte	0x6
 7563 0147 06       		.uleb128 0x6
 7564 0148 74000000 		.4byte	.LASF26
 7565 014c 05       		.byte	0x5
 7566 014d 55       		.byte	0x55
 7567 014e C3000000 		.4byte	0xc3
 7568 0152 08       		.byte	0x8
 7569 0153 06       		.uleb128 0x6
 7570 0154 61010000 		.4byte	.LASF27
 7571 0158 05       		.byte	0x5
 7572 0159 5D       		.byte	0x5d
 7573 015a CE000000 		.4byte	0xce
 7574 015e 0C       		.byte	0xc
 7575 015f 06       		.uleb128 0x6
 7576 0160 1C040000 		.4byte	.LASF28
 7577 0164 05       		.byte	0x5
 7578 0165 5E       		.byte	0x5e
 7579 0166 CE000000 		.4byte	0xce
 7580 016a 10       		.byte	0x10
 7581 016b 06       		.uleb128 0x6
 7582 016c 4D060000 		.4byte	.LASF29
 7583 0170 05       		.byte	0x5
 7584 0171 5F       		.byte	0x5f
 7585 0172 CE000000 		.4byte	0xce
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 204


 7586 0176 14       		.byte	0x14
 7587 0177 06       		.uleb128 0x6
 7588 0178 CB010000 		.4byte	.LASF30
 7589 017c 05       		.byte	0x5
 7590 017d 64       		.byte	0x64
 7591 017e CE000000 		.4byte	0xce
 7592 0182 18       		.byte	0x18
 7593 0183 06       		.uleb128 0x6
 7594 0184 C5010000 		.4byte	.LASF31
 7595 0188 05       		.byte	0x5
 7596 0189 65       		.byte	0x65
 7597 018a CE000000 		.4byte	0xce
 7598 018e 1C       		.byte	0x1c
 7599 018f 06       		.uleb128 0x6
 7600 0190 4C020000 		.4byte	.LASF32
 7601 0194 05       		.byte	0x5
 7602 0195 66       		.byte	0x66
 7603 0196 CE000000 		.4byte	0xce
 7604 019a 20       		.byte	0x20
 7605 019b 06       		.uleb128 0x6
 7606 019c 7E010000 		.4byte	.LASF33
 7607 01a0 05       		.byte	0x5
 7608 01a1 67       		.byte	0x67
 7609 01a2 CE000000 		.4byte	0xce
 7610 01a6 24       		.byte	0x24
 7611 01a7 06       		.uleb128 0x6
 7612 01a8 0E030000 		.4byte	.LASF34
 7613 01ac 05       		.byte	0x5
 7614 01ad 68       		.byte	0x68
 7615 01ae CE000000 		.4byte	0xce
 7616 01b2 28       		.byte	0x28
 7617 01b3 06       		.uleb128 0x6
 7618 01b4 44030000 		.4byte	.LASF35
 7619 01b8 05       		.byte	0x5
 7620 01b9 69       		.byte	0x69
 7621 01ba CE000000 		.4byte	0xce
 7622 01be 2C       		.byte	0x2c
 7623 01bf 07       		.uleb128 0x7
 7624 01c0 77696E00 		.ascii	"win\000"
 7625 01c4 05       		.byte	0x5
 7626 01c5 6A       		.byte	0x6a
 7627 01c6 CC010000 		.4byte	0x1cc
 7628 01ca 30       		.byte	0x30
 7629 01cb 00       		.byte	0
 7630 01cc 08       		.uleb128 0x8
 7631 01cd B8000000 		.4byte	0xb8
 7632 01d1 DD010000 		.4byte	0x1dd
 7633 01d5 09       		.uleb128 0x9
 7634 01d6 DD010000 		.4byte	0x1dd
 7635 01da FF01     		.2byte	0x1ff
 7636 01dc 00       		.byte	0
 7637 01dd 02       		.uleb128 0x2
 7638 01de 04       		.byte	0x4
 7639 01df 07       		.byte	0x7
 7640 01e0 D6030000 		.4byte	.LASF36
 7641 01e4 03       		.uleb128 0x3
 7642 01e5 95030000 		.4byte	.LASF37
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 205


 7643 01e9 05       		.byte	0x5
 7644 01ea 6B       		.byte	0x6b
 7645 01eb EB000000 		.4byte	0xeb
 7646 01ef 0A       		.uleb128 0xa
 7647 01f0 28       		.byte	0x28
 7648 01f1 05       		.byte	0x5
 7649 01f2 71       		.byte	0x71
 7650 01f3 86020000 		.4byte	0x286
 7651 01f7 07       		.uleb128 0x7
 7652 01f8 667300   		.ascii	"fs\000"
 7653 01fb 05       		.byte	0x5
 7654 01fc 72       		.byte	0x72
 7655 01fd 86020000 		.4byte	0x286
 7656 0201 00       		.byte	0
 7657 0202 07       		.uleb128 0x7
 7658 0203 696400   		.ascii	"id\000"
 7659 0206 05       		.byte	0x5
 7660 0207 73       		.byte	0x73
 7661 0208 C3000000 		.4byte	0xc3
 7662 020c 04       		.byte	0x4
 7663 020d 06       		.uleb128 0x6
 7664 020e B9040000 		.4byte	.LASF38
 7665 0212 05       		.byte	0x5
 7666 0213 74       		.byte	0x74
 7667 0214 B8000000 		.4byte	0xb8
 7668 0218 06       		.byte	0x6
 7669 0219 06       		.uleb128 0x6
 7670 021a 0A060000 		.4byte	.LASF39
 7671 021e 05       		.byte	0x5
 7672 021f 75       		.byte	0x75
 7673 0220 B8000000 		.4byte	0xb8
 7674 0224 07       		.byte	0x7
 7675 0225 06       		.uleb128 0x6
 7676 0226 B5030000 		.4byte	.LASF40
 7677 022a 05       		.byte	0x5
 7678 022b 76       		.byte	0x76
 7679 022c CE000000 		.4byte	0xce
 7680 0230 08       		.byte	0x8
 7681 0231 06       		.uleb128 0x6
 7682 0232 C5010000 		.4byte	.LASF31
 7683 0236 05       		.byte	0x5
 7684 0237 77       		.byte	0x77
 7685 0238 CE000000 		.4byte	0xce
 7686 023c 0C       		.byte	0xc
 7687 023d 06       		.uleb128 0x6
 7688 023e 0E040000 		.4byte	.LASF41
 7689 0242 05       		.byte	0x5
 7690 0243 78       		.byte	0x78
 7691 0244 CE000000 		.4byte	0xce
 7692 0248 10       		.byte	0x10
 7693 0249 06       		.uleb128 0x6
 7694 024a AA060000 		.4byte	.LASF42
 7695 024e 05       		.byte	0x5
 7696 024f 79       		.byte	0x79
 7697 0250 CE000000 		.4byte	0xce
 7698 0254 14       		.byte	0x14
 7699 0255 06       		.uleb128 0x6
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 206


 7700 0256 84040000 		.4byte	.LASF43
 7701 025a 05       		.byte	0x5
 7702 025b 7A       		.byte	0x7a
 7703 025c CE000000 		.4byte	0xce
 7704 0260 18       		.byte	0x18
 7705 0261 06       		.uleb128 0x6
 7706 0262 6C010000 		.4byte	.LASF44
 7707 0266 05       		.byte	0x5
 7708 0267 7C       		.byte	0x7c
 7709 0268 CE000000 		.4byte	0xce
 7710 026c 1C       		.byte	0x1c
 7711 026d 06       		.uleb128 0x6
 7712 026e A0020000 		.4byte	.LASF45
 7713 0272 05       		.byte	0x5
 7714 0273 7D       		.byte	0x7d
 7715 0274 8C020000 		.4byte	0x28c
 7716 0278 20       		.byte	0x20
 7717 0279 06       		.uleb128 0x6
 7718 027a 7E000000 		.4byte	.LASF46
 7719 027e 05       		.byte	0x5
 7720 027f 83       		.byte	0x83
 7721 0280 AD000000 		.4byte	0xad
 7722 0284 24       		.byte	0x24
 7723 0285 00       		.byte	0
 7724 0286 0B       		.uleb128 0xb
 7725 0287 04       		.byte	0x4
 7726 0288 E4010000 		.4byte	0x1e4
 7727 028c 0B       		.uleb128 0xb
 7728 028d 04       		.byte	0x4
 7729 028e B8000000 		.4byte	0xb8
 7730 0292 0C       		.uleb128 0xc
 7731 0293 46494C00 		.ascii	"FIL\000"
 7732 0297 05       		.byte	0x5
 7733 0298 88       		.byte	0x88
 7734 0299 EF010000 		.4byte	0x1ef
 7735 029d 0A       		.uleb128 0xa
 7736 029e 1C       		.byte	0x1c
 7737 029f 05       		.byte	0x5
 7738 02a0 8E       		.byte	0x8e
 7739 02a1 03030000 		.4byte	0x303
 7740 02a5 07       		.uleb128 0x7
 7741 02a6 667300   		.ascii	"fs\000"
 7742 02a9 05       		.byte	0x5
 7743 02aa 8F       		.byte	0x8f
 7744 02ab 86020000 		.4byte	0x286
 7745 02af 00       		.byte	0
 7746 02b0 07       		.uleb128 0x7
 7747 02b1 696400   		.ascii	"id\000"
 7748 02b4 05       		.byte	0x5
 7749 02b5 90       		.byte	0x90
 7750 02b6 C3000000 		.4byte	0xc3
 7751 02ba 04       		.byte	0x4
 7752 02bb 06       		.uleb128 0x6
 7753 02bc 90050000 		.4byte	.LASF47
 7754 02c0 05       		.byte	0x5
 7755 02c1 91       		.byte	0x91
 7756 02c2 C3000000 		.4byte	0xc3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 207


 7757 02c6 06       		.byte	0x6
 7758 02c7 06       		.uleb128 0x6
 7759 02c8 0E040000 		.4byte	.LASF41
 7760 02cc 05       		.byte	0x5
 7761 02cd 92       		.byte	0x92
 7762 02ce CE000000 		.4byte	0xce
 7763 02d2 08       		.byte	0x8
 7764 02d3 06       		.uleb128 0x6
 7765 02d4 AA060000 		.4byte	.LASF42
 7766 02d8 05       		.byte	0x5
 7767 02d9 93       		.byte	0x93
 7768 02da CE000000 		.4byte	0xce
 7769 02de 0C       		.byte	0xc
 7770 02df 06       		.uleb128 0x6
 7771 02e0 3D010000 		.4byte	.LASF48
 7772 02e4 05       		.byte	0x5
 7773 02e5 94       		.byte	0x94
 7774 02e6 CE000000 		.4byte	0xce
 7775 02ea 10       		.byte	0x10
 7776 02eb 07       		.uleb128 0x7
 7777 02ec 64697200 		.ascii	"dir\000"
 7778 02f0 05       		.byte	0x5
 7779 02f1 95       		.byte	0x95
 7780 02f2 8C020000 		.4byte	0x28c
 7781 02f6 14       		.byte	0x14
 7782 02f7 07       		.uleb128 0x7
 7783 02f8 666E00   		.ascii	"fn\000"
 7784 02fb 05       		.byte	0x5
 7785 02fc 96       		.byte	0x96
 7786 02fd 8C020000 		.4byte	0x28c
 7787 0301 18       		.byte	0x18
 7788 0302 00       		.byte	0
 7789 0303 0C       		.uleb128 0xc
 7790 0304 44495200 		.ascii	"DIR\000"
 7791 0308 05       		.byte	0x5
 7792 0309 9B       		.byte	0x9b
 7793 030a 9D020000 		.4byte	0x29d
 7794 030e 0A       		.uleb128 0xa
 7795 030f 18       		.byte	0x18
 7796 0310 05       		.byte	0x5
 7797 0311 A1       		.byte	0xa1
 7798 0312 53030000 		.4byte	0x353
 7799 0316 06       		.uleb128 0x6
 7800 0317 C5010000 		.4byte	.LASF31
 7801 031b 05       		.byte	0x5
 7802 031c A2       		.byte	0xa2
 7803 031d CE000000 		.4byte	0xce
 7804 0321 00       		.byte	0
 7805 0322 06       		.uleb128 0x6
 7806 0323 A3030000 		.4byte	.LASF49
 7807 0327 05       		.byte	0x5
 7808 0328 A3       		.byte	0xa3
 7809 0329 C3000000 		.4byte	0xc3
 7810 032d 04       		.byte	0x4
 7811 032e 06       		.uleb128 0x6
 7812 032f C2020000 		.4byte	.LASF50
 7813 0333 05       		.byte	0x5
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 208


 7814 0334 A4       		.byte	0xa4
 7815 0335 C3000000 		.4byte	0xc3
 7816 0339 06       		.byte	0x6
 7817 033a 06       		.uleb128 0x6
 7818 033b 0F060000 		.4byte	.LASF51
 7819 033f 05       		.byte	0x5
 7820 0340 A5       		.byte	0xa5
 7821 0341 B8000000 		.4byte	0xb8
 7822 0345 08       		.byte	0x8
 7823 0346 06       		.uleb128 0x6
 7824 0347 6B030000 		.4byte	.LASF52
 7825 034b 05       		.byte	0x5
 7826 034c A6       		.byte	0xa6
 7827 034d 53030000 		.4byte	0x353
 7828 0351 09       		.byte	0x9
 7829 0352 00       		.byte	0
 7830 0353 08       		.uleb128 0x8
 7831 0354 D9000000 		.4byte	0xd9
 7832 0358 63030000 		.4byte	0x363
 7833 035c 0D       		.uleb128 0xd
 7834 035d DD010000 		.4byte	0x1dd
 7835 0361 0C       		.byte	0xc
 7836 0362 00       		.byte	0
 7837 0363 03       		.uleb128 0x3
 7838 0364 33060000 		.4byte	.LASF53
 7839 0368 05       		.byte	0x5
 7840 0369 AB       		.byte	0xab
 7841 036a 0E030000 		.4byte	0x30e
 7842 036e 0E       		.uleb128 0xe
 7843 036f 01       		.byte	0x1
 7844 0370 05       		.byte	0x5
 7845 0371 B1       		.byte	0xb1
 7846 0372 EF030000 		.4byte	0x3ef
 7847 0376 0F       		.uleb128 0xf
 7848 0377 8A050000 		.4byte	.LASF54
 7849 037b 00       		.sleb128 0
 7850 037c 0F       		.uleb128 0xf
 7851 037d 38030000 		.4byte	.LASF55
 7852 0381 01       		.sleb128 1
 7853 0382 0F       		.uleb128 0xf
 7854 0383 25030000 		.4byte	.LASF56
 7855 0387 02       		.sleb128 2
 7856 0388 0F       		.uleb128 0xf
 7857 0389 00000000 		.4byte	.LASF57
 7858 038d 03       		.sleb128 3
 7859 038e 0F       		.uleb128 0xf
 7860 038f 27040000 		.4byte	.LASF58
 7861 0393 04       		.sleb128 4
 7862 0394 0F       		.uleb128 0xf
 7863 0395 88060000 		.4byte	.LASF59
 7864 0399 05       		.sleb128 5
 7865 039a 0F       		.uleb128 0xf
 7866 039b CB050000 		.4byte	.LASF60
 7867 039f 06       		.sleb128 6
 7868 03a0 0F       		.uleb128 0xf
 7869 03a1 DB040000 		.4byte	.LASF61
 7870 03a5 07       		.sleb128 7
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 209


 7871 03a6 0F       		.uleb128 0xf
 7872 03a7 43020000 		.4byte	.LASF62
 7873 03ab 08       		.sleb128 8
 7874 03ac 0F       		.uleb128 0xf
 7875 03ad 48010000 		.4byte	.LASF63
 7876 03b1 09       		.sleb128 9
 7877 03b2 0F       		.uleb128 0xf
 7878 03b3 77030000 		.4byte	.LASF64
 7879 03b7 0A       		.sleb128 10
 7880 03b8 0F       		.uleb128 0xf
 7881 03b9 CA040000 		.4byte	.LASF65
 7882 03bd 0B       		.sleb128 11
 7883 03be 0F       		.uleb128 0xf
 7884 03bf 3E040000 		.4byte	.LASF66
 7885 03c3 0C       		.sleb128 12
 7886 03c4 0F       		.uleb128 0xf
 7887 03c5 09020000 		.4byte	.LASF67
 7888 03c9 0D       		.sleb128 13
 7889 03ca 0F       		.uleb128 0xf
 7890 03cb FB040000 		.4byte	.LASF68
 7891 03cf 0E       		.sleb128 14
 7892 03d0 0F       		.uleb128 0xf
 7893 03d1 FE030000 		.4byte	.LASF69
 7894 03d5 0F       		.sleb128 15
 7895 03d6 0F       		.uleb128 0xf
 7896 03d7 15050000 		.4byte	.LASF70
 7897 03db 10       		.sleb128 16
 7898 03dc 0F       		.uleb128 0xf
 7899 03dd 30020000 		.4byte	.LASF71
 7900 03e1 11       		.sleb128 17
 7901 03e2 0F       		.uleb128 0xf
 7902 03e3 23000000 		.4byte	.LASF72
 7903 03e7 12       		.sleb128 18
 7904 03e8 0F       		.uleb128 0xf
 7905 03e9 B0010000 		.4byte	.LASF73
 7906 03ed 13       		.sleb128 19
 7907 03ee 00       		.byte	0
 7908 03ef 03       		.uleb128 0x3
 7909 03f0 5D060000 		.4byte	.LASF74
 7910 03f4 05       		.byte	0x5
 7911 03f5 C6       		.byte	0xc6
 7912 03f6 6E030000 		.4byte	0x36e
 7913 03fa 03       		.uleb128 0x3
 7914 03fb A3050000 		.4byte	.LASF75
 7915 03ff 06       		.byte	0x6
 7916 0400 10       		.byte	0x10
 7917 0401 B8000000 		.4byte	0xb8
 7918 0405 0E       		.uleb128 0xe
 7919 0406 01       		.byte	0x1
 7920 0407 06       		.byte	0x6
 7921 0408 13       		.byte	0x13
 7922 0409 2C040000 		.4byte	0x42c
 7923 040d 0F       		.uleb128 0xf
 7924 040e 15040000 		.4byte	.LASF76
 7925 0412 00       		.sleb128 0
 7926 0413 0F       		.uleb128 0xf
 7927 0414 65060000 		.4byte	.LASF77
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 210


 7928 0418 01       		.sleb128 1
 7929 0419 0F       		.uleb128 0xf
 7930 041a 0D000000 		.4byte	.LASF78
 7931 041e 02       		.sleb128 2
 7932 041f 0F       		.uleb128 0xf
 7933 0420 69000000 		.4byte	.LASF79
 7934 0424 03       		.sleb128 3
 7935 0425 0F       		.uleb128 0xf
 7936 0426 E8010000 		.4byte	.LASF80
 7937 042a 04       		.sleb128 4
 7938 042b 00       		.byte	0
 7939 042c 03       		.uleb128 0x3
 7940 042d 59040000 		.4byte	.LASF81
 7941 0431 06       		.byte	0x6
 7942 0432 19       		.byte	0x19
 7943 0433 05040000 		.4byte	0x405
 7944 0437 0A       		.uleb128 0xa
 7945 0438 0C       		.byte	0xc
 7946 0439 01       		.byte	0x1
 7947 043a 8D       		.byte	0x8d
 7948 043b 6F040000 		.4byte	0x46f
 7949 043f 07       		.uleb128 0x7
 7950 0440 667300   		.ascii	"fs\000"
 7951 0443 01       		.byte	0x1
 7952 0444 8E       		.byte	0x8e
 7953 0445 86020000 		.4byte	0x286
 7954 0449 00       		.byte	0
 7955 044a 07       		.uleb128 0x7
 7956 044b 636C7500 		.ascii	"clu\000"
 7957 044f 01       		.byte	0x1
 7958 0450 8F       		.byte	0x8f
 7959 0451 CE000000 		.4byte	0xce
 7960 0455 04       		.byte	0x4
 7961 0456 07       		.uleb128 0x7
 7962 0457 69647800 		.ascii	"idx\000"
 7963 045b 01       		.byte	0x1
 7964 045c 90       		.byte	0x90
 7965 045d C3000000 		.4byte	0xc3
 7966 0461 08       		.byte	0x8
 7967 0462 07       		.uleb128 0x7
 7968 0463 63747200 		.ascii	"ctr\000"
 7969 0467 01       		.byte	0x1
 7970 0468 91       		.byte	0x91
 7971 0469 C3000000 		.4byte	0xc3
 7972 046d 0A       		.byte	0xa
 7973 046e 00       		.byte	0
 7974 046f 03       		.uleb128 0x3
 7975 0470 93020000 		.4byte	.LASF82
 7976 0474 01       		.byte	0x1
 7977 0475 92       		.byte	0x92
 7978 0476 37040000 		.4byte	0x437
 7979 047a 10       		.uleb128 0x10
 7980 047b FB050000 		.4byte	.LASF83
 7981 047f 01       		.byte	0x1
 7982 0480 1102     		.2byte	0x211
 7983 0482 00000000 		.4byte	.LFB0
 7984 0486 14000000 		.4byte	.LFE0-.LFB0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 211


 7985 048a 01       		.uleb128 0x1
 7986 048b 9C       		.byte	0x9c
 7987 048c DD040000 		.4byte	0x4dd
 7988 0490 11       		.uleb128 0x11
 7989 0491 64737400 		.ascii	"dst\000"
 7990 0495 01       		.byte	0x1
 7991 0496 1102     		.2byte	0x211
 7992 0498 DD040000 		.4byte	0x4dd
 7993 049c 00000000 		.4byte	.LLST0
 7994 04a0 11       		.uleb128 0x11
 7995 04a1 73726300 		.ascii	"src\000"
 7996 04a5 01       		.byte	0x1
 7997 04a6 1102     		.2byte	0x211
 7998 04a8 DF040000 		.4byte	0x4df
 7999 04ac 21000000 		.4byte	.LLST1
 8000 04b0 11       		.uleb128 0x11
 8001 04b1 636E7400 		.ascii	"cnt\000"
 8002 04b5 01       		.byte	0x1
 8003 04b6 1102     		.2byte	0x211
 8004 04b8 AD000000 		.4byte	0xad
 8005 04bc 42000000 		.4byte	.LLST2
 8006 04c0 12       		.uleb128 0x12
 8007 04c1 6400     		.ascii	"d\000"
 8008 04c3 01       		.byte	0x1
 8009 04c4 1202     		.2byte	0x212
 8010 04c6 8C020000 		.4byte	0x28c
 8011 04ca 76000000 		.4byte	.LLST3
 8012 04ce 12       		.uleb128 0x12
 8013 04cf 7300     		.ascii	"s\000"
 8014 04d1 01       		.byte	0x1
 8015 04d2 1302     		.2byte	0x213
 8016 04d4 E6040000 		.4byte	0x4e6
 8017 04d8 A1000000 		.4byte	.LLST4
 8018 04dc 00       		.byte	0
 8019 04dd 13       		.uleb128 0x13
 8020 04de 04       		.byte	0x4
 8021 04df 0B       		.uleb128 0xb
 8022 04e0 04       		.byte	0x4
 8023 04e1 E5040000 		.4byte	0x4e5
 8024 04e5 14       		.uleb128 0x14
 8025 04e6 0B       		.uleb128 0xb
 8026 04e7 04       		.byte	0x4
 8027 04e8 EC040000 		.4byte	0x4ec
 8028 04ec 15       		.uleb128 0x15
 8029 04ed B8000000 		.4byte	0xb8
 8030 04f1 10       		.uleb128 0x10
 8031 04f2 CE030000 		.4byte	.LASF84
 8032 04f6 01       		.byte	0x1
 8033 04f7 2202     		.2byte	0x222
 8034 04f9 00000000 		.4byte	.LFB1
 8035 04fd 12000000 		.4byte	.LFE1-.LFB1
 8036 0501 01       		.uleb128 0x1
 8037 0502 9C       		.byte	0x9c
 8038 0503 46050000 		.4byte	0x546
 8039 0507 11       		.uleb128 0x11
 8040 0508 64737400 		.ascii	"dst\000"
 8041 050c 01       		.byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 212


 8042 050d 2202     		.2byte	0x222
 8043 050f DD040000 		.4byte	0x4dd
 8044 0513 CC000000 		.4byte	.LLST5
 8045 0517 11       		.uleb128 0x11
 8046 0518 76616C00 		.ascii	"val\000"
 8047 051c 01       		.byte	0x1
 8048 051d 2202     		.2byte	0x222
 8049 051f 7E000000 		.4byte	0x7e
 8050 0523 ED000000 		.4byte	.LLST6
 8051 0527 11       		.uleb128 0x11
 8052 0528 636E7400 		.ascii	"cnt\000"
 8053 052c 01       		.byte	0x1
 8054 052d 2202     		.2byte	0x222
 8055 052f AD000000 		.4byte	0xad
 8056 0533 0E010000 		.4byte	.LLST7
 8057 0537 12       		.uleb128 0x12
 8058 0538 6400     		.ascii	"d\000"
 8059 053a 01       		.byte	0x1
 8060 053b 2302     		.2byte	0x223
 8061 053d 8C020000 		.4byte	0x28c
 8062 0541 42010000 		.4byte	.LLST8
 8063 0545 00       		.byte	0
 8064 0546 16       		.uleb128 0x16
 8065 0547 4C030000 		.4byte	.LASF85
 8066 054b 01       		.byte	0x1
 8067 054c 2B02     		.2byte	0x22b
 8068 054e 7E000000 		.4byte	0x7e
 8069 0552 00000000 		.4byte	.LFB2
 8070 0556 24000000 		.4byte	.LFE2-.LFB2
 8071 055a 01       		.uleb128 0x1
 8072 055b 9C       		.byte	0x9c
 8073 055c BB050000 		.4byte	0x5bb
 8074 0560 11       		.uleb128 0x11
 8075 0561 64737400 		.ascii	"dst\000"
 8076 0565 01       		.byte	0x1
 8077 0566 2B02     		.2byte	0x22b
 8078 0568 DF040000 		.4byte	0x4df
 8079 056c 6D010000 		.4byte	.LLST9
 8080 0570 11       		.uleb128 0x11
 8081 0571 73726300 		.ascii	"src\000"
 8082 0575 01       		.byte	0x1
 8083 0576 2B02     		.2byte	0x22b
 8084 0578 DF040000 		.4byte	0x4df
 8085 057c 99010000 		.4byte	.LLST10
 8086 0580 11       		.uleb128 0x11
 8087 0581 636E7400 		.ascii	"cnt\000"
 8088 0585 01       		.byte	0x1
 8089 0586 2B02     		.2byte	0x22b
 8090 0588 AD000000 		.4byte	0xad
 8091 058c BA010000 		.4byte	.LLST11
 8092 0590 12       		.uleb128 0x12
 8093 0591 6400     		.ascii	"d\000"
 8094 0593 01       		.byte	0x1
 8095 0594 2C02     		.2byte	0x22c
 8096 0596 E6040000 		.4byte	0x4e6
 8097 059a D8010000 		.4byte	.LLST12
 8098 059e 12       		.uleb128 0x12
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 213


 8099 059f 7300     		.ascii	"s\000"
 8100 05a1 01       		.byte	0x1
 8101 05a2 2C02     		.2byte	0x22c
 8102 05a4 E6040000 		.4byte	0x4e6
 8103 05a8 17020000 		.4byte	.LLST13
 8104 05ac 12       		.uleb128 0x12
 8105 05ad 7200     		.ascii	"r\000"
 8106 05af 01       		.byte	0x1
 8107 05b0 2D02     		.2byte	0x22d
 8108 05b2 7E000000 		.4byte	0x7e
 8109 05b6 4B020000 		.4byte	.LLST14
 8110 05ba 00       		.byte	0
 8111 05bb 16       		.uleb128 0x16
 8112 05bc 50000000 		.4byte	.LASF86
 8113 05c0 01       		.byte	0x1
 8114 05c1 3502     		.2byte	0x235
 8115 05c3 7E000000 		.4byte	0x7e
 8116 05c7 00000000 		.4byte	.LFB3
 8117 05cb 12000000 		.4byte	.LFE3-.LFB3
 8118 05cf 01       		.uleb128 0x1
 8119 05d0 9C       		.byte	0x9c
 8120 05d1 F4050000 		.4byte	0x5f4
 8121 05d5 11       		.uleb128 0x11
 8122 05d6 73747200 		.ascii	"str\000"
 8123 05da 01       		.byte	0x1
 8124 05db 3502     		.2byte	0x235
 8125 05dd F4050000 		.4byte	0x5f4
 8126 05e1 75020000 		.4byte	.LLST15
 8127 05e5 17       		.uleb128 0x17
 8128 05e6 63687200 		.ascii	"chr\000"
 8129 05ea 01       		.byte	0x1
 8130 05eb 3502     		.2byte	0x235
 8131 05ed 7E000000 		.4byte	0x7e
 8132 05f1 01       		.uleb128 0x1
 8133 05f2 51       		.byte	0x51
 8134 05f3 00       		.byte	0
 8135 05f4 0B       		.uleb128 0xb
 8136 05f5 04       		.byte	0x4
 8137 05f6 FA050000 		.4byte	0x5fa
 8138 05fa 15       		.uleb128 0x15
 8139 05fb E4000000 		.4byte	0xe4
 8140 05ff 16       		.uleb128 0x16
 8141 0600 2C010000 		.4byte	.LASF87
 8142 0604 01       		.byte	0x1
 8143 0605 6102     		.2byte	0x261
 8144 0607 EF030000 		.4byte	0x3ef
 8145 060b 00000000 		.4byte	.LFB4
 8146 060f 8C000000 		.4byte	.LFE4-.LFB4
 8147 0613 01       		.uleb128 0x1
 8148 0614 9C       		.byte	0x9c
 8149 0615 54060000 		.4byte	0x654
 8150 0619 11       		.uleb128 0x11
 8151 061a 646A00   		.ascii	"dj\000"
 8152 061d 01       		.byte	0x1
 8153 061e 6202     		.2byte	0x262
 8154 0620 54060000 		.4byte	0x654
 8155 0624 93020000 		.4byte	.LLST16
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 214


 8156 0628 17       		.uleb128 0x17
 8157 0629 61636300 		.ascii	"acc\000"
 8158 062d 01       		.byte	0x1
 8159 062e 6302     		.2byte	0x263
 8160 0630 7E000000 		.4byte	0x7e
 8161 0634 01       		.uleb128 0x1
 8162 0635 51       		.byte	0x51
 8163 0636 12       		.uleb128 0x12
 8164 0637 6900     		.ascii	"i\000"
 8165 0639 01       		.byte	0x1
 8166 063a 6602     		.2byte	0x266
 8167 063c AD000000 		.4byte	0xad
 8168 0640 31030000 		.4byte	.LLST17
 8169 0644 12       		.uleb128 0x12
 8170 0645 626500   		.ascii	"be\000"
 8171 0648 01       		.byte	0x1
 8172 0649 6602     		.2byte	0x266
 8173 064b AD000000 		.4byte	0xad
 8174 064f 5B030000 		.4byte	.LLST18
 8175 0653 00       		.byte	0
 8176 0654 0B       		.uleb128 0xb
 8177 0655 04       		.byte	0x4
 8178 0656 03030000 		.4byte	0x303
 8179 065a 16       		.uleb128 0x16
 8180 065b FA010000 		.4byte	.LASF88
 8181 065f 01       		.byte	0x1
 8182 0660 7B02     		.2byte	0x27b
 8183 0662 7E000000 		.4byte	0x7e
 8184 0666 00000000 		.4byte	.LFB5
 8185 066a 28000000 		.4byte	.LFE5-.LFB5
 8186 066e 01       		.uleb128 0x1
 8187 066f 9C       		.byte	0x9c
 8188 0670 83060000 		.4byte	0x683
 8189 0674 12       		.uleb128 0x12
 8190 0675 6900     		.ascii	"i\000"
 8191 0677 01       		.byte	0x1
 8192 0678 7D02     		.2byte	0x27d
 8193 067a AD000000 		.4byte	0xad
 8194 067e 7A030000 		.4byte	.LLST19
 8195 0682 00       		.byte	0
 8196 0683 16       		.uleb128 0x16
 8197 0684 23010000 		.4byte	.LASF89
 8198 0688 01       		.byte	0x1
 8199 0689 8502     		.2byte	0x285
 8200 068b AD000000 		.4byte	0xad
 8201 068f 00000000 		.4byte	.LFB6
 8202 0693 C8000000 		.4byte	.LFE6-.LFB6
 8203 0697 01       		.uleb128 0x1
 8204 0698 9C       		.byte	0x9c
 8205 0699 CB060000 		.4byte	0x6cb
 8206 069d 11       		.uleb128 0x11
 8207 069e 646A00   		.ascii	"dj\000"
 8208 06a1 01       		.byte	0x1
 8209 06a2 8602     		.2byte	0x286
 8210 06a4 54060000 		.4byte	0x654
 8211 06a8 A6030000 		.4byte	.LLST20
 8212 06ac 11       		.uleb128 0x11
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 215


 8213 06ad 61636300 		.ascii	"acc\000"
 8214 06b1 01       		.byte	0x1
 8215 06b2 8702     		.2byte	0x287
 8216 06b4 7E000000 		.4byte	0x7e
 8217 06b8 E0030000 		.4byte	.LLST21
 8218 06bc 12       		.uleb128 0x12
 8219 06bd 6900     		.ascii	"i\000"
 8220 06bf 01       		.byte	0x1
 8221 06c0 8A02     		.2byte	0x28a
 8222 06c2 AD000000 		.4byte	0xad
 8223 06c6 33040000 		.4byte	.LLST22
 8224 06ca 00       		.byte	0
 8225 06cb 16       		.uleb128 0x16
 8226 06cc 6F060000 		.4byte	.LASF90
 8227 06d0 01       		.byte	0x1
 8228 06d1 A502     		.2byte	0x2a5
 8229 06d3 EF030000 		.4byte	0x3ef
 8230 06d7 00000000 		.4byte	.LFB7
 8231 06db 50000000 		.4byte	.LFE7-.LFB7
 8232 06df 01       		.uleb128 0x1
 8233 06e0 9C       		.byte	0x9c
 8234 06e1 10070000 		.4byte	0x710
 8235 06e5 11       		.uleb128 0x11
 8236 06e6 6900     		.ascii	"i\000"
 8237 06e8 01       		.byte	0x1
 8238 06e9 A602     		.2byte	0x2a6
 8239 06eb AD000000 		.4byte	0xad
 8240 06ef 5D040000 		.4byte	.LLST23
 8241 06f3 12       		.uleb128 0x12
 8242 06f4 6E00     		.ascii	"n\000"
 8243 06f6 01       		.byte	0x1
 8244 06f7 A902     		.2byte	0x2a9
 8245 06f9 C3000000 		.4byte	0xc3
 8246 06fd C1040000 		.4byte	.LLST24
 8247 0701 18       		.uleb128 0x18
 8248 0702 72657300 		.ascii	"res\000"
 8249 0706 01       		.byte	0x1
 8250 0707 AA02     		.2byte	0x2aa
 8251 0709 EF030000 		.4byte	0x3ef
 8252 070d 01       		.uleb128 0x1
 8253 070e 50       		.byte	0x50
 8254 070f 00       		.byte	0
 8255 0710 10       		.uleb128 0x10
 8256 0711 A0010000 		.4byte	.LASF91
 8257 0715 01       		.byte	0x1
 8258 0716 BC02     		.2byte	0x2bc
 8259 0718 00000000 		.4byte	.LFB8
 8260 071c 2C000000 		.4byte	.LFE8-.LFB8
 8261 0720 01       		.uleb128 0x1
 8262 0721 9C       		.byte	0x9c
 8263 0722 42070000 		.4byte	0x742
 8264 0726 17       		.uleb128 0x17
 8265 0727 667300   		.ascii	"fs\000"
 8266 072a 01       		.byte	0x1
 8267 072b BD02     		.2byte	0x2bd
 8268 072d 86020000 		.4byte	0x286
 8269 0731 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 216


 8270 0732 50       		.byte	0x50
 8271 0733 12       		.uleb128 0x12
 8272 0734 6900     		.ascii	"i\000"
 8273 0736 01       		.byte	0x1
 8274 0737 C002     		.2byte	0x2c0
 8275 0739 AD000000 		.4byte	0xad
 8276 073d 28050000 		.4byte	.LLST25
 8277 0741 00       		.byte	0
 8278 0742 16       		.uleb128 0x16
 8279 0743 73050000 		.4byte	.LASF92
 8280 0747 01       		.byte	0x1
 8281 0748 5706     		.2byte	0x657
 8282 074a EF030000 		.4byte	0x3ef
 8283 074e 00000000 		.4byte	.LFB22
 8284 0752 28010000 		.4byte	.LFE22-.LFB22
 8285 0756 01       		.uleb128 0x1
 8286 0757 9C       		.byte	0x9c
 8287 0758 36080000 		.4byte	0x836
 8288 075c 11       		.uleb128 0x11
 8289 075d 646A00   		.ascii	"dj\000"
 8290 0760 01       		.byte	0x1
 8291 0761 5806     		.2byte	0x658
 8292 0763 54060000 		.4byte	0x654
 8293 0767 47050000 		.4byte	.LLST26
 8294 076b 19       		.uleb128 0x19
 8295 076c 85000000 		.4byte	.LASF93
 8296 0770 01       		.byte	0x1
 8297 0771 5906     		.2byte	0x659
 8298 0773 36080000 		.4byte	0x836
 8299 0777 68050000 		.4byte	.LLST27
 8300 077b 1A       		.uleb128 0x1a
 8301 077c 42010000 		.4byte	.LASF94
 8302 0780 01       		.byte	0x1
 8303 0781 5D06     		.2byte	0x65d
 8304 0783 57080000 		.4byte	0x857
 8305 0787 05       		.uleb128 0x5
 8306 0788 03       		.byte	0x3
 8307 0789 00000000 		.4byte	excvt.4505
 8308 078d 12       		.uleb128 0x12
 8309 078e 6200     		.ascii	"b\000"
 8310 0790 01       		.byte	0x1
 8311 0791 DA06     		.2byte	0x6da
 8312 0793 B8000000 		.4byte	0xb8
 8313 0797 C0050000 		.4byte	.LLST28
 8314 079b 12       		.uleb128 0x12
 8315 079c 6300     		.ascii	"c\000"
 8316 079e 01       		.byte	0x1
 8317 079f DA06     		.2byte	0x6da
 8318 07a1 B8000000 		.4byte	0xb8
 8319 07a5 4D060000 		.4byte	.LLST29
 8320 07a9 1B       		.uleb128 0x1b
 8321 07aa 6400     		.ascii	"d\000"
 8322 07ac 01       		.byte	0x1
 8323 07ad DA06     		.2byte	0x6da
 8324 07af B8000000 		.4byte	0xb8
 8325 07b3 12       		.uleb128 0x12
 8326 07b4 73666E00 		.ascii	"sfn\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 217


 8327 07b8 01       		.byte	0x1
 8328 07b9 DA06     		.2byte	0x6da
 8329 07bb 8C020000 		.4byte	0x28c
 8330 07bf 13070000 		.4byte	.LLST30
 8331 07c3 12       		.uleb128 0x12
 8332 07c4 6E6900   		.ascii	"ni\000"
 8333 07c7 01       		.byte	0x1
 8334 07c8 DB06     		.2byte	0x6db
 8335 07ca AD000000 		.4byte	0xad
 8336 07ce 52070000 		.4byte	.LLST31
 8337 07d2 12       		.uleb128 0x12
 8338 07d3 736900   		.ascii	"si\000"
 8339 07d6 01       		.byte	0x1
 8340 07d7 DB06     		.2byte	0x6db
 8341 07d9 AD000000 		.4byte	0xad
 8342 07dd 88070000 		.4byte	.LLST32
 8343 07e1 12       		.uleb128 0x12
 8344 07e2 6900     		.ascii	"i\000"
 8345 07e4 01       		.byte	0x1
 8346 07e5 DB06     		.2byte	0x6db
 8347 07e7 AD000000 		.4byte	0xad
 8348 07eb F4070000 		.4byte	.LLST33
 8349 07ef 12       		.uleb128 0x12
 8350 07f0 7000     		.ascii	"p\000"
 8351 07f2 01       		.byte	0x1
 8352 07f3 DC06     		.2byte	0x6dc
 8353 07f5 F4050000 		.4byte	0x5f4
 8354 07f9 42080000 		.4byte	.LLST34
 8355 07fd 1C       		.uleb128 0x1c
 8356 07fe 2C000000 		.4byte	.LVL86
 8357 0802 F1040000 		.4byte	0x4f1
 8358 0806 1C080000 		.4byte	0x81c
 8359 080a 1D       		.uleb128 0x1d
 8360 080b 01       		.uleb128 0x1
 8361 080c 52       		.byte	0x52
 8362 080d 01       		.uleb128 0x1
 8363 080e 3B       		.byte	0x3b
 8364 080f 1D       		.uleb128 0x1d
 8365 0810 01       		.uleb128 0x1
 8366 0811 51       		.byte	0x51
 8367 0812 02       		.uleb128 0x2
 8368 0813 08       		.byte	0x8
 8369 0814 20       		.byte	0x20
 8370 0815 1D       		.uleb128 0x1d
 8371 0816 01       		.uleb128 0x1
 8372 0817 50       		.byte	0x50
 8373 0818 02       		.uleb128 0x2
 8374 0819 78       		.byte	0x78
 8375 081a 00       		.sleb128 0
 8376 081b 00       		.byte	0
 8377 081c 1E       		.uleb128 0x1e
 8378 081d 84000000 		.4byte	.LVL99
 8379 0821 BB050000 		.4byte	0x5bb
 8380 0825 1D       		.uleb128 0x1d
 8381 0826 01       		.uleb128 0x1
 8382 0827 51       		.byte	0x51
 8383 0828 02       		.uleb128 0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 218


 8384 0829 75       		.byte	0x75
 8385 082a 00       		.sleb128 0
 8386 082b 1D       		.uleb128 0x1d
 8387 082c 01       		.uleb128 0x1
 8388 082d 50       		.byte	0x50
 8389 082e 05       		.uleb128 0x5
 8390 082f 03       		.byte	0x3
 8391 0830 00000000 		.4byte	.LC6
 8392 0834 00       		.byte	0
 8393 0835 00       		.byte	0
 8394 0836 0B       		.uleb128 0xb
 8395 0837 04       		.byte	0x4
 8396 0838 3C080000 		.4byte	0x83c
 8397 083c 0B       		.uleb128 0xb
 8398 083d 04       		.byte	0x4
 8399 083e 42080000 		.4byte	0x842
 8400 0842 15       		.uleb128 0x15
 8401 0843 D9000000 		.4byte	0xd9
 8402 0847 08       		.uleb128 0x8
 8403 0848 B8000000 		.4byte	0xb8
 8404 084c 57080000 		.4byte	0x857
 8405 0850 0D       		.uleb128 0xd
 8406 0851 DD010000 		.4byte	0x1dd
 8407 0855 7F       		.byte	0x7f
 8408 0856 00       		.byte	0
 8409 0857 15       		.uleb128 0x15
 8410 0858 47080000 		.4byte	0x847
 8411 085c 10       		.uleb128 0x10
 8412 085d DF030000 		.4byte	.LASF95
 8413 0861 01       		.byte	0x1
 8414 0862 2D07     		.2byte	0x72d
 8415 0864 00000000 		.4byte	.LFB23
 8416 0868 7E000000 		.4byte	.LFE23-.LFB23
 8417 086c 01       		.uleb128 0x1
 8418 086d 9C       		.byte	0x9c
 8419 086e D9080000 		.4byte	0x8d9
 8420 0872 11       		.uleb128 0x11
 8421 0873 646A00   		.ascii	"dj\000"
 8422 0876 01       		.byte	0x1
 8423 0877 2E07     		.2byte	0x72e
 8424 0879 54060000 		.4byte	0x654
 8425 087d 60080000 		.4byte	.LLST35
 8426 0881 17       		.uleb128 0x17
 8427 0882 666E6F00 		.ascii	"fno\000"
 8428 0886 01       		.byte	0x1
 8429 0887 2F07     		.2byte	0x72f
 8430 0889 D9080000 		.4byte	0x8d9
 8431 088d 01       		.uleb128 0x1
 8432 088e 51       		.byte	0x51
 8433 088f 12       		.uleb128 0x12
 8434 0890 6900     		.ascii	"i\000"
 8435 0892 01       		.byte	0x1
 8436 0893 3207     		.2byte	0x732
 8437 0895 AD000000 		.4byte	0xad
 8438 0899 81080000 		.4byte	.LLST36
 8439 089d 12       		.uleb128 0x12
 8440 089e 6E7400   		.ascii	"nt\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 219


 8441 08a1 01       		.byte	0x1
 8442 08a2 3307     		.2byte	0x733
 8443 08a4 B8000000 		.4byte	0xb8
 8444 08a8 B7080000 		.4byte	.LLST37
 8445 08ac 12       		.uleb128 0x12
 8446 08ad 64697200 		.ascii	"dir\000"
 8447 08b1 01       		.byte	0x1
 8448 08b2 3307     		.2byte	0x733
 8449 08b4 8C020000 		.4byte	0x28c
 8450 08b8 CB080000 		.4byte	.LLST38
 8451 08bc 12       		.uleb128 0x12
 8452 08bd 7000     		.ascii	"p\000"
 8453 08bf 01       		.byte	0x1
 8454 08c0 3407     		.2byte	0x734
 8455 08c2 DF080000 		.4byte	0x8df
 8456 08c6 DE080000 		.4byte	.LLST39
 8457 08ca 12       		.uleb128 0x12
 8458 08cb 6300     		.ascii	"c\000"
 8459 08cd 01       		.byte	0x1
 8460 08ce 3407     		.2byte	0x734
 8461 08d0 D9000000 		.4byte	0xd9
 8462 08d4 39090000 		.4byte	.LLST40
 8463 08d8 00       		.byte	0
 8464 08d9 0B       		.uleb128 0xb
 8465 08da 04       		.byte	0x4
 8466 08db 63030000 		.4byte	0x363
 8467 08df 0B       		.uleb128 0xb
 8468 08e0 04       		.byte	0x4
 8469 08e1 D9000000 		.4byte	0xd9
 8470 08e5 16       		.uleb128 0x16
 8471 08e6 E6050000 		.4byte	.LASF96
 8472 08ea 01       		.byte	0x1
 8473 08eb CF02     		.2byte	0x2cf
 8474 08ed EF030000 		.4byte	0x3ef
 8475 08f1 00000000 		.4byte	.LFB9
 8476 08f5 82000000 		.4byte	.LFE9-.LFB9
 8477 08f9 01       		.uleb128 0x1
 8478 08fa 9C       		.byte	0x9c
 8479 08fb A1090000 		.4byte	0x9a1
 8480 08ff 11       		.uleb128 0x11
 8481 0900 667300   		.ascii	"fs\000"
 8482 0903 01       		.byte	0x1
 8483 0904 D002     		.2byte	0x2d0
 8484 0906 86020000 		.4byte	0x286
 8485 090a 75090000 		.4byte	.LLST41
 8486 090e 19       		.uleb128 0x19
 8487 090f 54030000 		.4byte	.LASF97
 8488 0913 01       		.byte	0x1
 8489 0914 D102     		.2byte	0x2d1
 8490 0916 CE000000 		.4byte	0xce
 8491 091a B7090000 		.4byte	.LLST42
 8492 091e 1F       		.uleb128 0x1f
 8493 091f 22060000 		.4byte	.LASF98
 8494 0923 01       		.byte	0x1
 8495 0924 D402     		.2byte	0x2d4
 8496 0926 CE000000 		.4byte	0xce
 8497 092a F9090000 		.4byte	.LLST43
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 220


 8498 092e 20       		.uleb128 0x20
 8499 092f 38000000 		.4byte	.LBB2
 8500 0933 1C000000 		.4byte	.LBE2-.LBB2
 8501 0937 66090000 		.4byte	0x966
 8502 093b 12       		.uleb128 0x12
 8503 093c 6E6600   		.ascii	"nf\000"
 8504 093f 01       		.byte	0x1
 8505 0940 DF02     		.2byte	0x2df
 8506 0942 B8000000 		.4byte	0xb8
 8507 0946 0C0A0000 		.4byte	.LLST44
 8508 094a 1E       		.uleb128 0x1e
 8509 094b 4C000000 		.4byte	.LVL155
 8510 094f 00250000 		.4byte	0x2500
 8511 0953 1D       		.uleb128 0x1d
 8512 0954 01       		.uleb128 0x1
 8513 0955 53       		.byte	0x53
 8514 0956 01       		.uleb128 0x1
 8515 0957 31       		.byte	0x31
 8516 0958 1D       		.uleb128 0x1d
 8517 0959 01       		.uleb128 0x1
 8518 095a 52       		.byte	0x52
 8519 095b 02       		.uleb128 0x2
 8520 095c 75       		.byte	0x75
 8521 095d 00       		.sleb128 0
 8522 095e 1D       		.uleb128 0x1d
 8523 095f 01       		.uleb128 0x1
 8524 0960 51       		.byte	0x51
 8525 0961 02       		.uleb128 0x2
 8526 0962 78       		.byte	0x78
 8527 0963 00       		.sleb128 0
 8528 0964 00       		.byte	0
 8529 0965 00       		.byte	0
 8530 0966 1C       		.uleb128 0x1c
 8531 0967 26000000 		.4byte	.LVL151
 8532 096b 00250000 		.4byte	0x2500
 8533 096f 85090000 		.4byte	0x985
 8534 0973 1D       		.uleb128 0x1d
 8535 0974 01       		.uleb128 0x1
 8536 0975 53       		.byte	0x53
 8537 0976 01       		.uleb128 0x1
 8538 0977 31       		.byte	0x31
 8539 0978 1D       		.uleb128 0x1d
 8540 0979 01       		.uleb128 0x1
 8541 097a 52       		.byte	0x52
 8542 097b 02       		.uleb128 0x2
 8543 097c 75       		.byte	0x75
 8544 097d 00       		.sleb128 0
 8545 097e 1D       		.uleb128 0x1d
 8546 097f 01       		.uleb128 0x1
 8547 0980 51       		.byte	0x51
 8548 0981 02       		.uleb128 0x2
 8549 0982 78       		.byte	0x78
 8550 0983 00       		.sleb128 0
 8551 0984 00       		.byte	0
 8552 0985 1E       		.uleb128 0x1e
 8553 0986 66000000 		.4byte	.LVL159
 8554 098a 24250000 		.4byte	0x2524
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 221


 8555 098e 1D       		.uleb128 0x1d
 8556 098f 01       		.uleb128 0x1
 8557 0990 53       		.byte	0x53
 8558 0991 01       		.uleb128 0x1
 8559 0992 31       		.byte	0x31
 8560 0993 1D       		.uleb128 0x1d
 8561 0994 01       		.uleb128 0x1
 8562 0995 52       		.byte	0x52
 8563 0996 02       		.uleb128 0x2
 8564 0997 76       		.byte	0x76
 8565 0998 00       		.sleb128 0
 8566 0999 1D       		.uleb128 0x1d
 8567 099a 01       		.uleb128 0x1
 8568 099b 51       		.byte	0x51
 8569 099c 02       		.uleb128 0x2
 8570 099d 74       		.byte	0x74
 8571 099e 30       		.sleb128 48
 8572 099f 00       		.byte	0
 8573 09a0 00       		.byte	0
 8574 09a1 16       		.uleb128 0x16
 8575 09a2 7B040000 		.4byte	.LASF99
 8576 09a6 01       		.byte	0x1
 8577 09a7 BE07     		.2byte	0x7be
 8578 09a9 B8000000 		.4byte	0xb8
 8579 09ad 00000000 		.4byte	.LFB25
 8580 09b1 98000000 		.4byte	.LFE25-.LFB25
 8581 09b5 01       		.uleb128 0x1
 8582 09b6 9C       		.byte	0x9c
 8583 09b7 F7090000 		.4byte	0x9f7
 8584 09bb 11       		.uleb128 0x11
 8585 09bc 667300   		.ascii	"fs\000"
 8586 09bf 01       		.byte	0x1
 8587 09c0 BF07     		.2byte	0x7bf
 8588 09c2 86020000 		.4byte	0x286
 8589 09c6 430A0000 		.4byte	.LLST45
 8590 09ca 19       		.uleb128 0x19
 8591 09cb 3D010000 		.4byte	.LASF48
 8592 09cf 01       		.byte	0x1
 8593 09d0 C007     		.2byte	0x7c0
 8594 09d2 CE000000 		.4byte	0xce
 8595 09d6 6F0A0000 		.4byte	.LLST46
 8596 09da 1E       		.uleb128 0x1e
 8597 09db 12000000 		.4byte	.LVL169
 8598 09df 24250000 		.4byte	0x2524
 8599 09e3 1D       		.uleb128 0x1d
 8600 09e4 01       		.uleb128 0x1
 8601 09e5 53       		.byte	0x53
 8602 09e6 01       		.uleb128 0x1
 8603 09e7 31       		.byte	0x31
 8604 09e8 1D       		.uleb128 0x1d
 8605 09e9 01       		.uleb128 0x1
 8606 09ea 52       		.byte	0x52
 8607 09eb 03       		.uleb128 0x3
 8608 09ec F3       		.byte	0xf3
 8609 09ed 01       		.uleb128 0x1
 8610 09ee 51       		.byte	0x51
 8611 09ef 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 222


 8612 09f0 01       		.uleb128 0x1
 8613 09f1 51       		.byte	0x51
 8614 09f2 02       		.uleb128 0x2
 8615 09f3 74       		.byte	0x74
 8616 09f4 30       		.sleb128 48
 8617 09f5 00       		.byte	0
 8618 09f6 00       		.byte	0
 8619 09f7 16       		.uleb128 0x16
 8620 09f8 E5040000 		.4byte	.LASF100
 8621 09fc 01       		.byte	0x1
 8622 09fd 7C08     		.2byte	0x87c
 8623 09ff EF030000 		.4byte	0x3ef
 8624 0a03 00000000 		.4byte	.LFB27
 8625 0a07 30000000 		.4byte	.LFE27-.LFB27
 8626 0a0b 01       		.uleb128 0x1
 8627 0a0c 9C       		.byte	0x9c
 8628 0a0d 390A0000 		.4byte	0xa39
 8629 0a11 11       		.uleb128 0x11
 8630 0a12 667300   		.ascii	"fs\000"
 8631 0a15 01       		.byte	0x1
 8632 0a16 7D08     		.2byte	0x87d
 8633 0a18 86020000 		.4byte	0x286
 8634 0a1c 9B0A0000 		.4byte	.LLST47
 8635 0a20 11       		.uleb128 0x11
 8636 0a21 696400   		.ascii	"id\000"
 8637 0a24 01       		.byte	0x1
 8638 0a25 7E08     		.2byte	0x87e
 8639 0a27 C3000000 		.4byte	0xc3
 8640 0a2b 070B0000 		.4byte	.LLST48
 8641 0a2f 21       		.uleb128 0x21
 8642 0a30 18000000 		.4byte	.LVL173
 8643 0a34 48250000 		.4byte	0x2548
 8644 0a38 00       		.byte	0
 8645 0a39 22       		.uleb128 0x22
 8646 0a3a EC030000 		.4byte	.LASF101
 8647 0a3e 01       		.byte	0x1
 8648 0a3f D807     		.2byte	0x7d8
 8649 0a41 EF030000 		.4byte	0x3ef
 8650 0a45 00000000 		.4byte	.LFB26
 8651 0a49 B4030000 		.4byte	.LFE26-.LFB26
 8652 0a4d 01       		.uleb128 0x1
 8653 0a4e 9C       		.byte	0x9c
 8654 0a4f E70B0000 		.4byte	0xbe7
 8655 0a53 19       		.uleb128 0x19
 8656 0a54 85000000 		.4byte	.LASF93
 8657 0a58 01       		.byte	0x1
 8658 0a59 D907     		.2byte	0x7d9
 8659 0a5b 36080000 		.4byte	0x836
 8660 0a5f 410B0000 		.4byte	.LLST49
 8661 0a63 11       		.uleb128 0x11
 8662 0a64 72667300 		.ascii	"rfs\000"
 8663 0a68 01       		.byte	0x1
 8664 0a69 DA07     		.2byte	0x7da
 8665 0a6b E70B0000 		.4byte	0xbe7
 8666 0a6f 940B0000 		.4byte	.LLST50
 8667 0a73 19       		.uleb128 0x19
 8668 0a74 AB050000 		.4byte	.LASF102
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 223


 8669 0a78 01       		.byte	0x1
 8670 0a79 DB07     		.2byte	0x7db
 8671 0a7b B8000000 		.4byte	0xb8
 8672 0a7f CE0B0000 		.4byte	.LLST51
 8673 0a83 12       		.uleb128 0x12
 8674 0a84 666D7400 		.ascii	"fmt\000"
 8675 0a88 01       		.byte	0x1
 8676 0a89 DE07     		.2byte	0x7de
 8677 0a8b B8000000 		.4byte	0xb8
 8678 0a8f 080C0000 		.4byte	.LLST52
 8679 0a93 12       		.uleb128 0x12
 8680 0a94 6200     		.ascii	"b\000"
 8681 0a96 01       		.byte	0x1
 8682 0a97 DE07     		.2byte	0x7de
 8683 0a99 B8000000 		.4byte	0xb8
 8684 0a9d 950C0000 		.4byte	.LLST53
 8685 0aa1 12       		.uleb128 0x12
 8686 0aa2 706900   		.ascii	"pi\000"
 8687 0aa5 01       		.byte	0x1
 8688 0aa6 DE07     		.2byte	0x7de
 8689 0aa8 B8000000 		.4byte	0xb8
 8690 0aac F20C0000 		.4byte	.LLST54
 8691 0ab0 12       		.uleb128 0x12
 8692 0ab1 74626C00 		.ascii	"tbl\000"
 8693 0ab5 01       		.byte	0x1
 8694 0ab6 DE07     		.2byte	0x7de
 8695 0ab8 8C020000 		.4byte	0x28c
 8696 0abc 120D0000 		.4byte	.LLST55
 8697 0ac0 12       		.uleb128 0x12
 8698 0ac1 766F6C00 		.ascii	"vol\000"
 8699 0ac5 01       		.byte	0x1
 8700 0ac6 DF07     		.2byte	0x7df
 8701 0ac8 AD000000 		.4byte	0xad
 8702 0acc 360D0000 		.4byte	.LLST56
 8703 0ad0 1F       		.uleb128 0x1f
 8704 0ad1 58060000 		.4byte	.LASF103
 8705 0ad5 01       		.byte	0x1
 8706 0ad6 E007     		.2byte	0x7e0
 8707 0ad8 FA030000 		.4byte	0x3fa
 8708 0adc 8A0D0000 		.4byte	.LLST57
 8709 0ae0 1F       		.uleb128 0x1f
 8710 0ae1 EE020000 		.4byte	.LASF104
 8711 0ae5 01       		.byte	0x1
 8712 0ae6 E107     		.2byte	0x7e1
 8713 0ae8 CE000000 		.4byte	0xce
 8714 0aec D40D0000 		.4byte	.LLST58
 8715 0af0 1F       		.uleb128 0x1f
 8716 0af1 5A010000 		.4byte	.LASF105
 8717 0af5 01       		.byte	0x1
 8718 0af6 E107     		.2byte	0x7e1
 8719 0af8 CE000000 		.4byte	0xce
 8720 0afc 150E0000 		.4byte	.LLST59
 8721 0b00 1F       		.uleb128 0x1f
 8722 0b01 B0060000 		.4byte	.LASF106
 8723 0b05 01       		.byte	0x1
 8724 0b06 E107     		.2byte	0x7e1
 8725 0b08 CE000000 		.4byte	0xce
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 224


 8726 0b0c 7D0E0000 		.4byte	.LLST60
 8727 0b10 1F       		.uleb128 0x1f
 8728 0b11 F4020000 		.4byte	.LASF107
 8729 0b15 01       		.byte	0x1
 8730 0b16 E107     		.2byte	0x7e1
 8731 0b18 CE000000 		.4byte	0xce
 8732 0b1c CF0E0000 		.4byte	.LLST61
 8733 0b20 1F       		.uleb128 0x1f
 8734 0b21 F8030000 		.4byte	.LASF108
 8735 0b25 01       		.byte	0x1
 8736 0b26 E107     		.2byte	0x7e1
 8737 0b28 CE000000 		.4byte	0xce
 8738 0b2c 030F0000 		.4byte	.LLST62
 8739 0b30 1F       		.uleb128 0x1f
 8740 0b31 5B030000 		.4byte	.LASF109
 8741 0b35 01       		.byte	0x1
 8742 0b36 E107     		.2byte	0x7e1
 8743 0b38 CE000000 		.4byte	0xce
 8744 0b3c 6C0F0000 		.4byte	.LLST63
 8745 0b40 1F       		.uleb128 0x1f
 8746 0b41 C6050000 		.4byte	.LASF110
 8747 0b45 01       		.byte	0x1
 8748 0b46 E207     		.2byte	0x7e2
 8749 0b48 C3000000 		.4byte	0xc3
 8750 0b4c 980F0000 		.4byte	.LLST64
 8751 0b50 12       		.uleb128 0x12
 8752 0b51 7000     		.ascii	"p\000"
 8753 0b53 01       		.byte	0x1
 8754 0b54 E307     		.2byte	0x7e3
 8755 0b56 3C080000 		.4byte	0x83c
 8756 0b5a 0E100000 		.4byte	.LLST65
 8757 0b5e 12       		.uleb128 0x12
 8758 0b5f 667300   		.ascii	"fs\000"
 8759 0b62 01       		.byte	0x1
 8760 0b63 E407     		.2byte	0x7e4
 8761 0b65 86020000 		.4byte	0x286
 8762 0b69 38100000 		.4byte	.LLST66
 8763 0b6d 21       		.uleb128 0x21
 8764 0b6e 4C000000 		.4byte	.LVL194
 8765 0b72 48250000 		.4byte	0x2548
 8766 0b76 1C       		.uleb128 0x1c
 8767 0b77 6C000000 		.4byte	.LVL196
 8768 0b7b 5D250000 		.4byte	0x255d
 8769 0b7f 8A0B0000 		.4byte	0xb8a
 8770 0b83 1D       		.uleb128 0x1d
 8771 0b84 01       		.uleb128 0x1
 8772 0b85 50       		.byte	0x50
 8773 0b86 02       		.uleb128 0x2
 8774 0b87 74       		.byte	0x74
 8775 0b88 00       		.sleb128 0
 8776 0b89 00       		.byte	0
 8777 0b8a 1C       		.uleb128 0x1c
 8778 0b8b 84000000 		.4byte	.LVL199
 8779 0b8f A1090000 		.4byte	0x9a1
 8780 0b93 A30B0000 		.4byte	0xba3
 8781 0b97 1D       		.uleb128 0x1d
 8782 0b98 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 225


 8783 0b99 51       		.byte	0x51
 8784 0b9a 01       		.uleb128 0x1
 8785 0b9b 30       		.byte	0x30
 8786 0b9c 1D       		.uleb128 0x1d
 8787 0b9d 01       		.uleb128 0x1
 8788 0b9e 50       		.byte	0x50
 8789 0b9f 02       		.uleb128 0x2
 8790 0ba0 75       		.byte	0x75
 8791 0ba1 00       		.sleb128 0
 8792 0ba2 00       		.byte	0
 8793 0ba3 1C       		.uleb128 0x1c
 8794 0ba4 BE000000 		.4byte	.LVL204
 8795 0ba8 A1090000 		.4byte	0x9a1
 8796 0bac BD0B0000 		.4byte	0xbbd
 8797 0bb0 1D       		.uleb128 0x1d
 8798 0bb1 01       		.uleb128 0x1
 8799 0bb2 51       		.byte	0x51
 8800 0bb3 02       		.uleb128 0x2
 8801 0bb4 74       		.byte	0x74
 8802 0bb5 00       		.sleb128 0
 8803 0bb6 1D       		.uleb128 0x1d
 8804 0bb7 01       		.uleb128 0x1
 8805 0bb8 50       		.byte	0x50
 8806 0bb9 02       		.uleb128 0x2
 8807 0bba 75       		.byte	0x75
 8808 0bbb 00       		.sleb128 0
 8809 0bbc 00       		.byte	0
 8810 0bbd 1C       		.uleb128 0x1c
 8811 0bbe 58020000 		.4byte	.LVL240
 8812 0bc2 24250000 		.4byte	0x2524
 8813 0bc6 D60B0000 		.4byte	0xbd6
 8814 0bca 1D       		.uleb128 0x1d
 8815 0bcb 01       		.uleb128 0x1
 8816 0bcc 53       		.byte	0x53
 8817 0bcd 01       		.uleb128 0x1
 8818 0bce 31       		.byte	0x31
 8819 0bcf 1D       		.uleb128 0x1d
 8820 0bd0 01       		.uleb128 0x1
 8821 0bd1 51       		.byte	0x51
 8822 0bd2 02       		.uleb128 0x2
 8823 0bd3 75       		.byte	0x75
 8824 0bd4 30       		.sleb128 48
 8825 0bd5 00       		.byte	0
 8826 0bd6 1E       		.uleb128 0x1e
 8827 0bd7 10030000 		.4byte	.LVL242
 8828 0bdb 10070000 		.4byte	0x710
 8829 0bdf 1D       		.uleb128 0x1d
 8830 0be0 01       		.uleb128 0x1
 8831 0be1 50       		.byte	0x50
 8832 0be2 02       		.uleb128 0x2
 8833 0be3 75       		.byte	0x75
 8834 0be4 00       		.sleb128 0
 8835 0be5 00       		.byte	0
 8836 0be6 00       		.byte	0
 8837 0be7 0B       		.uleb128 0xb
 8838 0be8 04       		.byte	0x4
 8839 0be9 86020000 		.4byte	0x286
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 226


 8840 0bed 16       		.uleb128 0x16
 8841 0bee 48060000 		.4byte	.LASF111
 8842 0bf2 01       		.byte	0x1
 8843 0bf3 F902     		.2byte	0x2f9
 8844 0bf5 EF030000 		.4byte	0x3ef
 8845 0bf9 00000000 		.4byte	.LFB10
 8846 0bfd E8000000 		.4byte	.LFE10-.LFB10
 8847 0c01 01       		.uleb128 0x1
 8848 0c02 9C       		.byte	0x9c
 8849 0c03 8E0C0000 		.4byte	0xc8e
 8850 0c07 11       		.uleb128 0x11
 8851 0c08 667300   		.ascii	"fs\000"
 8852 0c0b 01       		.byte	0x1
 8853 0c0c FA02     		.2byte	0x2fa
 8854 0c0e 86020000 		.4byte	0x286
 8855 0c12 56100000 		.4byte	.LLST67
 8856 0c16 12       		.uleb128 0x12
 8857 0c17 72657300 		.ascii	"res\000"
 8858 0c1b 01       		.byte	0x1
 8859 0c1c FD02     		.2byte	0x2fd
 8860 0c1e EF030000 		.4byte	0x3ef
 8861 0c22 82100000 		.4byte	.LLST68
 8862 0c26 1C       		.uleb128 0x1c
 8863 0c27 0A000000 		.4byte	.LVL282
 8864 0c2b E5080000 		.4byte	0x8e5
 8865 0c2f 3F0C0000 		.4byte	0xc3f
 8866 0c33 1D       		.uleb128 0x1d
 8867 0c34 01       		.uleb128 0x1
 8868 0c35 51       		.byte	0x51
 8869 0c36 01       		.uleb128 0x1
 8870 0c37 30       		.byte	0x30
 8871 0c38 1D       		.uleb128 0x1d
 8872 0c39 01       		.uleb128 0x1
 8873 0c3a 50       		.byte	0x50
 8874 0c3b 02       		.uleb128 0x2
 8875 0c3c 74       		.byte	0x74
 8876 0c3d 00       		.sleb128 0
 8877 0c3e 00       		.byte	0
 8878 0c3f 1C       		.uleb128 0x1c
 8879 0c40 2E000000 		.4byte	.LVL285
 8880 0c44 F1040000 		.4byte	0x4f1
 8881 0c48 600C0000 		.4byte	0xc60
 8882 0c4c 1D       		.uleb128 0x1d
 8883 0c4d 01       		.uleb128 0x1
 8884 0c4e 52       		.byte	0x52
 8885 0c4f 03       		.uleb128 0x3
 8886 0c50 0A       		.byte	0xa
 8887 0c51 0002     		.2byte	0x200
 8888 0c53 1D       		.uleb128 0x1d
 8889 0c54 01       		.uleb128 0x1
 8890 0c55 51       		.byte	0x51
 8891 0c56 02       		.uleb128 0x2
 8892 0c57 76       		.byte	0x76
 8893 0c58 00       		.sleb128 0
 8894 0c59 1D       		.uleb128 0x1d
 8895 0c5a 01       		.uleb128 0x1
 8896 0c5b 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 227


 8897 0c5c 02       		.uleb128 0x2
 8898 0c5d 77       		.byte	0x77
 8899 0c5e 00       		.sleb128 0
 8900 0c5f 00       		.byte	0
 8901 0c60 1C       		.uleb128 0x1c
 8902 0c61 A4000000 		.4byte	.LVL286
 8903 0c65 00250000 		.4byte	0x2500
 8904 0c69 790C0000 		.4byte	0xc79
 8905 0c6d 1D       		.uleb128 0x1d
 8906 0c6e 01       		.uleb128 0x1
 8907 0c6f 53       		.byte	0x53
 8908 0c70 01       		.uleb128 0x1
 8909 0c71 31       		.byte	0x31
 8910 0c72 1D       		.uleb128 0x1d
 8911 0c73 01       		.uleb128 0x1
 8912 0c74 51       		.byte	0x51
 8913 0c75 02       		.uleb128 0x2
 8914 0c76 77       		.byte	0x77
 8915 0c77 00       		.sleb128 0
 8916 0c78 00       		.byte	0
 8917 0c79 1E       		.uleb128 0x1e
 8918 0c7a B0000000 		.4byte	.LVL287
 8919 0c7e 72250000 		.4byte	0x2572
 8920 0c82 1D       		.uleb128 0x1d
 8921 0c83 01       		.uleb128 0x1
 8922 0c84 52       		.byte	0x52
 8923 0c85 01       		.uleb128 0x1
 8924 0c86 30       		.byte	0x30
 8925 0c87 1D       		.uleb128 0x1d
 8926 0c88 01       		.uleb128 0x1
 8927 0c89 51       		.byte	0x51
 8928 0c8a 01       		.uleb128 0x1
 8929 0c8b 30       		.byte	0x30
 8930 0c8c 00       		.byte	0
 8931 0c8d 00       		.byte	0
 8932 0c8e 23       		.uleb128 0x23
 8933 0c8f BA030000 		.4byte	.LASF113
 8934 0c93 01       		.byte	0x1
 8935 0c94 2103     		.2byte	0x321
 8936 0c96 CE000000 		.4byte	0xce
 8937 0c9a 00000000 		.4byte	.LFB11
 8938 0c9e 18000000 		.4byte	.LFE11-.LFB11
 8939 0ca2 01       		.uleb128 0x1
 8940 0ca3 9C       		.byte	0x9c
 8941 0ca4 C80C0000 		.4byte	0xcc8
 8942 0ca8 11       		.uleb128 0x11
 8943 0ca9 667300   		.ascii	"fs\000"
 8944 0cac 01       		.byte	0x1
 8945 0cad 2203     		.2byte	0x322
 8946 0caf 86020000 		.4byte	0x286
 8947 0cb3 AB100000 		.4byte	.LLST69
 8948 0cb7 19       		.uleb128 0x19
 8949 0cb8 20030000 		.4byte	.LASF112
 8950 0cbc 01       		.byte	0x1
 8951 0cbd 2303     		.2byte	0x323
 8952 0cbf CE000000 		.4byte	0xce
 8953 0cc3 E5100000 		.4byte	.LLST70
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 228


 8954 0cc7 00       		.byte	0
 8955 0cc8 23       		.uleb128 0x23
 8956 0cc9 73040000 		.4byte	.LASF114
 8957 0ccd 01       		.byte	0x1
 8958 0cce 3303     		.2byte	0x333
 8959 0cd0 CE000000 		.4byte	0xce
 8960 0cd4 00000000 		.4byte	.LFB12
 8961 0cd8 F2000000 		.4byte	.LFE12-.LFB12
 8962 0cdc 01       		.uleb128 0x1
 8963 0cdd 9C       		.byte	0x9c
 8964 0cde 7A0D0000 		.4byte	0xd7a
 8965 0ce2 11       		.uleb128 0x11
 8966 0ce3 667300   		.ascii	"fs\000"
 8967 0ce6 01       		.byte	0x1
 8968 0ce7 3403     		.2byte	0x334
 8969 0ce9 86020000 		.4byte	0x286
 8970 0ced 2E110000 		.4byte	.LLST71
 8971 0cf1 19       		.uleb128 0x19
 8972 0cf2 20030000 		.4byte	.LASF112
 8973 0cf6 01       		.byte	0x1
 8974 0cf7 3503     		.2byte	0x335
 8975 0cf9 CE000000 		.4byte	0xce
 8976 0cfd D6110000 		.4byte	.LLST72
 8977 0d01 12       		.uleb128 0x12
 8978 0d02 776300   		.ascii	"wc\000"
 8979 0d05 01       		.byte	0x1
 8980 0d06 3803     		.2byte	0x338
 8981 0d08 AD000000 		.4byte	0xad
 8982 0d0c 60120000 		.4byte	.LLST73
 8983 0d10 12       		.uleb128 0x12
 8984 0d11 626300   		.ascii	"bc\000"
 8985 0d14 01       		.byte	0x1
 8986 0d15 3803     		.2byte	0x338
 8987 0d17 AD000000 		.4byte	0xad
 8988 0d1b 7E120000 		.4byte	.LLST74
 8989 0d1f 12       		.uleb128 0x12
 8990 0d20 7000     		.ascii	"p\000"
 8991 0d22 01       		.byte	0x1
 8992 0d23 3903     		.2byte	0x339
 8993 0d25 8C020000 		.4byte	0x28c
 8994 0d29 BB120000 		.4byte	.LLST75
 8995 0d2d 1C       		.uleb128 0x1c
 8996 0d2e 2C000000 		.4byte	.LVL301
 8997 0d32 E5080000 		.4byte	0x8e5
 8998 0d36 410D0000 		.4byte	0xd41
 8999 0d3a 1D       		.uleb128 0x1d
 9000 0d3b 01       		.uleb128 0x1
 9001 0d3c 50       		.byte	0x50
 9002 0d3d 02       		.uleb128 0x2
 9003 0d3e 75       		.byte	0x75
 9004 0d3f 00       		.sleb128 0
 9005 0d40 00       		.byte	0
 9006 0d41 1C       		.uleb128 0x1c
 9007 0d42 48000000 		.4byte	.LVL304
 9008 0d46 E5080000 		.4byte	0x8e5
 9009 0d4a 550D0000 		.4byte	0xd55
 9010 0d4e 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 229


 9011 0d4f 01       		.uleb128 0x1
 9012 0d50 50       		.byte	0x50
 9013 0d51 02       		.uleb128 0x2
 9014 0d52 75       		.byte	0x75
 9015 0d53 00       		.sleb128 0
 9016 0d54 00       		.byte	0
 9017 0d55 1C       		.uleb128 0x1c
 9018 0d56 72000000 		.4byte	.LVL310
 9019 0d5a E5080000 		.4byte	0x8e5
 9020 0d5e 690D0000 		.4byte	0xd69
 9021 0d62 1D       		.uleb128 0x1d
 9022 0d63 01       		.uleb128 0x1
 9023 0d64 50       		.byte	0x50
 9024 0d65 02       		.uleb128 0x2
 9025 0d66 75       		.byte	0x75
 9026 0d67 00       		.sleb128 0
 9027 0d68 00       		.byte	0
 9028 0d69 1E       		.uleb128 0x1e
 9029 0d6a 9C000000 		.4byte	.LVL316
 9030 0d6e E5080000 		.4byte	0x8e5
 9031 0d72 1D       		.uleb128 0x1d
 9032 0d73 01       		.uleb128 0x1
 9033 0d74 50       		.byte	0x50
 9034 0d75 02       		.uleb128 0x2
 9035 0d76 75       		.byte	0x75
 9036 0d77 00       		.sleb128 0
 9037 0d78 00       		.byte	0
 9038 0d79 00       		.byte	0
 9039 0d7a 16       		.uleb128 0x16
 9040 0d7b 9D060000 		.4byte	.LASF115
 9041 0d7f 01       		.byte	0x1
 9042 0d80 2904     		.2byte	0x429
 9043 0d82 EF030000 		.4byte	0x3ef
 9044 0d86 00000000 		.4byte	.LFB16
 9045 0d8a 96000000 		.4byte	.LFE16-.LFB16
 9046 0d8e 01       		.uleb128 0x1
 9047 0d8f 9C       		.byte	0x9c
 9048 0d90 E50D0000 		.4byte	0xde5
 9049 0d94 11       		.uleb128 0x11
 9050 0d95 646A00   		.ascii	"dj\000"
 9051 0d98 01       		.byte	0x1
 9052 0d99 2A04     		.2byte	0x42a
 9053 0d9b 54060000 		.4byte	0x654
 9054 0d9f 1D130000 		.4byte	.LLST76
 9055 0da3 11       		.uleb128 0x11
 9056 0da4 69647800 		.ascii	"idx\000"
 9057 0da8 01       		.byte	0x1
 9058 0da9 2B04     		.2byte	0x42b
 9059 0dab C3000000 		.4byte	0xc3
 9060 0daf 8B130000 		.4byte	.LLST77
 9061 0db3 1F       		.uleb128 0x1f
 9062 0db4 20030000 		.4byte	.LASF112
 9063 0db8 01       		.byte	0x1
 9064 0db9 2E04     		.2byte	0x42e
 9065 0dbb CE000000 		.4byte	0xce
 9066 0dbf 13140000 		.4byte	.LLST78
 9067 0dc3 12       		.uleb128 0x12
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 230


 9068 0dc4 696300   		.ascii	"ic\000"
 9069 0dc7 01       		.byte	0x1
 9070 0dc8 2F04     		.2byte	0x42f
 9071 0dca C3000000 		.4byte	0xc3
 9072 0dce 7E140000 		.4byte	.LLST79
 9073 0dd2 21       		.uleb128 0x21
 9074 0dd3 44000000 		.4byte	.LVL336
 9075 0dd7 C80C0000 		.4byte	0xcc8
 9076 0ddb 21       		.uleb128 0x21
 9077 0ddc 66000000 		.4byte	.LVL340
 9078 0de0 8E0C0000 		.4byte	0xc8e
 9079 0de4 00       		.byte	0
 9080 0de5 16       		.uleb128 0x16
 9081 0de6 DD010000 		.4byte	.LASF116
 9082 0dea 01       		.byte	0x1
 9083 0deb 2A06     		.2byte	0x62a
 9084 0ded EF030000 		.4byte	0x3ef
 9085 0df1 00000000 		.4byte	.LFB21
 9086 0df5 28000000 		.4byte	.LFE21-.LFB21
 9087 0df9 01       		.uleb128 0x1
 9088 0dfa 9C       		.byte	0x9c
 9089 0dfb 3C0E0000 		.4byte	0xe3c
 9090 0dff 11       		.uleb128 0x11
 9091 0e00 646A00   		.ascii	"dj\000"
 9092 0e03 01       		.byte	0x1
 9093 0e04 2B06     		.2byte	0x62b
 9094 0e06 54060000 		.4byte	0x654
 9095 0e0a 9C140000 		.4byte	.LLST80
 9096 0e0e 12       		.uleb128 0x12
 9097 0e0f 72657300 		.ascii	"res\000"
 9098 0e13 01       		.byte	0x1
 9099 0e14 2E06     		.2byte	0x62e
 9100 0e16 EF030000 		.4byte	0x3ef
 9101 0e1a C8140000 		.4byte	.LLST81
 9102 0e1e 1C       		.uleb128 0x1c
 9103 0e1f 0A000000 		.4byte	.LVL357
 9104 0e23 7A0D0000 		.4byte	0xd7a
 9105 0e27 320E0000 		.4byte	0xe32
 9106 0e2b 1D       		.uleb128 0x1d
 9107 0e2c 01       		.uleb128 0x1
 9108 0e2d 50       		.byte	0x50
 9109 0e2e 02       		.uleb128 0x2
 9110 0e2f 74       		.byte	0x74
 9111 0e30 00       		.sleb128 0
 9112 0e31 00       		.byte	0
 9113 0e32 21       		.uleb128 0x21
 9114 0e33 16000000 		.4byte	.LVL359
 9115 0e37 E5080000 		.4byte	0x8e5
 9116 0e3b 00       		.byte	0
 9117 0e3c 23       		.uleb128 0x23
 9118 0e3d 3A000000 		.4byte	.LASF117
 9119 0e41 01       		.byte	0x1
 9120 0e42 5E03     		.2byte	0x35e
 9121 0e44 EF030000 		.4byte	0x3ef
 9122 0e48 00000000 		.4byte	.LFB13
 9123 0e4c 08010000 		.4byte	.LFE13-.LFB13
 9124 0e50 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 231


 9125 0e51 9C       		.byte	0x9c
 9126 0e52 FF0E0000 		.4byte	0xeff
 9127 0e56 11       		.uleb128 0x11
 9128 0e57 667300   		.ascii	"fs\000"
 9129 0e5a 01       		.byte	0x1
 9130 0e5b 5F03     		.2byte	0x35f
 9131 0e5d 86020000 		.4byte	0x286
 9132 0e61 E6140000 		.4byte	.LLST82
 9133 0e65 19       		.uleb128 0x19
 9134 0e66 20030000 		.4byte	.LASF112
 9135 0e6a 01       		.byte	0x1
 9136 0e6b 6003     		.2byte	0x360
 9137 0e6d CE000000 		.4byte	0xce
 9138 0e71 80150000 		.4byte	.LLST83
 9139 0e75 11       		.uleb128 0x11
 9140 0e76 76616C00 		.ascii	"val\000"
 9141 0e7a 01       		.byte	0x1
 9142 0e7b 6103     		.2byte	0x361
 9143 0e7d CE000000 		.4byte	0xce
 9144 0e81 26160000 		.4byte	.LLST84
 9145 0e85 12       		.uleb128 0x12
 9146 0e86 626300   		.ascii	"bc\000"
 9147 0e89 01       		.byte	0x1
 9148 0e8a 6403     		.2byte	0x364
 9149 0e8c AD000000 		.4byte	0xad
 9150 0e90 D5160000 		.4byte	.LLST85
 9151 0e94 12       		.uleb128 0x12
 9152 0e95 7000     		.ascii	"p\000"
 9153 0e97 01       		.byte	0x1
 9154 0e98 6503     		.2byte	0x365
 9155 0e9a 8C020000 		.4byte	0x28c
 9156 0e9e 09170000 		.4byte	.LLST86
 9157 0ea2 12       		.uleb128 0x12
 9158 0ea3 72657300 		.ascii	"res\000"
 9159 0ea7 01       		.byte	0x1
 9160 0ea8 6603     		.2byte	0x366
 9161 0eaa EF030000 		.4byte	0x3ef
 9162 0eae D0170000 		.4byte	.LLST87
 9163 0eb2 1C       		.uleb128 0x1c
 9164 0eb3 2E000000 		.4byte	.LVL366
 9165 0eb7 E5080000 		.4byte	0x8e5
 9166 0ebb C60E0000 		.4byte	0xec6
 9167 0ebf 1D       		.uleb128 0x1d
 9168 0ec0 01       		.uleb128 0x1
 9169 0ec1 50       		.byte	0x50
 9170 0ec2 02       		.uleb128 0x2
 9171 0ec3 75       		.byte	0x75
 9172 0ec4 00       		.sleb128 0
 9173 0ec5 00       		.byte	0
 9174 0ec6 1C       		.uleb128 0x1c
 9175 0ec7 6C000000 		.4byte	.LVL376
 9176 0ecb E5080000 		.4byte	0x8e5
 9177 0ecf DA0E0000 		.4byte	0xeda
 9178 0ed3 1D       		.uleb128 0x1d
 9179 0ed4 01       		.uleb128 0x1
 9180 0ed5 50       		.byte	0x50
 9181 0ed6 02       		.uleb128 0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 232


 9182 0ed7 75       		.byte	0x75
 9183 0ed8 00       		.sleb128 0
 9184 0ed9 00       		.byte	0
 9185 0eda 1C       		.uleb128 0x1c
 9186 0edb A2000000 		.4byte	.LVL385
 9187 0edf E5080000 		.4byte	0x8e5
 9188 0ee3 EE0E0000 		.4byte	0xeee
 9189 0ee7 1D       		.uleb128 0x1d
 9190 0ee8 01       		.uleb128 0x1
 9191 0ee9 50       		.byte	0x50
 9192 0eea 02       		.uleb128 0x2
 9193 0eeb 75       		.byte	0x75
 9194 0eec 00       		.sleb128 0
 9195 0eed 00       		.byte	0
 9196 0eee 1E       		.uleb128 0x1e
 9197 0eef CA000000 		.4byte	.LVL391
 9198 0ef3 E5080000 		.4byte	0x8e5
 9199 0ef7 1D       		.uleb128 0x1d
 9200 0ef8 01       		.uleb128 0x1
 9201 0ef9 50       		.byte	0x50
 9202 0efa 02       		.uleb128 0x2
 9203 0efb 75       		.byte	0x75
 9204 0efc 00       		.sleb128 0
 9205 0efd 00       		.byte	0
 9206 0efe 00       		.byte	0
 9207 0eff 16       		.uleb128 0x16
 9208 0f00 23020000 		.4byte	.LASF118
 9209 0f04 01       		.byte	0x1
 9210 0f05 D203     		.2byte	0x3d2
 9211 0f07 CE000000 		.4byte	0xce
 9212 0f0b 00000000 		.4byte	.LFB15
 9213 0f0f BC000000 		.4byte	.LFE15-.LFB15
 9214 0f13 01       		.uleb128 0x1
 9215 0f14 9C       		.byte	0x9c
 9216 0f15 E50F0000 		.4byte	0xfe5
 9217 0f19 11       		.uleb128 0x11
 9218 0f1a 667300   		.ascii	"fs\000"
 9219 0f1d 01       		.byte	0x1
 9220 0f1e D303     		.2byte	0x3d3
 9221 0f20 86020000 		.4byte	0x286
 9222 0f24 25180000 		.4byte	.LLST88
 9223 0f28 19       		.uleb128 0x19
 9224 0f29 20030000 		.4byte	.LASF112
 9225 0f2d 01       		.byte	0x1
 9226 0f2e D403     		.2byte	0x3d4
 9227 0f30 CE000000 		.4byte	0xce
 9228 0f34 67180000 		.4byte	.LLST89
 9229 0f38 12       		.uleb128 0x12
 9230 0f39 637300   		.ascii	"cs\000"
 9231 0f3c 01       		.byte	0x1
 9232 0f3d D703     		.2byte	0x3d7
 9233 0f3f CE000000 		.4byte	0xce
 9234 0f43 BF180000 		.4byte	.LLST90
 9235 0f47 12       		.uleb128 0x12
 9236 0f48 6E636C00 		.ascii	"ncl\000"
 9237 0f4c 01       		.byte	0x1
 9238 0f4d D703     		.2byte	0x3d7
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 233


 9239 0f4f CE000000 		.4byte	0xce
 9240 0f53 F3180000 		.4byte	.LLST91
 9241 0f57 12       		.uleb128 0x12
 9242 0f58 73636C00 		.ascii	"scl\000"
 9243 0f5c 01       		.byte	0x1
 9244 0f5d D703     		.2byte	0x3d7
 9245 0f5f CE000000 		.4byte	0xce
 9246 0f63 4A190000 		.4byte	.LLST92
 9247 0f67 12       		.uleb128 0x12
 9248 0f68 72657300 		.ascii	"res\000"
 9249 0f6c 01       		.byte	0x1
 9250 0f6d D803     		.2byte	0x3d8
 9251 0f6f EF030000 		.4byte	0x3ef
 9252 0f73 8A190000 		.4byte	.LLST93
 9253 0f77 1C       		.uleb128 0x1c
 9254 0f78 22000000 		.4byte	.LVL408
 9255 0f7c C80C0000 		.4byte	0xcc8
 9256 0f80 8B0F0000 		.4byte	0xf8b
 9257 0f84 1D       		.uleb128 0x1d
 9258 0f85 01       		.uleb128 0x1
 9259 0f86 51       		.byte	0x51
 9260 0f87 02       		.uleb128 0x2
 9261 0f88 78       		.byte	0x78
 9262 0f89 00       		.sleb128 0
 9263 0f8a 00       		.byte	0
 9264 0f8b 1C       		.uleb128 0x1c
 9265 0f8c 50000000 		.4byte	.LVL417
 9266 0f90 C80C0000 		.4byte	0xcc8
 9267 0f94 A50F0000 		.4byte	0xfa5
 9268 0f98 1D       		.uleb128 0x1d
 9269 0f99 01       		.uleb128 0x1
 9270 0f9a 51       		.byte	0x51
 9271 0f9b 02       		.uleb128 0x2
 9272 0f9c 74       		.byte	0x74
 9273 0f9d 00       		.sleb128 0
 9274 0f9e 1D       		.uleb128 0x1d
 9275 0f9f 01       		.uleb128 0x1
 9276 0fa0 50       		.byte	0x50
 9277 0fa1 02       		.uleb128 0x2
 9278 0fa2 75       		.byte	0x75
 9279 0fa3 00       		.sleb128 0
 9280 0fa4 00       		.byte	0
 9281 0fa5 1C       		.uleb128 0x1c
 9282 0fa6 6C000000 		.4byte	.LVL419
 9283 0faa 3C0E0000 		.4byte	0xe3c
 9284 0fae C80F0000 		.4byte	0xfc8
 9285 0fb2 1D       		.uleb128 0x1d
 9286 0fb3 01       		.uleb128 0x1
 9287 0fb4 52       		.byte	0x52
 9288 0fb5 05       		.uleb128 0x5
 9289 0fb6 0C       		.byte	0xc
 9290 0fb7 FFFFFF0F 		.4byte	0xfffffff
 9291 0fbb 1D       		.uleb128 0x1d
 9292 0fbc 01       		.uleb128 0x1
 9293 0fbd 51       		.byte	0x51
 9294 0fbe 02       		.uleb128 0x2
 9295 0fbf 74       		.byte	0x74
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 234


 9296 0fc0 00       		.sleb128 0
 9297 0fc1 1D       		.uleb128 0x1d
 9298 0fc2 01       		.uleb128 0x1
 9299 0fc3 50       		.byte	0x50
 9300 0fc4 02       		.uleb128 0x2
 9301 0fc5 75       		.byte	0x75
 9302 0fc6 00       		.sleb128 0
 9303 0fc7 00       		.byte	0
 9304 0fc8 1E       		.uleb128 0x1e
 9305 0fc9 80000000 		.4byte	.LVL423
 9306 0fcd 3C0E0000 		.4byte	0xe3c
 9307 0fd1 1D       		.uleb128 0x1d
 9308 0fd2 01       		.uleb128 0x1
 9309 0fd3 52       		.byte	0x52
 9310 0fd4 02       		.uleb128 0x2
 9311 0fd5 74       		.byte	0x74
 9312 0fd6 00       		.sleb128 0
 9313 0fd7 1D       		.uleb128 0x1d
 9314 0fd8 01       		.uleb128 0x1
 9315 0fd9 51       		.byte	0x51
 9316 0fda 02       		.uleb128 0x2
 9317 0fdb 78       		.byte	0x78
 9318 0fdc 00       		.sleb128 0
 9319 0fdd 1D       		.uleb128 0x1d
 9320 0fde 01       		.uleb128 0x1
 9321 0fdf 50       		.byte	0x50
 9322 0fe0 02       		.uleb128 0x2
 9323 0fe1 75       		.byte	0x75
 9324 0fe2 00       		.sleb128 0
 9325 0fe3 00       		.byte	0
 9326 0fe4 00       		.byte	0
 9327 0fe5 16       		.uleb128 0x16
 9328 0fe6 62030000 		.4byte	.LASF119
 9329 0fea 01       		.byte	0x1
 9330 0feb 5904     		.2byte	0x459
 9331 0fed EF030000 		.4byte	0x3ef
 9332 0ff1 00000000 		.4byte	.LFB17
 9333 0ff5 22010000 		.4byte	.LFE17-.LFB17
 9334 0ff9 01       		.uleb128 0x1
 9335 0ffa 9C       		.byte	0x9c
 9336 0ffb CE100000 		.4byte	0x10ce
 9337 0fff 11       		.uleb128 0x11
 9338 1000 646A00   		.ascii	"dj\000"
 9339 1003 01       		.byte	0x1
 9340 1004 5A04     		.2byte	0x45a
 9341 1006 54060000 		.4byte	0x654
 9342 100a A8190000 		.4byte	.LLST94
 9343 100e 19       		.uleb128 0x19
 9344 100f A8020000 		.4byte	.LASF120
 9345 1013 01       		.byte	0x1
 9346 1014 5B04     		.2byte	0x45b
 9347 1016 7E000000 		.4byte	0x7e
 9348 101a 161A0000 		.4byte	.LLST95
 9349 101e 1F       		.uleb128 0x1f
 9350 101f 20030000 		.4byte	.LASF112
 9351 1023 01       		.byte	0x1
 9352 1024 5E04     		.2byte	0x45e
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 235


 9353 1026 CE000000 		.4byte	0xce
 9354 102a 661A0000 		.4byte	.LLST96
 9355 102e 12       		.uleb128 0x12
 9356 102f 6900     		.ascii	"i\000"
 9357 1031 01       		.byte	0x1
 9358 1032 5F04     		.2byte	0x45f
 9359 1034 C3000000 		.4byte	0xc3
 9360 1038 081B0000 		.4byte	.LLST97
 9361 103c 24       		.uleb128 0x24
 9362 103d 00000000 		.4byte	.Ldebug_ranges0+0
 9363 1041 B4100000 		.4byte	0x10b4
 9364 1045 12       		.uleb128 0x12
 9365 1046 6300     		.ascii	"c\000"
 9366 1048 01       		.byte	0x1
 9367 1049 7504     		.2byte	0x475
 9368 104b B8000000 		.4byte	0xb8
 9369 104f 1B1B0000 		.4byte	.LLST98
 9370 1053 21       		.uleb128 0x21
 9371 1054 66000000 		.4byte	.LVL442
 9372 1058 FF0E0000 		.4byte	0xeff
 9373 105c 1C       		.uleb128 0x1c
 9374 105d 7E000000 		.4byte	.LVL445
 9375 1061 E5080000 		.4byte	0x8e5
 9376 1065 6F100000 		.4byte	0x106f
 9377 1069 1D       		.uleb128 0x1d
 9378 106a 01       		.uleb128 0x1
 9379 106b 51       		.byte	0x51
 9380 106c 01       		.uleb128 0x1
 9381 106d 30       		.byte	0x30
 9382 106e 00       		.byte	0
 9383 106f 1C       		.uleb128 0x1c
 9384 1070 90000000 		.4byte	.LVL446
 9385 1074 F1040000 		.4byte	0x4f1
 9386 1078 89100000 		.4byte	0x1089
 9387 107c 1D       		.uleb128 0x1d
 9388 107d 01       		.uleb128 0x1
 9389 107e 52       		.byte	0x52
 9390 107f 03       		.uleb128 0x3
 9391 1080 0A       		.byte	0xa
 9392 1081 0002     		.2byte	0x200
 9393 1083 1D       		.uleb128 0x1d
 9394 1084 01       		.uleb128 0x1
 9395 1085 51       		.byte	0x51
 9396 1086 01       		.uleb128 0x1
 9397 1087 30       		.byte	0x30
 9398 1088 00       		.byte	0
 9399 1089 1C       		.uleb128 0x1c
 9400 108a 9A000000 		.4byte	.LVL448
 9401 108e 8E0C0000 		.4byte	0xc8e
 9402 1092 A3100000 		.4byte	0x10a3
 9403 1096 1D       		.uleb128 0x1d
 9404 1097 01       		.uleb128 0x1
 9405 1098 51       		.byte	0x51
 9406 1099 02       		.uleb128 0x2
 9407 109a 78       		.byte	0x78
 9408 109b 00       		.sleb128 0
 9409 109c 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 236


 9410 109d 01       		.uleb128 0x1
 9411 109e 50       		.byte	0x50
 9412 109f 02       		.uleb128 0x2
 9413 10a0 76       		.byte	0x76
 9414 10a1 00       		.sleb128 0
 9415 10a2 00       		.byte	0
 9416 10a3 1E       		.uleb128 0x1e
 9417 10a4 B2000000 		.4byte	.LVL451
 9418 10a8 E5080000 		.4byte	0x8e5
 9419 10ac 1D       		.uleb128 0x1d
 9420 10ad 01       		.uleb128 0x1
 9421 10ae 51       		.byte	0x51
 9422 10af 02       		.uleb128 0x2
 9423 10b0 79       		.byte	0x79
 9424 10b1 00       		.sleb128 0
 9425 10b2 00       		.byte	0
 9426 10b3 00       		.byte	0
 9427 10b4 21       		.uleb128 0x21
 9428 10b5 48000000 		.4byte	.LVL439
 9429 10b9 C80C0000 		.4byte	0xcc8
 9430 10bd 1E       		.uleb128 0x1e
 9431 10be DC000000 		.4byte	.LVL455
 9432 10c2 8E0C0000 		.4byte	0xc8e
 9433 10c6 1D       		.uleb128 0x1d
 9434 10c7 01       		.uleb128 0x1
 9435 10c8 51       		.byte	0x51
 9436 10c9 02       		.uleb128 0x2
 9437 10ca 78       		.byte	0x78
 9438 10cb 00       		.sleb128 0
 9439 10cc 00       		.byte	0
 9440 10cd 00       		.byte	0
 9441 10ce 16       		.uleb128 0x16
 9442 10cf 62020000 		.4byte	.LASF121
 9443 10d3 01       		.byte	0x1
 9444 10d4 4905     		.2byte	0x549
 9445 10d6 EF030000 		.4byte	0x3ef
 9446 10da 00000000 		.4byte	.LFB18
 9447 10de 4A000000 		.4byte	.LFE18-.LFB18
 9448 10e2 01       		.uleb128 0x1
 9449 10e3 9C       		.byte	0x9c
 9450 10e4 70110000 		.4byte	0x1170
 9451 10e8 11       		.uleb128 0x11
 9452 10e9 646A00   		.ascii	"dj\000"
 9453 10ec 01       		.byte	0x1
 9454 10ed 4A05     		.2byte	0x54a
 9455 10ef 54060000 		.4byte	0x654
 9456 10f3 5D1B0000 		.4byte	.LLST99
 9457 10f7 12       		.uleb128 0x12
 9458 10f8 72657300 		.ascii	"res\000"
 9459 10fc 01       		.byte	0x1
 9460 10fd 4D05     		.2byte	0x54d
 9461 10ff EF030000 		.4byte	0x3ef
 9462 1103 891B0000 		.4byte	.LLST100
 9463 1107 12       		.uleb128 0x12
 9464 1108 6300     		.ascii	"c\000"
 9465 110a 01       		.byte	0x1
 9466 110b 4E05     		.2byte	0x54e
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 237


 9467 110d B8000000 		.4byte	0xb8
 9468 1111 C81B0000 		.4byte	.LLST101
 9469 1115 12       		.uleb128 0x12
 9470 1116 64697200 		.ascii	"dir\000"
 9471 111a 01       		.byte	0x1
 9472 111b 4E05     		.2byte	0x54e
 9473 111d 8C020000 		.4byte	0x28c
 9474 1121 E81B0000 		.4byte	.LLST102
 9475 1125 1C       		.uleb128 0x1c
 9476 1126 0A000000 		.4byte	.LVL478
 9477 112a 7A0D0000 		.4byte	0xd7a
 9478 112e 3E110000 		.4byte	0x113e
 9479 1132 1D       		.uleb128 0x1d
 9480 1133 01       		.uleb128 0x1
 9481 1134 51       		.byte	0x51
 9482 1135 01       		.uleb128 0x1
 9483 1136 30       		.byte	0x30
 9484 1137 1D       		.uleb128 0x1d
 9485 1138 01       		.uleb128 0x1
 9486 1139 50       		.byte	0x50
 9487 113a 02       		.uleb128 0x2
 9488 113b 74       		.byte	0x74
 9489 113c 00       		.sleb128 0
 9490 113d 00       		.byte	0
 9491 113e 21       		.uleb128 0x21
 9492 113f 18000000 		.4byte	.LVL480
 9493 1143 E5080000 		.4byte	0x8e5
 9494 1147 1C       		.uleb128 0x1c
 9495 1148 32000000 		.4byte	.LVL484
 9496 114c 46050000 		.4byte	0x546
 9497 1150 5A110000 		.4byte	0x115a
 9498 1154 1D       		.uleb128 0x1d
 9499 1155 01       		.uleb128 0x1
 9500 1156 52       		.byte	0x52
 9501 1157 01       		.uleb128 0x1
 9502 1158 3B       		.byte	0x3b
 9503 1159 00       		.byte	0
 9504 115a 1E       		.uleb128 0x1e
 9505 115b 3E000000 		.4byte	.LVL485
 9506 115f E50F0000 		.4byte	0xfe5
 9507 1163 1D       		.uleb128 0x1d
 9508 1164 01       		.uleb128 0x1
 9509 1165 51       		.byte	0x51
 9510 1166 01       		.uleb128 0x1
 9511 1167 30       		.byte	0x30
 9512 1168 1D       		.uleb128 0x1d
 9513 1169 01       		.uleb128 0x1
 9514 116a 50       		.byte	0x50
 9515 116b 02       		.uleb128 0x2
 9516 116c 74       		.byte	0x74
 9517 116d 00       		.sleb128 0
 9518 116e 00       		.byte	0
 9519 116f 00       		.byte	0
 9520 1170 16       		.uleb128 0x16
 9521 1171 BE040000 		.4byte	.LASF122
 9522 1175 01       		.byte	0x1
 9523 1176 7F07     		.2byte	0x77f
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 238


 9524 1178 EF030000 		.4byte	0x3ef
 9525 117c 00000000 		.4byte	.LFB24
 9526 1180 88000000 		.4byte	.LFE24-.LFB24
 9527 1184 01       		.uleb128 0x1
 9528 1185 9C       		.byte	0x9c
 9529 1186 1C120000 		.4byte	0x121c
 9530 118a 11       		.uleb128 0x11
 9531 118b 646A00   		.ascii	"dj\000"
 9532 118e 01       		.byte	0x1
 9533 118f 8007     		.2byte	0x780
 9534 1191 54060000 		.4byte	0x654
 9535 1195 061C0000 		.4byte	.LLST103
 9536 1199 19       		.uleb128 0x19
 9537 119a 85000000 		.4byte	.LASF93
 9538 119e 01       		.byte	0x1
 9539 119f 8107     		.2byte	0x781
 9540 11a1 3C080000 		.4byte	0x83c
 9541 11a5 481C0000 		.4byte	.LLST104
 9542 11a9 12       		.uleb128 0x12
 9543 11aa 72657300 		.ascii	"res\000"
 9544 11ae 01       		.byte	0x1
 9545 11af 8407     		.2byte	0x784
 9546 11b1 EF030000 		.4byte	0x3ef
 9547 11b5 751C0000 		.4byte	.LLST105
 9548 11b9 12       		.uleb128 0x12
 9549 11ba 64697200 		.ascii	"dir\000"
 9550 11be 01       		.byte	0x1
 9551 11bf 8507     		.2byte	0x785
 9552 11c1 8C020000 		.4byte	0x28c
 9553 11c5 B41C0000 		.4byte	.LLST106
 9554 11c9 12       		.uleb128 0x12
 9555 11ca 6E7300   		.ascii	"ns\000"
 9556 11cd 01       		.byte	0x1
 9557 11ce 8507     		.2byte	0x785
 9558 11d0 B8000000 		.4byte	0xb8
 9559 11d4 DE1C0000 		.4byte	.LLST107
 9560 11d8 1C       		.uleb128 0x1c
 9561 11d9 2A000000 		.4byte	.LVL495
 9562 11dd 7A0D0000 		.4byte	0xd7a
 9563 11e1 F1110000 		.4byte	0x11f1
 9564 11e5 1D       		.uleb128 0x1d
 9565 11e6 01       		.uleb128 0x1
 9566 11e7 51       		.byte	0x51
 9567 11e8 01       		.uleb128 0x1
 9568 11e9 30       		.byte	0x30
 9569 11ea 1D       		.uleb128 0x1d
 9570 11eb 01       		.uleb128 0x1
 9571 11ec 50       		.byte	0x50
 9572 11ed 02       		.uleb128 0x2
 9573 11ee 74       		.byte	0x74
 9574 11ef 00       		.sleb128 0
 9575 11f0 00       		.byte	0
 9576 11f1 1C       		.uleb128 0x1c
 9577 11f2 3C000000 		.4byte	.LVL498
 9578 11f6 42070000 		.4byte	0x742
 9579 11fa 0B120000 		.4byte	0x120b
 9580 11fe 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 239


 9581 11ff 01       		.uleb128 0x1
 9582 1200 51       		.byte	0x51
 9583 1201 02       		.uleb128 0x2
 9584 1202 91       		.byte	0x91
 9585 1203 6C       		.sleb128 -20
 9586 1204 1D       		.uleb128 0x1d
 9587 1205 01       		.uleb128 0x1
 9588 1206 50       		.byte	0x50
 9589 1207 02       		.uleb128 0x2
 9590 1208 74       		.byte	0x74
 9591 1209 00       		.sleb128 0
 9592 120a 00       		.byte	0
 9593 120b 1E       		.uleb128 0x1e
 9594 120c 46000000 		.4byte	.LVL500
 9595 1210 CE100000 		.4byte	0x10ce
 9596 1214 1D       		.uleb128 0x1d
 9597 1215 01       		.uleb128 0x1
 9598 1216 50       		.byte	0x50
 9599 1217 02       		.uleb128 0x2
 9600 1218 74       		.byte	0x74
 9601 1219 00       		.sleb128 0
 9602 121a 00       		.byte	0
 9603 121b 00       		.byte	0
 9604 121c 16       		.uleb128 0x16
 9605 121d EE040000 		.4byte	.LASF123
 9606 1221 01       		.byte	0x1
 9607 1222 BF05     		.2byte	0x5bf
 9608 1224 EF030000 		.4byte	0x3ef
 9609 1228 00000000 		.4byte	.LFB20
 9610 122c 62000000 		.4byte	.LFE20-.LFB20
 9611 1230 01       		.uleb128 0x1
 9612 1231 9C       		.byte	0x9c
 9613 1232 EC120000 		.4byte	0x12ec
 9614 1236 11       		.uleb128 0x11
 9615 1237 646A00   		.ascii	"dj\000"
 9616 123a 01       		.byte	0x1
 9617 123b C005     		.2byte	0x5c0
 9618 123d 54060000 		.4byte	0x654
 9619 1241 2B1D0000 		.4byte	.LLST108
 9620 1245 12       		.uleb128 0x12
 9621 1246 72657300 		.ascii	"res\000"
 9622 124a 01       		.byte	0x1
 9623 124b C305     		.2byte	0x5c3
 9624 124d EF030000 		.4byte	0x3ef
 9625 1251 571D0000 		.4byte	.LLST109
 9626 1255 12       		.uleb128 0x12
 9627 1256 6300     		.ascii	"c\000"
 9628 1258 01       		.byte	0x1
 9629 1259 C405     		.2byte	0x5c4
 9630 125b B8000000 		.4byte	0xb8
 9631 125f B71D0000 		.4byte	.LLST110
 9632 1263 12       		.uleb128 0x12
 9633 1264 64697200 		.ascii	"dir\000"
 9634 1268 01       		.byte	0x1
 9635 1269 C405     		.2byte	0x5c4
 9636 126b 8C020000 		.4byte	0x28c
 9637 126f CB1D0000 		.4byte	.LLST111
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 240


 9638 1273 1C       		.uleb128 0x1c
 9639 1274 0A000000 		.4byte	.LVL515
 9640 1278 7A0D0000 		.4byte	0xd7a
 9641 127c 8C120000 		.4byte	0x128c
 9642 1280 1D       		.uleb128 0x1d
 9643 1281 01       		.uleb128 0x1
 9644 1282 51       		.byte	0x51
 9645 1283 01       		.uleb128 0x1
 9646 1284 30       		.byte	0x30
 9647 1285 1D       		.uleb128 0x1d
 9648 1286 01       		.uleb128 0x1
 9649 1287 50       		.byte	0x50
 9650 1288 02       		.uleb128 0x2
 9651 1289 75       		.byte	0x75
 9652 128a 00       		.sleb128 0
 9653 128b 00       		.byte	0
 9654 128c 21       		.uleb128 0x21
 9655 128d 16000000 		.4byte	.LVL518
 9656 1291 E5080000 		.4byte	0x8e5
 9657 1295 1C       		.uleb128 0x1c
 9658 1296 2E000000 		.4byte	.LVL522
 9659 129a E50F0000 		.4byte	0xfe5
 9660 129e AE120000 		.4byte	0x12ae
 9661 12a2 1D       		.uleb128 0x1d
 9662 12a3 01       		.uleb128 0x1
 9663 12a4 51       		.byte	0x51
 9664 12a5 01       		.uleb128 0x1
 9665 12a6 31       		.byte	0x31
 9666 12a7 1D       		.uleb128 0x1d
 9667 12a8 01       		.uleb128 0x1
 9668 12a9 50       		.byte	0x50
 9669 12aa 02       		.uleb128 0x2
 9670 12ab 75       		.byte	0x75
 9671 12ac 00       		.sleb128 0
 9672 12ad 00       		.byte	0
 9673 12ae 21       		.uleb128 0x21
 9674 12af 3E000000 		.4byte	.LVL525
 9675 12b3 E5080000 		.4byte	0x8e5
 9676 12b7 1C       		.uleb128 0x1c
 9677 12b8 4E000000 		.4byte	.LVL529
 9678 12bc F1040000 		.4byte	0x4f1
 9679 12c0 D6120000 		.4byte	0x12d6
 9680 12c4 1D       		.uleb128 0x1d
 9681 12c5 01       		.uleb128 0x1
 9682 12c6 52       		.byte	0x52
 9683 12c7 02       		.uleb128 0x2
 9684 12c8 08       		.byte	0x8
 9685 12c9 20       		.byte	0x20
 9686 12ca 1D       		.uleb128 0x1d
 9687 12cb 01       		.uleb128 0x1
 9688 12cc 51       		.byte	0x51
 9689 12cd 01       		.uleb128 0x1
 9690 12ce 30       		.byte	0x30
 9691 12cf 1D       		.uleb128 0x1d
 9692 12d0 01       		.uleb128 0x1
 9693 12d1 50       		.byte	0x50
 9694 12d2 02       		.uleb128 0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 241


 9695 12d3 76       		.byte	0x76
 9696 12d4 00       		.sleb128 0
 9697 12d5 00       		.byte	0
 9698 12d6 1E       		.uleb128 0x1e
 9699 12d7 58000000 		.4byte	.LVL530
 9700 12db 7A040000 		.4byte	0x47a
 9701 12df 1D       		.uleb128 0x1d
 9702 12e0 01       		.uleb128 0x1
 9703 12e1 52       		.byte	0x52
 9704 12e2 01       		.uleb128 0x1
 9705 12e3 3B       		.byte	0x3b
 9706 12e4 1D       		.uleb128 0x1d
 9707 12e5 01       		.uleb128 0x1
 9708 12e6 50       		.byte	0x50
 9709 12e7 02       		.uleb128 0x2
 9710 12e8 76       		.byte	0x76
 9711 12e9 00       		.sleb128 0
 9712 12ea 00       		.byte	0
 9713 12eb 00       		.byte	0
 9714 12ec 16       		.uleb128 0x16
 9715 12ed 78060000 		.4byte	.LASF124
 9716 12f1 01       		.byte	0x1
 9717 12f2 8605     		.2byte	0x586
 9718 12f4 EF030000 		.4byte	0x3ef
 9719 12f8 00000000 		.4byte	.LFB19
 9720 12fc 4A000000 		.4byte	.LFE19-.LFB19
 9721 1300 01       		.uleb128 0x1
 9722 1301 9C       		.byte	0x9c
 9723 1302 62130000 		.4byte	0x1362
 9724 1306 11       		.uleb128 0x11
 9725 1307 646A00   		.ascii	"dj\000"
 9726 130a 01       		.byte	0x1
 9727 130b 8705     		.2byte	0x587
 9728 130d 54060000 		.4byte	0x654
 9729 1311 DE1D0000 		.4byte	.LLST112
 9730 1315 12       		.uleb128 0x12
 9731 1316 72657300 		.ascii	"res\000"
 9732 131a 01       		.byte	0x1
 9733 131b 8A05     		.2byte	0x58a
 9734 131d EF030000 		.4byte	0x3ef
 9735 1321 0A1E0000 		.4byte	.LLST113
 9736 1325 12       		.uleb128 0x12
 9737 1326 6300     		.ascii	"c\000"
 9738 1328 01       		.byte	0x1
 9739 1329 8B05     		.2byte	0x58b
 9740 132b B8000000 		.4byte	0xb8
 9741 132f 3F1E0000 		.4byte	.LLST114
 9742 1333 12       		.uleb128 0x12
 9743 1334 64697200 		.ascii	"dir\000"
 9744 1338 01       		.byte	0x1
 9745 1339 8B05     		.2byte	0x58b
 9746 133b 8C020000 		.4byte	0x28c
 9747 133f 6C1E0000 		.4byte	.LLST115
 9748 1343 21       		.uleb128 0x21
 9749 1344 10000000 		.4byte	.LVL539
 9750 1348 E5080000 		.4byte	0x8e5
 9751 134c 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 242


 9752 134d 32000000 		.4byte	.LVL544
 9753 1351 E50F0000 		.4byte	0xfe5
 9754 1355 1D       		.uleb128 0x1d
 9755 1356 01       		.uleb128 0x1
 9756 1357 51       		.byte	0x51
 9757 1358 01       		.uleb128 0x1
 9758 1359 30       		.byte	0x30
 9759 135a 1D       		.uleb128 0x1d
 9760 135b 01       		.uleb128 0x1
 9761 135c 50       		.byte	0x50
 9762 135d 02       		.uleb128 0x2
 9763 135e 74       		.byte	0x74
 9764 135f 00       		.sleb128 0
 9765 1360 00       		.byte	0
 9766 1361 00       		.byte	0
 9767 1362 16       		.uleb128 0x16
 9768 1363 96050000 		.4byte	.LASF125
 9769 1367 01       		.byte	0x1
 9770 1368 9D03     		.2byte	0x39d
 9771 136a EF030000 		.4byte	0x3ef
 9772 136e 00000000 		.4byte	.LFB14
 9773 1372 6C000000 		.4byte	.LFE14-.LFB14
 9774 1376 01       		.uleb128 0x1
 9775 1377 9C       		.byte	0x9c
 9776 1378 F1130000 		.4byte	0x13f1
 9777 137c 11       		.uleb128 0x11
 9778 137d 667300   		.ascii	"fs\000"
 9779 1380 01       		.byte	0x1
 9780 1381 9E03     		.2byte	0x39e
 9781 1383 86020000 		.4byte	0x286
 9782 1387 961E0000 		.4byte	.LLST116
 9783 138b 19       		.uleb128 0x19
 9784 138c 20030000 		.4byte	.LASF112
 9785 1390 01       		.byte	0x1
 9786 1391 9F03     		.2byte	0x39f
 9787 1393 CE000000 		.4byte	0xce
 9788 1397 D81E0000 		.4byte	.LLST117
 9789 139b 12       		.uleb128 0x12
 9790 139c 72657300 		.ascii	"res\000"
 9791 13a0 01       		.byte	0x1
 9792 13a1 A203     		.2byte	0x3a2
 9793 13a3 EF030000 		.4byte	0x3ef
 9794 13a7 221F0000 		.4byte	.LLST118
 9795 13ab 12       		.uleb128 0x12
 9796 13ac 6E787400 		.ascii	"nxt\000"
 9797 13b0 01       		.byte	0x1
 9798 13b1 A303     		.2byte	0x3a3
 9799 13b3 CE000000 		.4byte	0xce
 9800 13b7 6C1F0000 		.4byte	.LLST119
 9801 13bb 1C       		.uleb128 0x1c
 9802 13bc 24000000 		.4byte	.LVL551
 9803 13c0 C80C0000 		.4byte	0xcc8
 9804 13c4 D5130000 		.4byte	0x13d5
 9805 13c8 1D       		.uleb128 0x1d
 9806 13c9 01       		.uleb128 0x1
 9807 13ca 51       		.byte	0x51
 9808 13cb 02       		.uleb128 0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 243


 9809 13cc 75       		.byte	0x75
 9810 13cd 00       		.sleb128 0
 9811 13ce 1D       		.uleb128 0x1d
 9812 13cf 01       		.uleb128 0x1
 9813 13d0 50       		.byte	0x50
 9814 13d1 02       		.uleb128 0x2
 9815 13d2 74       		.byte	0x74
 9816 13d3 00       		.sleb128 0
 9817 13d4 00       		.byte	0
 9818 13d5 1E       		.uleb128 0x1e
 9819 13d6 3A000000 		.4byte	.LVL554
 9820 13da 3C0E0000 		.4byte	0xe3c
 9821 13de 1D       		.uleb128 0x1d
 9822 13df 01       		.uleb128 0x1
 9823 13e0 52       		.byte	0x52
 9824 13e1 01       		.uleb128 0x1
 9825 13e2 30       		.byte	0x30
 9826 13e3 1D       		.uleb128 0x1d
 9827 13e4 01       		.uleb128 0x1
 9828 13e5 51       		.byte	0x51
 9829 13e6 02       		.uleb128 0x2
 9830 13e7 75       		.byte	0x75
 9831 13e8 00       		.sleb128 0
 9832 13e9 1D       		.uleb128 0x1d
 9833 13ea 01       		.uleb128 0x1
 9834 13eb 50       		.byte	0x50
 9835 13ec 02       		.uleb128 0x2
 9836 13ed 74       		.byte	0x74
 9837 13ee 00       		.sleb128 0
 9838 13ef 00       		.byte	0
 9839 13f0 00       		.byte	0
 9840 13f1 23       		.uleb128 0x23
 9841 13f2 6B040000 		.4byte	.LASF126
 9842 13f6 01       		.byte	0x1
 9843 13f7 9B08     		.2byte	0x89b
 9844 13f9 EF030000 		.4byte	0x3ef
 9845 13fd 00000000 		.4byte	.LFB28
 9846 1401 3C000000 		.4byte	.LFE28-.LFB28
 9847 1405 01       		.uleb128 0x1
 9848 1406 9C       		.byte	0x9c
 9849 1407 4B140000 		.4byte	0x144b
 9850 140b 11       		.uleb128 0x11
 9851 140c 766F6C00 		.ascii	"vol\000"
 9852 1410 01       		.byte	0x1
 9853 1411 9C08     		.2byte	0x89c
 9854 1413 B8000000 		.4byte	0xb8
 9855 1417 951F0000 		.4byte	.LLST120
 9856 141b 11       		.uleb128 0x11
 9857 141c 667300   		.ascii	"fs\000"
 9858 141f 01       		.byte	0x1
 9859 1420 9D08     		.2byte	0x89d
 9860 1422 86020000 		.4byte	0x286
 9861 1426 CF1F0000 		.4byte	.LLST121
 9862 142a 12       		.uleb128 0x12
 9863 142b 72667300 		.ascii	"rfs\000"
 9864 142f 01       		.byte	0x1
 9865 1430 A008     		.2byte	0x8a0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 244


 9866 1432 86020000 		.4byte	0x286
 9867 1436 11200000 		.4byte	.LLST122
 9868 143a 1E       		.uleb128 0x1e
 9869 143b 1C000000 		.4byte	.LVL569
 9870 143f 10070000 		.4byte	0x710
 9871 1443 1D       		.uleb128 0x1d
 9872 1444 01       		.uleb128 0x1
 9873 1445 50       		.byte	0x50
 9874 1446 02       		.uleb128 0x2
 9875 1447 76       		.byte	0x76
 9876 1448 00       		.sleb128 0
 9877 1449 00       		.byte	0
 9878 144a 00       		.byte	0
 9879 144b 23       		.uleb128 0x23
 9880 144c 81060000 		.4byte	.LASF127
 9881 1450 01       		.byte	0x1
 9882 1451 C308     		.2byte	0x8c3
 9883 1453 EF030000 		.4byte	0x3ef
 9884 1457 00000000 		.4byte	.LFB29
 9885 145b 9C010000 		.4byte	.LFE29-.LFB29
 9886 145f 01       		.uleb128 0x1
 9887 1460 9C       		.byte	0x9c
 9888 1461 BA150000 		.4byte	0x15ba
 9889 1465 11       		.uleb128 0x11
 9890 1466 667000   		.ascii	"fp\000"
 9891 1469 01       		.byte	0x1
 9892 146a C408     		.2byte	0x8c4
 9893 146c BA150000 		.4byte	0x15ba
 9894 1470 24200000 		.4byte	.LLST123
 9895 1474 19       		.uleb128 0x19
 9896 1475 85000000 		.4byte	.LASF93
 9897 1479 01       		.byte	0x1
 9898 147a C508     		.2byte	0x8c5
 9899 147c 3C080000 		.4byte	0x83c
 9900 1480 50200000 		.4byte	.LLST124
 9901 1484 19       		.uleb128 0x19
 9902 1485 6E050000 		.4byte	.LASF128
 9903 1489 01       		.byte	0x1
 9904 148a C608     		.2byte	0x8c6
 9905 148c B8000000 		.4byte	0xb8
 9906 1490 7C200000 		.4byte	.LLST125
 9907 1494 12       		.uleb128 0x12
 9908 1495 72657300 		.ascii	"res\000"
 9909 1499 01       		.byte	0x1
 9910 149a C908     		.2byte	0x8c9
 9911 149c EF030000 		.4byte	0x3ef
 9912 14a0 9A200000 		.4byte	.LLST126
 9913 14a4 18       		.uleb128 0x18
 9914 14a5 646A00   		.ascii	"dj\000"
 9915 14a8 01       		.byte	0x1
 9916 14a9 CA08     		.2byte	0x8ca
 9917 14ab 03030000 		.4byte	0x303
 9918 14af 02       		.uleb128 0x2
 9919 14b0 91       		.byte	0x91
 9920 14b1 44       		.sleb128 -60
 9921 14b2 12       		.uleb128 0x12
 9922 14b3 64697200 		.ascii	"dir\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 245


 9923 14b7 01       		.byte	0x1
 9924 14b8 CB08     		.2byte	0x8cb
 9925 14ba 8C020000 		.4byte	0x28c
 9926 14be 26210000 		.4byte	.LLST127
 9927 14c2 18       		.uleb128 0x18
 9928 14c3 73666E00 		.ascii	"sfn\000"
 9929 14c7 01       		.byte	0x1
 9930 14c8 CC08     		.2byte	0x8cc
 9931 14ca C0150000 		.4byte	0x15c0
 9932 14ce 03       		.uleb128 0x3
 9933 14cf 91       		.byte	0x91
 9934 14d0 B87F     		.sleb128 -72
 9935 14d2 20       		.uleb128 0x20
 9936 14d3 62000000 		.4byte	.LBB5
 9937 14d7 A6000000 		.4byte	.LBE5-.LBB5
 9938 14db 48150000 		.4byte	0x1548
 9939 14df 12       		.uleb128 0x12
 9940 14e0 647700   		.ascii	"dw\000"
 9941 14e3 01       		.byte	0x1
 9942 14e4 E808     		.2byte	0x8e8
 9943 14e6 CE000000 		.4byte	0xce
 9944 14ea 39210000 		.4byte	.LLST128
 9945 14ee 12       		.uleb128 0x12
 9946 14ef 636C00   		.ascii	"cl\000"
 9947 14f2 01       		.byte	0x1
 9948 14f3 E808     		.2byte	0x8e8
 9949 14f5 CE000000 		.4byte	0xce
 9950 14f9 62210000 		.4byte	.LLST129
 9951 14fd 21       		.uleb128 0x21
 9952 14fe 6E000000 		.4byte	.LVL587
 9953 1502 5A060000 		.4byte	0x65a
 9954 1506 1C       		.uleb128 0x1c
 9955 1507 78000000 		.4byte	.LVL588
 9956 150b 1C120000 		.4byte	0x121c
 9957 150f 1A150000 		.4byte	0x151a
 9958 1513 1D       		.uleb128 0x1d
 9959 1514 01       		.uleb128 0x1
 9960 1515 50       		.byte	0x50
 9961 1516 02       		.uleb128 0x2
 9962 1517 91       		.byte	0x91
 9963 1518 44       		.sleb128 -60
 9964 1519 00       		.byte	0
 9965 151a 21       		.uleb128 0x21
 9966 151b A8000000 		.4byte	.LVL597
 9967 151f 91250000 		.4byte	0x2591
 9968 1523 1C       		.uleb128 0x1c
 9969 1524 F2000000 		.4byte	.LVL601
 9970 1528 62130000 		.4byte	0x1362
 9971 152c 37150000 		.4byte	0x1537
 9972 1530 1D       		.uleb128 0x1d
 9973 1531 01       		.uleb128 0x1
 9974 1532 51       		.byte	0x51
 9975 1533 02       		.uleb128 0x2
 9976 1534 78       		.byte	0x78
 9977 1535 00       		.sleb128 0
 9978 1536 00       		.byte	0
 9979 1537 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 246


 9980 1538 04010000 		.4byte	.LVL604
 9981 153c E5080000 		.4byte	0x8e5
 9982 1540 1D       		.uleb128 0x1d
 9983 1541 01       		.uleb128 0x1
 9984 1542 51       		.byte	0x51
 9985 1543 02       		.uleb128 0x2
 9986 1544 79       		.byte	0x79
 9987 1545 00       		.sleb128 0
 9988 1546 00       		.byte	0
 9989 1547 00       		.byte	0
 9990 1548 1C       		.uleb128 0x1c
 9991 1549 26000000 		.4byte	.LVL577
 9992 154d 390A0000 		.4byte	0xa39
 9993 1551 6B150000 		.4byte	0x156b
 9994 1555 1D       		.uleb128 0x1d
 9995 1556 01       		.uleb128 0x1
 9996 1557 52       		.byte	0x52
 9997 1558 04       		.uleb128 0x4
 9998 1559 78       		.byte	0x78
 9999 155a 00       		.sleb128 0
 10000 155b 4E       		.byte	0x4e
 10001 155c 1A       		.byte	0x1a
 10002 155d 1D       		.uleb128 0x1d
 10003 155e 01       		.uleb128 0x1
 10004 155f 51       		.byte	0x51
 10005 1560 02       		.uleb128 0x2
 10006 1561 91       		.byte	0x91
 10007 1562 44       		.sleb128 -60
 10008 1563 1D       		.uleb128 0x1d
 10009 1564 01       		.uleb128 0x1
 10010 1565 50       		.byte	0x50
 10011 1566 03       		.uleb128 0x3
 10012 1567 91       		.byte	0x91
 10013 1568 B47F     		.sleb128 -76
 10014 156a 00       		.byte	0
 10015 156b 1C       		.uleb128 0x1c
 10016 156c 38000000 		.4byte	.LVL580
 10017 1570 70110000 		.4byte	0x1170
 10018 1574 7F150000 		.4byte	0x157f
 10019 1578 1D       		.uleb128 0x1d
 10020 1579 01       		.uleb128 0x1
 10021 157a 50       		.byte	0x50
 10022 157b 02       		.uleb128 0x2
 10023 157c 91       		.byte	0x91
 10024 157d 44       		.sleb128 -60
 10025 157e 00       		.byte	0
 10026 157f 1C       		.uleb128 0x1c
 10027 1580 54000000 		.4byte	.LVL583
 10028 1584 FF050000 		.4byte	0x5ff
 10029 1588 9E150000 		.4byte	0x159e
 10030 158c 1D       		.uleb128 0x1d
 10031 158d 01       		.uleb128 0x1
 10032 158e 51       		.byte	0x51
 10033 158f 07       		.uleb128 0x7
 10034 1590 77       		.byte	0x77
 10035 1591 00       		.sleb128 0
 10036 1592 09       		.byte	0x9
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 247


 10037 1593 FE       		.byte	0xfe
 10038 1594 1A       		.byte	0x1a
 10039 1595 30       		.byte	0x30
 10040 1596 2E       		.byte	0x2e
 10041 1597 1D       		.uleb128 0x1d
 10042 1598 01       		.uleb128 0x1
 10043 1599 50       		.byte	0x50
 10044 159a 02       		.uleb128 0x2
 10045 159b 91       		.byte	0x91
 10046 159c 44       		.sleb128 -60
 10047 159d 00       		.byte	0
 10048 159e 1E       		.uleb128 0x1e
 10049 159f 48010000 		.4byte	.LVL611
 10050 15a3 83060000 		.4byte	0x683
 10051 15a7 1D       		.uleb128 0x1d
 10052 15a8 01       		.uleb128 0x1
 10053 15a9 51       		.byte	0x51
 10054 15aa 07       		.uleb128 0x7
 10055 15ab 77       		.byte	0x77
 10056 15ac 00       		.sleb128 0
 10057 15ad 09       		.byte	0x9
 10058 15ae FE       		.byte	0xfe
 10059 15af 1A       		.byte	0x1a
 10060 15b0 30       		.byte	0x30
 10061 15b1 2E       		.byte	0x2e
 10062 15b2 1D       		.uleb128 0x1d
 10063 15b3 01       		.uleb128 0x1
 10064 15b4 50       		.byte	0x50
 10065 15b5 02       		.uleb128 0x2
 10066 15b6 91       		.byte	0x91
 10067 15b7 44       		.sleb128 -60
 10068 15b8 00       		.byte	0
 10069 15b9 00       		.byte	0
 10070 15ba 0B       		.uleb128 0xb
 10071 15bb 04       		.byte	0x4
 10072 15bc 92020000 		.4byte	0x292
 10073 15c0 08       		.uleb128 0x8
 10074 15c1 B8000000 		.4byte	0xb8
 10075 15c5 D0150000 		.4byte	0x15d0
 10076 15c9 0D       		.uleb128 0xd
 10077 15ca DD010000 		.4byte	0x1dd
 10078 15ce 0B       		.byte	0xb
 10079 15cf 00       		.byte	0
 10080 15d0 23       		.uleb128 0x23
 10081 15d1 62000000 		.4byte	.LASF129
 10082 15d5 01       		.byte	0x1
 10083 15d6 4509     		.2byte	0x945
 10084 15d8 EF030000 		.4byte	0x3ef
 10085 15dc 00000000 		.4byte	.LFB30
 10086 15e0 A0010000 		.4byte	.LFE30-.LFB30
 10087 15e4 01       		.uleb128 0x1
 10088 15e5 9C       		.byte	0x9c
 10089 15e6 25170000 		.4byte	0x1725
 10090 15ea 11       		.uleb128 0x11
 10091 15eb 667000   		.ascii	"fp\000"
 10092 15ee 01       		.byte	0x1
 10093 15ef 4609     		.2byte	0x946
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 248


 10094 15f1 BA150000 		.4byte	0x15ba
 10095 15f5 80210000 		.4byte	.LLST130
 10096 15f9 19       		.uleb128 0x19
 10097 15fa AB010000 		.4byte	.LASF130
 10098 15fe 01       		.byte	0x1
 10099 15ff 4709     		.2byte	0x947
 10100 1601 DD040000 		.4byte	0x4dd
 10101 1605 AC210000 		.4byte	.LLST131
 10102 1609 11       		.uleb128 0x11
 10103 160a 62747200 		.ascii	"btr\000"
 10104 160e 01       		.byte	0x1
 10105 160f 4809     		.2byte	0x948
 10106 1611 AD000000 		.4byte	0xad
 10107 1615 F1210000 		.4byte	.LLST132
 10108 1619 11       		.uleb128 0x11
 10109 161a 627200   		.ascii	"br\000"
 10110 161d 01       		.byte	0x1
 10111 161e 4909     		.2byte	0x949
 10112 1620 25170000 		.4byte	0x1725
 10113 1624 31220000 		.4byte	.LLST133
 10114 1628 12       		.uleb128 0x12
 10115 1629 72657300 		.ascii	"res\000"
 10116 162d 01       		.byte	0x1
 10117 162e 4C09     		.2byte	0x94c
 10118 1630 EF030000 		.4byte	0x3ef
 10119 1634 5D220000 		.4byte	.LLST134
 10120 1638 1F       		.uleb128 0x1f
 10121 1639 20030000 		.4byte	.LASF112
 10122 163d 01       		.byte	0x1
 10123 163e 4D09     		.2byte	0x94d
 10124 1640 CE000000 		.4byte	0xce
 10125 1644 7B220000 		.4byte	.LLST135
 10126 1648 1F       		.uleb128 0x1f
 10127 1649 3D010000 		.4byte	.LASF48
 10128 164d 01       		.byte	0x1
 10129 164e 4D09     		.2byte	0x94d
 10130 1650 CE000000 		.4byte	0xce
 10131 1654 AF220000 		.4byte	.LLST136
 10132 1658 1F       		.uleb128 0x1f
 10133 1659 03060000 		.4byte	.LASF131
 10134 165d 01       		.byte	0x1
 10135 165e 4D09     		.2byte	0x94d
 10136 1660 CE000000 		.4byte	0xce
 10137 1664 EE220000 		.4byte	.LLST137
 10138 1668 1F       		.uleb128 0x1f
 10139 1669 43060000 		.4byte	.LASF132
 10140 166d 01       		.byte	0x1
 10141 166e 4E09     		.2byte	0x94e
 10142 1670 AD000000 		.4byte	0xad
 10143 1674 1E230000 		.4byte	.LLST138
 10144 1678 12       		.uleb128 0x12
 10145 1679 636300   		.ascii	"cc\000"
 10146 167c 01       		.byte	0x1
 10147 167d 4E09     		.2byte	0x94e
 10148 167f AD000000 		.4byte	0xad
 10149 1683 47230000 		.4byte	.LLST139
 10150 1687 1F       		.uleb128 0x1f
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 249


 10151 1688 4A000000 		.4byte	.LASF133
 10152 168c 01       		.byte	0x1
 10153 168d 4F09     		.2byte	0x94f
 10154 168f B8000000 		.4byte	0xb8
 10155 1693 7B230000 		.4byte	.LLST140
 10156 1697 1F       		.uleb128 0x1f
 10157 1698 8A000000 		.4byte	.LASF134
 10158 169c 01       		.byte	0x1
 10159 169d 4F09     		.2byte	0x94f
 10160 169f 8C020000 		.4byte	0x28c
 10161 16a3 AF230000 		.4byte	.LLST141
 10162 16a7 21       		.uleb128 0x21
 10163 16a8 22000000 		.4byte	.LVL622
 10164 16ac F7090000 		.4byte	0x9f7
 10165 16b0 21       		.uleb128 0x21
 10166 16b1 70000000 		.4byte	.LVL631
 10167 16b5 C80C0000 		.4byte	0xcc8
 10168 16b9 1C       		.uleb128 0x1c
 10169 16ba A2000000 		.4byte	.LVL637
 10170 16be 8E0C0000 		.4byte	0xc8e
 10171 16c2 CD160000 		.4byte	0x16cd
 10172 16c6 1D       		.uleb128 0x1d
 10173 16c7 01       		.uleb128 0x1
 10174 16c8 50       		.byte	0x50
 10175 16c9 02       		.uleb128 0x2
 10176 16ca 7A       		.byte	0x7a
 10177 16cb 00       		.sleb128 0
 10178 16cc 00       		.byte	0
 10179 16cd 1C       		.uleb128 0x1c
 10180 16ce E4000000 		.4byte	.LVL646
 10181 16d2 24250000 		.4byte	0x2524
 10182 16d6 F0160000 		.4byte	0x16f0
 10183 16da 1D       		.uleb128 0x1d
 10184 16db 01       		.uleb128 0x1
 10185 16dc 53       		.byte	0x53
 10186 16dd 05       		.uleb128 0x5
 10187 16de 79       		.byte	0x79
 10188 16df 00       		.sleb128 0
 10189 16e0 08       		.byte	0x8
 10190 16e1 FF       		.byte	0xff
 10191 16e2 1A       		.byte	0x1a
 10192 16e3 1D       		.uleb128 0x1d
 10193 16e4 01       		.uleb128 0x1
 10194 16e5 52       		.byte	0x52
 10195 16e6 02       		.uleb128 0x2
 10196 16e7 7B       		.byte	0x7b
 10197 16e8 00       		.sleb128 0
 10198 16e9 1D       		.uleb128 0x1d
 10199 16ea 01       		.uleb128 0x1
 10200 16eb 51       		.byte	0x51
 10201 16ec 02       		.uleb128 0x2
 10202 16ed 77       		.byte	0x77
 10203 16ee 00       		.sleb128 0
 10204 16ef 00       		.byte	0
 10205 16f0 1C       		.uleb128 0x1c
 10206 16f1 16010000 		.4byte	.LVL650
 10207 16f5 7A040000 		.4byte	0x47a
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 250


 10208 16f9 05170000 		.4byte	0x1705
 10209 16fd 1D       		.uleb128 0x1d
 10210 16fe 01       		.uleb128 0x1
 10211 16ff 52       		.byte	0x52
 10212 1700 03       		.uleb128 0x3
 10213 1701 0A       		.byte	0xa
 10214 1702 0002     		.2byte	0x200
 10215 1704 00       		.byte	0
 10216 1705 21       		.uleb128 0x21
 10217 1706 40010000 		.4byte	.LVL657
 10218 170a E5080000 		.4byte	0x8e5
 10219 170e 1E       		.uleb128 0x1e
 10220 170f 66010000 		.4byte	.LVL658
 10221 1713 7A040000 		.4byte	0x47a
 10222 1717 1D       		.uleb128 0x1d
 10223 1718 01       		.uleb128 0x1
 10224 1719 52       		.byte	0x52
 10225 171a 02       		.uleb128 0x2
 10226 171b 79       		.byte	0x79
 10227 171c 00       		.sleb128 0
 10228 171d 1D       		.uleb128 0x1d
 10229 171e 01       		.uleb128 0x1
 10230 171f 50       		.byte	0x50
 10231 1720 02       		.uleb128 0x2
 10232 1721 77       		.byte	0x77
 10233 1722 00       		.sleb128 0
 10234 1723 00       		.byte	0
 10235 1724 00       		.byte	0
 10236 1725 0B       		.uleb128 0xb
 10237 1726 04       		.byte	0x4
 10238 1727 AD000000 		.4byte	0xad
 10239 172b 23       		.uleb128 0x23
 10240 172c 5A020000 		.4byte	.LASF135
 10241 1730 01       		.byte	0x1
 10242 1731 AA09     		.2byte	0x9aa
 10243 1733 EF030000 		.4byte	0x3ef
 10244 1737 00000000 		.4byte	.LFB31
 10245 173b 12020000 		.4byte	.LFE31-.LFB31
 10246 173f 01       		.uleb128 0x1
 10247 1740 9C       		.byte	0x9c
 10248 1741 B1180000 		.4byte	0x18b1
 10249 1745 11       		.uleb128 0x11
 10250 1746 667000   		.ascii	"fp\000"
 10251 1749 01       		.byte	0x1
 10252 174a AB09     		.2byte	0x9ab
 10253 174c BA150000 		.4byte	0x15ba
 10254 1750 CD230000 		.4byte	.LLST142
 10255 1754 19       		.uleb128 0x19
 10256 1755 AB010000 		.4byte	.LASF130
 10257 1759 01       		.byte	0x1
 10258 175a AC09     		.2byte	0x9ac
 10259 175c DF040000 		.4byte	0x4df
 10260 1760 F9230000 		.4byte	.LLST143
 10261 1764 11       		.uleb128 0x11
 10262 1765 62747700 		.ascii	"btw\000"
 10263 1769 01       		.byte	0x1
 10264 176a AD09     		.2byte	0x9ad
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 251


 10265 176c AD000000 		.4byte	0xad
 10266 1770 40240000 		.4byte	.LLST144
 10267 1774 11       		.uleb128 0x11
 10268 1775 627700   		.ascii	"bw\000"
 10269 1778 01       		.byte	0x1
 10270 1779 AE09     		.2byte	0x9ae
 10271 177b 25170000 		.4byte	0x1725
 10272 177f 77240000 		.4byte	.LLST145
 10273 1783 12       		.uleb128 0x12
 10274 1784 72657300 		.ascii	"res\000"
 10275 1788 01       		.byte	0x1
 10276 1789 B109     		.2byte	0x9b1
 10277 178b EF030000 		.4byte	0x3ef
 10278 178f A3240000 		.4byte	.LLST146
 10279 1793 1F       		.uleb128 0x1f
 10280 1794 20030000 		.4byte	.LASF112
 10281 1798 01       		.byte	0x1
 10282 1799 B209     		.2byte	0x9b2
 10283 179b CE000000 		.4byte	0xce
 10284 179f CC240000 		.4byte	.LLST147
 10285 17a3 1F       		.uleb128 0x1f
 10286 17a4 3D010000 		.4byte	.LASF48
 10287 17a8 01       		.byte	0x1
 10288 17a9 B209     		.2byte	0x9b2
 10289 17ab CE000000 		.4byte	0xce
 10290 17af 0B250000 		.4byte	.LLST148
 10291 17b3 1F       		.uleb128 0x1f
 10292 17b4 B0030000 		.4byte	.LASF136
 10293 17b8 01       		.byte	0x1
 10294 17b9 B309     		.2byte	0x9b3
 10295 17bb AD000000 		.4byte	0xad
 10296 17bf 4A250000 		.4byte	.LLST149
 10297 17c3 12       		.uleb128 0x12
 10298 17c4 636300   		.ascii	"cc\000"
 10299 17c7 01       		.byte	0x1
 10300 17c8 B309     		.2byte	0x9b3
 10301 17ca AD000000 		.4byte	0xad
 10302 17ce 73250000 		.4byte	.LLST150
 10303 17d2 1F       		.uleb128 0x1f
 10304 17d3 A9040000 		.4byte	.LASF137
 10305 17d7 01       		.byte	0x1
 10306 17d8 B409     		.2byte	0x9b4
 10307 17da E6040000 		.4byte	0x4e6
 10308 17de BD250000 		.4byte	.LLST151
 10309 17e2 1F       		.uleb128 0x1f
 10310 17e3 4A000000 		.4byte	.LASF133
 10311 17e7 01       		.byte	0x1
 10312 17e8 B509     		.2byte	0x9b5
 10313 17ea B8000000 		.4byte	0xb8
 10314 17ee F3250000 		.4byte	.LLST152
 10315 17f2 21       		.uleb128 0x21
 10316 17f3 22000000 		.4byte	.LVL672
 10317 17f7 F7090000 		.4byte	0x9f7
 10318 17fb 1C       		.uleb128 0x1c
 10319 17fc 6E000000 		.4byte	.LVL677
 10320 1800 FF0E0000 		.4byte	0xeff
 10321 1804 0E180000 		.4byte	0x180e
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 252


 10322 1808 1D       		.uleb128 0x1d
 10323 1809 01       		.uleb128 0x1
 10324 180a 51       		.byte	0x51
 10325 180b 01       		.uleb128 0x1
 10326 180c 30       		.byte	0x30
 10327 180d 00       		.byte	0
 10328 180e 21       		.uleb128 0x21
 10329 180f 7A000000 		.4byte	.LVL680
 10330 1813 FF0E0000 		.4byte	0xeff
 10331 1817 1C       		.uleb128 0x1c
 10332 1818 B8000000 		.4byte	.LVL687
 10333 181c E5080000 		.4byte	0x8e5
 10334 1820 2A180000 		.4byte	0x182a
 10335 1824 1D       		.uleb128 0x1d
 10336 1825 01       		.uleb128 0x1
 10337 1826 51       		.byte	0x51
 10338 1827 01       		.uleb128 0x1
 10339 1828 30       		.byte	0x30
 10340 1829 00       		.byte	0
 10341 182a 1C       		.uleb128 0x1c
 10342 182b D6000000 		.4byte	.LVL688
 10343 182f 8E0C0000 		.4byte	0xc8e
 10344 1833 3E180000 		.4byte	0x183e
 10345 1837 1D       		.uleb128 0x1d
 10346 1838 01       		.uleb128 0x1
 10347 1839 50       		.byte	0x50
 10348 183a 02       		.uleb128 0x2
 10349 183b 7A       		.byte	0x7a
 10350 183c 00       		.sleb128 0
 10351 183d 00       		.byte	0
 10352 183e 1C       		.uleb128 0x1c
 10353 183f 16010000 		.4byte	.LVL697
 10354 1843 00250000 		.4byte	0x2500
 10355 1847 62180000 		.4byte	0x1862
 10356 184b 1D       		.uleb128 0x1d
 10357 184c 01       		.uleb128 0x1
 10358 184d 53       		.byte	0x53
 10359 184e 05       		.uleb128 0x5
 10360 184f 78       		.byte	0x78
 10361 1850 00       		.sleb128 0
 10362 1851 08       		.byte	0x8
 10363 1852 FF       		.byte	0xff
 10364 1853 1A       		.byte	0x1a
 10365 1854 1D       		.uleb128 0x1d
 10366 1855 01       		.uleb128 0x1
 10367 1856 52       		.byte	0x52
 10368 1857 02       		.uleb128 0x2
 10369 1858 7B       		.byte	0x7b
 10370 1859 00       		.sleb128 0
 10371 185a 1D       		.uleb128 0x1d
 10372 185b 01       		.uleb128 0x1
 10373 185c 51       		.byte	0x51
 10374 185d 03       		.uleb128 0x3
 10375 185e 91       		.byte	0x91
 10376 185f 54       		.sleb128 -44
 10377 1860 06       		.byte	0x6
 10378 1861 00       		.byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 253


 10379 1862 1C       		.uleb128 0x1c
 10380 1863 44010000 		.4byte	.LVL702
 10381 1867 7A040000 		.4byte	0x47a
 10382 186b 77180000 		.4byte	0x1877
 10383 186f 1D       		.uleb128 0x1d
 10384 1870 01       		.uleb128 0x1
 10385 1871 52       		.byte	0x52
 10386 1872 03       		.uleb128 0x3
 10387 1873 0A       		.byte	0xa
 10388 1874 0002     		.2byte	0x200
 10389 1876 00       		.byte	0
 10390 1877 1C       		.uleb128 0x1c
 10391 1878 62010000 		.4byte	.LVL706
 10392 187c E5080000 		.4byte	0x8e5
 10393 1880 90180000 		.4byte	0x1890
 10394 1884 1D       		.uleb128 0x1d
 10395 1885 01       		.uleb128 0x1
 10396 1886 51       		.byte	0x51
 10397 1887 01       		.uleb128 0x1
 10398 1888 30       		.byte	0x30
 10399 1889 1D       		.uleb128 0x1d
 10400 188a 01       		.uleb128 0x1
 10401 188b 50       		.byte	0x50
 10402 188c 02       		.uleb128 0x2
 10403 188d 7A       		.byte	0x7a
 10404 188e 00       		.sleb128 0
 10405 188f 00       		.byte	0
 10406 1890 21       		.uleb128 0x21
 10407 1891 9A010000 		.4byte	.LVL710
 10408 1895 E5080000 		.4byte	0x8e5
 10409 1899 1E       		.uleb128 0x1e
 10410 189a C0010000 		.4byte	.LVL711
 10411 189e 7A040000 		.4byte	0x47a
 10412 18a2 1D       		.uleb128 0x1d
 10413 18a3 01       		.uleb128 0x1
 10414 18a4 52       		.byte	0x52
 10415 18a5 02       		.uleb128 0x2
 10416 18a6 78       		.byte	0x78
 10417 18a7 00       		.sleb128 0
 10418 18a8 1D       		.uleb128 0x1d
 10419 18a9 01       		.uleb128 0x1
 10420 18aa 51       		.byte	0x51
 10421 18ab 03       		.uleb128 0x3
 10422 18ac 91       		.byte	0x91
 10423 18ad 54       		.sleb128 -44
 10424 18ae 06       		.byte	0x6
 10425 18af 00       		.byte	0
 10426 18b0 00       		.byte	0
 10427 18b1 23       		.uleb128 0x23
 10428 18b2 A9030000 		.4byte	.LASF138
 10429 18b6 01       		.byte	0x1
 10430 18b7 210A     		.2byte	0xa21
 10431 18b9 EF030000 		.4byte	0x3ef
 10432 18bd 00000000 		.4byte	.LFB32
 10433 18c1 7A000000 		.4byte	.LFE32-.LFB32
 10434 18c5 01       		.uleb128 0x1
 10435 18c6 9C       		.byte	0x9c
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 254


 10436 18c7 2F190000 		.4byte	0x192f
 10437 18cb 11       		.uleb128 0x11
 10438 18cc 667000   		.ascii	"fp\000"
 10439 18cf 01       		.byte	0x1
 10440 18d0 220A     		.2byte	0xa22
 10441 18d2 BA150000 		.4byte	0x15ba
 10442 18d6 3D260000 		.4byte	.LLST153
 10443 18da 12       		.uleb128 0x12
 10444 18db 72657300 		.ascii	"res\000"
 10445 18df 01       		.byte	0x1
 10446 18e0 250A     		.2byte	0xa25
 10447 18e2 EF030000 		.4byte	0x3ef
 10448 18e6 69260000 		.4byte	.LLST154
 10449 18ea 12       		.uleb128 0x12
 10450 18eb 74696D00 		.ascii	"tim\000"
 10451 18ef 01       		.byte	0x1
 10452 18f0 260A     		.2byte	0xa26
 10453 18f2 CE000000 		.4byte	0xce
 10454 18f6 92260000 		.4byte	.LLST155
 10455 18fa 12       		.uleb128 0x12
 10456 18fb 64697200 		.ascii	"dir\000"
 10457 18ff 01       		.byte	0x1
 10458 1900 270A     		.2byte	0xa27
 10459 1902 8C020000 		.4byte	0x28c
 10460 1906 A5260000 		.4byte	.LLST156
 10461 190a 21       		.uleb128 0x21
 10462 190b 0C000000 		.4byte	.LVL723
 10463 190f F7090000 		.4byte	0x9f7
 10464 1913 21       		.uleb128 0x21
 10465 1914 1E000000 		.4byte	.LVL725
 10466 1918 E5080000 		.4byte	0x8e5
 10467 191c 21       		.uleb128 0x21
 10468 191d 56000000 		.4byte	.LVL727
 10469 1921 91250000 		.4byte	0x2591
 10470 1925 21       		.uleb128 0x21
 10471 1926 78000000 		.4byte	.LVL729
 10472 192a ED0B0000 		.4byte	0xbed
 10473 192e 00       		.byte	0
 10474 192f 23       		.uleb128 0x23
 10475 1930 E6020000 		.4byte	.LASF139
 10476 1934 01       		.byte	0x1
 10477 1935 500A     		.2byte	0xa50
 10478 1937 EF030000 		.4byte	0x3ef
 10479 193b 00000000 		.4byte	.LFB33
 10480 193f 1C000000 		.4byte	.LFE33-.LFB33
 10481 1943 01       		.uleb128 0x1
 10482 1944 9C       		.byte	0x9c
 10483 1945 86190000 		.4byte	0x1986
 10484 1949 11       		.uleb128 0x11
 10485 194a 667000   		.ascii	"fp\000"
 10486 194d 01       		.byte	0x1
 10487 194e 510A     		.2byte	0xa51
 10488 1950 BA150000 		.4byte	0x15ba
 10489 1954 B8260000 		.4byte	.LLST157
 10490 1958 12       		.uleb128 0x12
 10491 1959 72657300 		.ascii	"res\000"
 10492 195d 01       		.byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 255


 10493 195e 540A     		.2byte	0xa54
 10494 1960 EF030000 		.4byte	0x3ef
 10495 1964 E4260000 		.4byte	.LLST158
 10496 1968 1C       		.uleb128 0x1c
 10497 1969 08000000 		.4byte	.LVL732
 10498 196d B1180000 		.4byte	0x18b1
 10499 1971 7C190000 		.4byte	0x197c
 10500 1975 1D       		.uleb128 0x1d
 10501 1976 01       		.uleb128 0x1
 10502 1977 50       		.byte	0x50
 10503 1978 02       		.uleb128 0x2
 10504 1979 74       		.byte	0x74
 10505 197a 00       		.sleb128 0
 10506 197b 00       		.byte	0
 10507 197c 21       		.uleb128 0x21
 10508 197d 12000000 		.4byte	.LVL734
 10509 1981 CB060000 		.4byte	0x6cb
 10510 1985 00       		.byte	0
 10511 1986 25       		.uleb128 0x25
 10512 1987 30030000 		.4byte	.LASF140
 10513 198b 01       		.byte	0x1
 10514 198c F40A     		.2byte	0xaf4
 10515 198e EF030000 		.4byte	0x3ef
 10516 1992 00000000 		.4byte	.LFB34
 10517 1996 70010000 		.4byte	.LFE34-.LFB34
 10518 199a 01       		.uleb128 0x1
 10519 199b 9C       		.byte	0x9c
 10520 199c 561A0000 		.4byte	0x1a56
 10521 19a0 11       		.uleb128 0x11
 10522 19a1 667000   		.ascii	"fp\000"
 10523 19a4 01       		.byte	0x1
 10524 19a5 F50A     		.2byte	0xaf5
 10525 19a7 BA150000 		.4byte	0x15ba
 10526 19ab 02270000 		.4byte	.LLST159
 10527 19af 11       		.uleb128 0x11
 10528 19b0 6F667300 		.ascii	"ofs\000"
 10529 19b4 01       		.byte	0x1
 10530 19b5 F60A     		.2byte	0xaf6
 10531 19b7 CE000000 		.4byte	0xce
 10532 19bb 2E270000 		.4byte	.LLST160
 10533 19bf 12       		.uleb128 0x12
 10534 19c0 72657300 		.ascii	"res\000"
 10535 19c4 01       		.byte	0x1
 10536 19c5 F90A     		.2byte	0xaf9
 10537 19c7 EF030000 		.4byte	0x3ef
 10538 19cb 78270000 		.4byte	.LLST161
 10539 19cf 20       		.uleb128 0x20
 10540 19d0 26000000 		.4byte	.LBB6
 10541 19d4 38010000 		.4byte	.LBE6-.LBB6
 10542 19d8 4C1A0000 		.4byte	0x1a4c
 10543 19dc 1F       		.uleb128 0x1f
 10544 19dd 20030000 		.4byte	.LASF112
 10545 19e1 01       		.byte	0x1
 10546 19e2 3C0B     		.2byte	0xb3c
 10547 19e4 CE000000 		.4byte	0xce
 10548 19e8 C2270000 		.4byte	.LLST162
 10549 19ec 12       		.uleb128 0x12
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 256


 10550 19ed 62637300 		.ascii	"bcs\000"
 10551 19f1 01       		.byte	0x1
 10552 19f2 3C0B     		.2byte	0xb3c
 10553 19f4 CE000000 		.4byte	0xce
 10554 19f8 9B280000 		.4byte	.LLST163
 10555 19fc 1F       		.uleb128 0x1f
 10556 19fd 63050000 		.4byte	.LASF141
 10557 1a01 01       		.byte	0x1
 10558 1a02 3C0B     		.2byte	0xb3c
 10559 1a04 CE000000 		.4byte	0xce
 10560 1a08 B9280000 		.4byte	.LLST164
 10561 1a0c 1F       		.uleb128 0x1f
 10562 1a0d 71030000 		.4byte	.LASF142
 10563 1a11 01       		.byte	0x1
 10564 1a12 3C0B     		.2byte	0xb3c
 10565 1a14 CE000000 		.4byte	0xce
 10566 1a18 05290000 		.4byte	.LLST165
 10567 1a1c 1C       		.uleb128 0x1c
 10568 1a1d 80000000 		.4byte	.LVL752
 10569 1a21 FF0E0000 		.4byte	0xeff
 10570 1a25 301A0000 		.4byte	0x1a30
 10571 1a29 1D       		.uleb128 0x1d
 10572 1a2a 01       		.uleb128 0x1
 10573 1a2b 50       		.byte	0x50
 10574 1a2c 02       		.uleb128 0x2
 10575 1a2d 79       		.byte	0x79
 10576 1a2e 00       		.sleb128 0
 10577 1a2f 00       		.byte	0
 10578 1a30 21       		.uleb128 0x21
 10579 1a31 C0000000 		.4byte	.LVL761
 10580 1a35 FF0E0000 		.4byte	0xeff
 10581 1a39 21       		.uleb128 0x21
 10582 1a3a CC000000 		.4byte	.LVL764
 10583 1a3e C80C0000 		.4byte	0xcc8
 10584 1a42 21       		.uleb128 0x21
 10585 1a43 22010000 		.4byte	.LVL774
 10586 1a47 8E0C0000 		.4byte	0xc8e
 10587 1a4b 00       		.byte	0
 10588 1a4c 21       		.uleb128 0x21
 10589 1a4d 16000000 		.4byte	.LVL739
 10590 1a51 F7090000 		.4byte	0x9f7
 10591 1a55 00       		.byte	0
 10592 1a56 23       		.uleb128 0x23
 10593 1a57 BC050000 		.4byte	.LASF143
 10594 1a5b 01       		.byte	0x1
 10595 1a5c 920B     		.2byte	0xb92
 10596 1a5e EF030000 		.4byte	0x3ef
 10597 1a62 00000000 		.4byte	.LFB35
 10598 1a66 6A000000 		.4byte	.LFE35-.LFB35
 10599 1a6a 01       		.uleb128 0x1
 10600 1a6b 9C       		.byte	0x9c
 10601 1a6c F71A0000 		.4byte	0x1af7
 10602 1a70 11       		.uleb128 0x11
 10603 1a71 646A00   		.ascii	"dj\000"
 10604 1a74 01       		.byte	0x1
 10605 1a75 930B     		.2byte	0xb93
 10606 1a77 54060000 		.4byte	0x654
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 257


 10607 1a7b 3B290000 		.4byte	.LLST166
 10608 1a7f 19       		.uleb128 0x19
 10609 1a80 85000000 		.4byte	.LASF93
 10610 1a84 01       		.byte	0x1
 10611 1a85 940B     		.2byte	0xb94
 10612 1a87 3C080000 		.4byte	0x83c
 10613 1a8b 67290000 		.4byte	.LLST167
 10614 1a8f 12       		.uleb128 0x12
 10615 1a90 72657300 		.ascii	"res\000"
 10616 1a94 01       		.byte	0x1
 10617 1a95 970B     		.2byte	0xb97
 10618 1a97 EF030000 		.4byte	0x3ef
 10619 1a9b 92290000 		.4byte	.LLST168
 10620 1a9f 18       		.uleb128 0x18
 10621 1aa0 73666E00 		.ascii	"sfn\000"
 10622 1aa4 01       		.byte	0x1
 10623 1aa5 980B     		.2byte	0xb98
 10624 1aa7 C0150000 		.4byte	0x15c0
 10625 1aab 02       		.uleb128 0x2
 10626 1aac 91       		.byte	0x91
 10627 1aad 64       		.sleb128 -28
 10628 1aae 1C       		.uleb128 0x1c
 10629 1aaf 12000000 		.4byte	.LVL790
 10630 1ab3 390A0000 		.4byte	0xa39
 10631 1ab7 CD1A0000 		.4byte	0x1acd
 10632 1abb 1D       		.uleb128 0x1d
 10633 1abc 01       		.uleb128 0x1
 10634 1abd 52       		.byte	0x52
 10635 1abe 01       		.uleb128 0x1
 10636 1abf 30       		.byte	0x30
 10637 1ac0 1D       		.uleb128 0x1d
 10638 1ac1 01       		.uleb128 0x1
 10639 1ac2 51       		.byte	0x51
 10640 1ac3 02       		.uleb128 0x2
 10641 1ac4 74       		.byte	0x74
 10642 1ac5 00       		.sleb128 0
 10643 1ac6 1D       		.uleb128 0x1d
 10644 1ac7 01       		.uleb128 0x1
 10645 1ac8 50       		.byte	0x50
 10646 1ac9 02       		.uleb128 0x2
 10647 1aca 91       		.byte	0x91
 10648 1acb 5C       		.sleb128 -36
 10649 1acc 00       		.byte	0
 10650 1acd 1C       		.uleb128 0x1c
 10651 1ace 22000000 		.4byte	.LVL792
 10652 1ad2 70110000 		.4byte	0x1170
 10653 1ad6 E11A0000 		.4byte	0x1ae1
 10654 1ada 1D       		.uleb128 0x1d
 10655 1adb 01       		.uleb128 0x1
 10656 1adc 50       		.byte	0x50
 10657 1add 02       		.uleb128 0x2
 10658 1ade 74       		.byte	0x74
 10659 1adf 00       		.sleb128 0
 10660 1ae0 00       		.byte	0
 10661 1ae1 1E       		.uleb128 0x1e
 10662 1ae2 60000000 		.4byte	.LVL795
 10663 1ae6 7A0D0000 		.4byte	0xd7a
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 258


 10664 1aea 1D       		.uleb128 0x1d
 10665 1aeb 01       		.uleb128 0x1
 10666 1aec 51       		.byte	0x51
 10667 1aed 01       		.uleb128 0x1
 10668 1aee 30       		.byte	0x30
 10669 1aef 1D       		.uleb128 0x1d
 10670 1af0 01       		.uleb128 0x1
 10671 1af1 50       		.byte	0x50
 10672 1af2 02       		.uleb128 0x2
 10673 1af3 74       		.byte	0x74
 10674 1af4 00       		.sleb128 0
 10675 1af5 00       		.byte	0
 10676 1af6 00       		.byte	0
 10677 1af7 23       		.uleb128 0x23
 10678 1af8 0B050000 		.4byte	.LASF144
 10679 1afc 01       		.byte	0x1
 10680 1afd BA0B     		.2byte	0xbba
 10681 1aff EF030000 		.4byte	0x3ef
 10682 1b03 00000000 		.4byte	.LFB36
 10683 1b07 5E000000 		.4byte	.LFE36-.LFB36
 10684 1b0b 01       		.uleb128 0x1
 10685 1b0c 9C       		.byte	0x9c
 10686 1b0d B51B0000 		.4byte	0x1bb5
 10687 1b11 11       		.uleb128 0x11
 10688 1b12 646A00   		.ascii	"dj\000"
 10689 1b15 01       		.byte	0x1
 10690 1b16 BB0B     		.2byte	0xbbb
 10691 1b18 54060000 		.4byte	0x654
 10692 1b1c BB290000 		.4byte	.LLST169
 10693 1b20 11       		.uleb128 0x11
 10694 1b21 666E6F00 		.ascii	"fno\000"
 10695 1b25 01       		.byte	0x1
 10696 1b26 BC0B     		.2byte	0xbbc
 10697 1b28 D9080000 		.4byte	0x8d9
 10698 1b2c E7290000 		.4byte	.LLST170
 10699 1b30 12       		.uleb128 0x12
 10700 1b31 72657300 		.ascii	"res\000"
 10701 1b35 01       		.byte	0x1
 10702 1b36 BF0B     		.2byte	0xbbf
 10703 1b38 EF030000 		.4byte	0x3ef
 10704 1b3c 132A0000 		.4byte	.LLST171
 10705 1b40 18       		.uleb128 0x18
 10706 1b41 73666E00 		.ascii	"sfn\000"
 10707 1b45 01       		.byte	0x1
 10708 1b46 C00B     		.2byte	0xbc0
 10709 1b48 C0150000 		.4byte	0x15c0
 10710 1b4c 02       		.uleb128 0x2
 10711 1b4d 91       		.byte	0x91
 10712 1b4e 5C       		.sleb128 -36
 10713 1b4f 21       		.uleb128 0x21
 10714 1b50 10000000 		.4byte	.LVL801
 10715 1b54 F7090000 		.4byte	0x9f7
 10716 1b58 1C       		.uleb128 0x1c
 10717 1b59 20000000 		.4byte	.LVL804
 10718 1b5d 7A0D0000 		.4byte	0xd7a
 10719 1b61 711B0000 		.4byte	0x1b71
 10720 1b65 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 259


 10721 1b66 01       		.uleb128 0x1
 10722 1b67 51       		.byte	0x51
 10723 1b68 01       		.uleb128 0x1
 10724 1b69 30       		.byte	0x30
 10725 1b6a 1D       		.uleb128 0x1d
 10726 1b6b 01       		.uleb128 0x1
 10727 1b6c 50       		.byte	0x50
 10728 1b6d 02       		.uleb128 0x2
 10729 1b6e 74       		.byte	0x74
 10730 1b6f 00       		.sleb128 0
 10731 1b70 00       		.byte	0
 10732 1b71 1C       		.uleb128 0x1c
 10733 1b72 2C000000 		.4byte	.LVL806
 10734 1b76 EC120000 		.4byte	0x12ec
 10735 1b7a 851B0000 		.4byte	0x1b85
 10736 1b7e 1D       		.uleb128 0x1d
 10737 1b7f 01       		.uleb128 0x1
 10738 1b80 50       		.byte	0x50
 10739 1b81 02       		.uleb128 0x2
 10740 1b82 74       		.byte	0x74
 10741 1b83 00       		.sleb128 0
 10742 1b84 00       		.byte	0
 10743 1b85 1C       		.uleb128 0x1c
 10744 1b86 44000000 		.4byte	.LVL810
 10745 1b8a 5C080000 		.4byte	0x85c
 10746 1b8e 9F1B0000 		.4byte	0x1b9f
 10747 1b92 1D       		.uleb128 0x1d
 10748 1b93 01       		.uleb128 0x1
 10749 1b94 51       		.byte	0x51
 10750 1b95 02       		.uleb128 0x2
 10751 1b96 77       		.byte	0x77
 10752 1b97 00       		.sleb128 0
 10753 1b98 1D       		.uleb128 0x1d
 10754 1b99 01       		.uleb128 0x1
 10755 1b9a 50       		.byte	0x50
 10756 1b9b 02       		.uleb128 0x2
 10757 1b9c 74       		.byte	0x74
 10758 1b9d 00       		.sleb128 0
 10759 1b9e 00       		.byte	0
 10760 1b9f 1E       		.uleb128 0x1e
 10761 1ba0 4C000000 		.4byte	.LVL811
 10762 1ba4 E50F0000 		.4byte	0xfe5
 10763 1ba8 1D       		.uleb128 0x1d
 10764 1ba9 01       		.uleb128 0x1
 10765 1baa 51       		.byte	0x51
 10766 1bab 01       		.uleb128 0x1
 10767 1bac 30       		.byte	0x30
 10768 1bad 1D       		.uleb128 0x1d
 10769 1bae 01       		.uleb128 0x1
 10770 1baf 50       		.byte	0x50
 10771 1bb0 02       		.uleb128 0x2
 10772 1bb1 74       		.byte	0x74
 10773 1bb2 00       		.sleb128 0
 10774 1bb3 00       		.byte	0
 10775 1bb4 00       		.byte	0
 10776 1bb5 23       		.uleb128 0x23
 10777 1bb6 6B020000 		.4byte	.LASF145
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 260


 10778 1bba 01       		.byte	0x1
 10779 1bbb E40B     		.2byte	0xbe4
 10780 1bbd EF030000 		.4byte	0x3ef
 10781 1bc1 00000000 		.4byte	.LFB37
 10782 1bc5 3E000000 		.4byte	.LFE37-.LFB37
 10783 1bc9 01       		.uleb128 0x1
 10784 1bca 9C       		.byte	0x9c
 10785 1bcb 661C0000 		.4byte	0x1c66
 10786 1bcf 19       		.uleb128 0x19
 10787 1bd0 85000000 		.4byte	.LASF93
 10788 1bd4 01       		.byte	0x1
 10789 1bd5 E50B     		.2byte	0xbe5
 10790 1bd7 3C080000 		.4byte	0x83c
 10791 1bdb 962A0000 		.4byte	.LLST172
 10792 1bdf 11       		.uleb128 0x11
 10793 1be0 666E6F00 		.ascii	"fno\000"
 10794 1be4 01       		.byte	0x1
 10795 1be5 E60B     		.2byte	0xbe6
 10796 1be7 D9080000 		.4byte	0x8d9
 10797 1beb C12A0000 		.4byte	.LLST173
 10798 1bef 12       		.uleb128 0x12
 10799 1bf0 72657300 		.ascii	"res\000"
 10800 1bf4 01       		.byte	0x1
 10801 1bf5 E90B     		.2byte	0xbe9
 10802 1bf7 EF030000 		.4byte	0x3ef
 10803 1bfb ED2A0000 		.4byte	.LLST174
 10804 1bff 18       		.uleb128 0x18
 10805 1c00 646A00   		.ascii	"dj\000"
 10806 1c03 01       		.byte	0x1
 10807 1c04 EA0B     		.2byte	0xbea
 10808 1c06 03030000 		.4byte	0x303
 10809 1c0a 02       		.uleb128 0x2
 10810 1c0b 91       		.byte	0x91
 10811 1c0c 54       		.sleb128 -44
 10812 1c0d 18       		.uleb128 0x18
 10813 1c0e 73666E00 		.ascii	"sfn\000"
 10814 1c12 01       		.byte	0x1
 10815 1c13 EB0B     		.2byte	0xbeb
 10816 1c15 C0150000 		.4byte	0x15c0
 10817 1c19 02       		.uleb128 0x2
 10818 1c1a 91       		.byte	0x91
 10819 1c1b 48       		.sleb128 -56
 10820 1c1c 1C       		.uleb128 0x1c
 10821 1c1d 12000000 		.4byte	.LVL820
 10822 1c21 390A0000 		.4byte	0xa39
 10823 1c25 3B1C0000 		.4byte	0x1c3b
 10824 1c29 1D       		.uleb128 0x1d
 10825 1c2a 01       		.uleb128 0x1
 10826 1c2b 52       		.byte	0x52
 10827 1c2c 01       		.uleb128 0x1
 10828 1c2d 30       		.byte	0x30
 10829 1c2e 1D       		.uleb128 0x1d
 10830 1c2f 01       		.uleb128 0x1
 10831 1c30 51       		.byte	0x51
 10832 1c31 02       		.uleb128 0x2
 10833 1c32 91       		.byte	0x91
 10834 1c33 54       		.sleb128 -44
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 261


 10835 1c34 1D       		.uleb128 0x1d
 10836 1c35 01       		.uleb128 0x1
 10837 1c36 50       		.byte	0x50
 10838 1c37 02       		.uleb128 0x2
 10839 1c38 91       		.byte	0x91
 10840 1c39 44       		.sleb128 -60
 10841 1c3a 00       		.byte	0
 10842 1c3b 1C       		.uleb128 0x1c
 10843 1c3c 22000000 		.4byte	.LVL823
 10844 1c40 70110000 		.4byte	0x1170
 10845 1c44 4F1C0000 		.4byte	0x1c4f
 10846 1c48 1D       		.uleb128 0x1d
 10847 1c49 01       		.uleb128 0x1
 10848 1c4a 50       		.byte	0x50
 10849 1c4b 02       		.uleb128 0x2
 10850 1c4c 91       		.byte	0x91
 10851 1c4d 54       		.sleb128 -44
 10852 1c4e 00       		.byte	0
 10853 1c4f 1E       		.uleb128 0x1e
 10854 1c50 34000000 		.4byte	.LVL826
 10855 1c54 5C080000 		.4byte	0x85c
 10856 1c58 1D       		.uleb128 0x1d
 10857 1c59 01       		.uleb128 0x1
 10858 1c5a 51       		.byte	0x51
 10859 1c5b 02       		.uleb128 0x2
 10860 1c5c 75       		.byte	0x75
 10861 1c5d 00       		.sleb128 0
 10862 1c5e 1D       		.uleb128 0x1d
 10863 1c5f 01       		.uleb128 0x1
 10864 1c60 50       		.byte	0x50
 10865 1c61 02       		.uleb128 0x2
 10866 1c62 91       		.byte	0x91
 10867 1c63 54       		.sleb128 -44
 10868 1c64 00       		.byte	0
 10869 1c65 00       		.byte	0
 10870 1c66 23       		.uleb128 0x23
 10871 1c67 61040000 		.4byte	.LASF146
 10872 1c6b 01       		.byte	0x1
 10873 1c6c 050C     		.2byte	0xc05
 10874 1c6e EF030000 		.4byte	0x3ef
 10875 1c72 00000000 		.4byte	.LFB38
 10876 1c76 00010000 		.4byte	.LFE38-.LFB38
 10877 1c7a 01       		.uleb128 0x1
 10878 1c7b 9C       		.byte	0x9c
 10879 1c7c 6F1D0000 		.4byte	0x1d6f
 10880 1c80 19       		.uleb128 0x19
 10881 1c81 85000000 		.4byte	.LASF93
 10882 1c85 01       		.byte	0x1
 10883 1c86 060C     		.2byte	0xc06
 10884 1c88 3C080000 		.4byte	0x83c
 10885 1c8c 422B0000 		.4byte	.LLST175
 10886 1c90 19       		.uleb128 0x19
 10887 1c91 F8030000 		.4byte	.LASF108
 10888 1c95 01       		.byte	0x1
 10889 1c96 070C     		.2byte	0xc07
 10890 1c98 6F1D0000 		.4byte	0x1d6f
 10891 1c9c 6D2B0000 		.4byte	.LLST176
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 262


 10892 1ca0 19       		.uleb128 0x19
 10893 1ca1 32040000 		.4byte	.LASF147
 10894 1ca5 01       		.byte	0x1
 10895 1ca6 080C     		.2byte	0xc08
 10896 1ca8 E70B0000 		.4byte	0xbe7
 10897 1cac 992B0000 		.4byte	.LLST177
 10898 1cb0 12       		.uleb128 0x12
 10899 1cb1 72657300 		.ascii	"res\000"
 10900 1cb5 01       		.byte	0x1
 10901 1cb6 0B0C     		.2byte	0xc0b
 10902 1cb8 EF030000 		.4byte	0x3ef
 10903 1cbc D02B0000 		.4byte	.LLST178
 10904 1cc0 12       		.uleb128 0x12
 10905 1cc1 6E00     		.ascii	"n\000"
 10906 1cc3 01       		.byte	0x1
 10907 1cc4 0C0C     		.2byte	0xc0c
 10908 1cc6 CE000000 		.4byte	0xce
 10909 1cca 462C0000 		.4byte	.LLST179
 10910 1cce 1F       		.uleb128 0x1f
 10911 1ccf 20030000 		.4byte	.LASF112
 10912 1cd3 01       		.byte	0x1
 10913 1cd4 0C0C     		.2byte	0xc0c
 10914 1cd6 CE000000 		.4byte	0xce
 10915 1cda 7C2C0000 		.4byte	.LLST180
 10916 1cde 1F       		.uleb128 0x1f
 10917 1cdf 3D010000 		.4byte	.LASF48
 10918 1ce3 01       		.byte	0x1
 10919 1ce4 0C0C     		.2byte	0xc0c
 10920 1ce6 CE000000 		.4byte	0xce
 10921 1cea 8F2C0000 		.4byte	.LLST181
 10922 1cee 1F       		.uleb128 0x1f
 10923 1cef 58060000 		.4byte	.LASF103
 10924 1cf3 01       		.byte	0x1
 10925 1cf4 0C0C     		.2byte	0xc0c
 10926 1cf6 CE000000 		.4byte	0xce
 10927 1cfa C52C0000 		.4byte	.LLST182
 10928 1cfe 12       		.uleb128 0x12
 10929 1cff 6900     		.ascii	"i\000"
 10930 1d01 01       		.byte	0x1
 10931 1d02 0D0C     		.2byte	0xc0d
 10932 1d04 AD000000 		.4byte	0xad
 10933 1d08 E32C0000 		.4byte	.LLST183
 10934 1d0c 12       		.uleb128 0x12
 10935 1d0d 66617400 		.ascii	"fat\000"
 10936 1d11 01       		.byte	0x1
 10937 1d12 0E0C     		.2byte	0xc0e
 10938 1d14 B8000000 		.4byte	0xb8
 10939 1d18 1B2D0000 		.4byte	.LLST184
 10940 1d1c 12       		.uleb128 0x12
 10941 1d1d 7000     		.ascii	"p\000"
 10942 1d1f 01       		.byte	0x1
 10943 1d20 0E0C     		.2byte	0xc0e
 10944 1d22 8C020000 		.4byte	0x28c
 10945 1d26 A02D0000 		.4byte	.LLST185
 10946 1d2a 1C       		.uleb128 0x1c
 10947 1d2b 1E000000 		.4byte	.LVL835
 10948 1d2f 390A0000 		.4byte	0xa39
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 263


 10949 1d33 491D0000 		.4byte	0x1d49
 10950 1d37 1D       		.uleb128 0x1d
 10951 1d38 01       		.uleb128 0x1
 10952 1d39 52       		.byte	0x52
 10953 1d3a 01       		.uleb128 0x1
 10954 1d3b 30       		.byte	0x30
 10955 1d3c 1D       		.uleb128 0x1d
 10956 1d3d 01       		.uleb128 0x1
 10957 1d3e 51       		.byte	0x51
 10958 1d3f 02       		.uleb128 0x2
 10959 1d40 75       		.byte	0x75
 10960 1d41 00       		.sleb128 0
 10961 1d42 1D       		.uleb128 0x1d
 10962 1d43 01       		.uleb128 0x1
 10963 1d44 50       		.byte	0x50
 10964 1d45 02       		.uleb128 0x2
 10965 1d46 91       		.byte	0x91
 10966 1d47 54       		.sleb128 -44
 10967 1d48 00       		.byte	0
 10968 1d49 1C       		.uleb128 0x1c
 10969 1d4a 48000000 		.4byte	.LVL841
 10970 1d4e C80C0000 		.4byte	0xcc8
 10971 1d52 5D1D0000 		.4byte	0x1d5d
 10972 1d56 1D       		.uleb128 0x1d
 10973 1d57 01       		.uleb128 0x1
 10974 1d58 51       		.byte	0x51
 10975 1d59 02       		.uleb128 0x2
 10976 1d5a 74       		.byte	0x74
 10977 1d5b 00       		.sleb128 0
 10978 1d5c 00       		.byte	0
 10979 1d5d 1E       		.uleb128 0x1e
 10980 1d5e 86000000 		.4byte	.LVL852
 10981 1d62 E5080000 		.4byte	0x8e5
 10982 1d66 1D       		.uleb128 0x1d
 10983 1d67 01       		.uleb128 0x1
 10984 1d68 51       		.byte	0x51
 10985 1d69 03       		.uleb128 0x3
 10986 1d6a 7D       		.byte	0x7d
 10987 1d6b 00       		.sleb128 0
 10988 1d6c 06       		.byte	0x6
 10989 1d6d 00       		.byte	0
 10990 1d6e 00       		.byte	0
 10991 1d6f 0B       		.uleb128 0xb
 10992 1d70 04       		.byte	0x4
 10993 1d71 CE000000 		.4byte	0xce
 10994 1d75 23       		.uleb128 0x23
 10995 1d76 28060000 		.4byte	.LASF148
 10996 1d7a 01       		.byte	0x1
 10997 1d7b 460C     		.2byte	0xc46
 10998 1d7d EF030000 		.4byte	0x3ef
 10999 1d81 00000000 		.4byte	.LFB39
 11000 1d85 9C000000 		.4byte	.LFE39-.LFB39
 11001 1d89 01       		.uleb128 0x1
 11002 1d8a 9C       		.byte	0x9c
 11003 1d8b 011E0000 		.4byte	0x1e01
 11004 1d8f 11       		.uleb128 0x11
 11005 1d90 667000   		.ascii	"fp\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 264


 11006 1d93 01       		.byte	0x1
 11007 1d94 470C     		.2byte	0xc47
 11008 1d96 BA150000 		.4byte	0x15ba
 11009 1d9a CA2D0000 		.4byte	.LLST186
 11010 1d9e 12       		.uleb128 0x12
 11011 1d9f 72657300 		.ascii	"res\000"
 11012 1da3 01       		.byte	0x1
 11013 1da4 4A0C     		.2byte	0xc4a
 11014 1da6 EF030000 		.4byte	0x3ef
 11015 1daa F62D0000 		.4byte	.LLST187
 11016 1dae 12       		.uleb128 0x12
 11017 1daf 6E636C00 		.ascii	"ncl\000"
 11018 1db3 01       		.byte	0x1
 11019 1db4 4B0C     		.2byte	0xc4b
 11020 1db6 CE000000 		.4byte	0xce
 11021 1dba 622E0000 		.4byte	.LLST188
 11022 1dbe 21       		.uleb128 0x21
 11023 1dbf 0C000000 		.4byte	.LVL879
 11024 1dc3 F7090000 		.4byte	0x9f7
 11025 1dc7 21       		.uleb128 0x21
 11026 1dc8 46000000 		.4byte	.LVL882
 11027 1dcc 62130000 		.4byte	0x1362
 11028 1dd0 21       		.uleb128 0x21
 11029 1dd1 56000000 		.4byte	.LVL885
 11030 1dd5 C80C0000 		.4byte	0xcc8
 11031 1dd9 1C       		.uleb128 0x1c
 11032 1dda 78000000 		.4byte	.LVL890
 11033 1dde 3C0E0000 		.4byte	0xe3c
 11034 1de2 F01D0000 		.4byte	0x1df0
 11035 1de6 1D       		.uleb128 0x1d
 11036 1de7 01       		.uleb128 0x1
 11037 1de8 52       		.byte	0x52
 11038 1de9 05       		.uleb128 0x5
 11039 1dea 0C       		.byte	0xc
 11040 1deb FFFFFF0F 		.4byte	0xfffffff
 11041 1def 00       		.byte	0
 11042 1df0 1E       		.uleb128 0x1e
 11043 1df1 84000000 		.4byte	.LVL893
 11044 1df5 62130000 		.4byte	0x1362
 11045 1df9 1D       		.uleb128 0x1d
 11046 1dfa 01       		.uleb128 0x1
 11047 1dfb 51       		.byte	0x51
 11048 1dfc 02       		.uleb128 0x2
 11049 1dfd 76       		.byte	0x76
 11050 1dfe 00       		.sleb128 0
 11051 1dff 00       		.byte	0
 11052 1e00 00       		.byte	0
 11053 1e01 23       		.uleb128 0x23
 11054 1e02 98040000 		.4byte	.LASF149
 11055 1e06 01       		.byte	0x1
 11056 1e07 760C     		.2byte	0xc76
 11057 1e09 EF030000 		.4byte	0x3ef
 11058 1e0d 00000000 		.4byte	.LFB40
 11059 1e11 C6000000 		.4byte	.LFE40-.LFB40
 11060 1e15 01       		.uleb128 0x1
 11061 1e16 9C       		.byte	0x9c
 11062 1e17 571F0000 		.4byte	0x1f57
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 265


 11063 1e1b 19       		.uleb128 0x19
 11064 1e1c 85000000 		.4byte	.LASF93
 11065 1e20 01       		.byte	0x1
 11066 1e21 770C     		.2byte	0xc77
 11067 1e23 3C080000 		.4byte	0x83c
 11068 1e27 802E0000 		.4byte	.LLST189
 11069 1e2b 12       		.uleb128 0x12
 11070 1e2c 72657300 		.ascii	"res\000"
 11071 1e30 01       		.byte	0x1
 11072 1e31 7A0C     		.2byte	0xc7a
 11073 1e33 EF030000 		.4byte	0x3ef
 11074 1e37 AC2E0000 		.4byte	.LLST190
 11075 1e3b 18       		.uleb128 0x18
 11076 1e3c 646A00   		.ascii	"dj\000"
 11077 1e3f 01       		.byte	0x1
 11078 1e40 7B0C     		.2byte	0xc7b
 11079 1e42 03030000 		.4byte	0x303
 11080 1e46 02       		.uleb128 0x2
 11081 1e47 91       		.byte	0x91
 11082 1e48 54       		.sleb128 -44
 11083 1e49 18       		.uleb128 0x18
 11084 1e4a 73646A00 		.ascii	"sdj\000"
 11085 1e4e 01       		.byte	0x1
 11086 1e4f 7B0C     		.2byte	0xc7b
 11087 1e51 03030000 		.4byte	0x303
 11088 1e55 03       		.uleb128 0x3
 11089 1e56 91       		.byte	0x91
 11090 1e57 B87F     		.sleb128 -72
 11091 1e59 12       		.uleb128 0x12
 11092 1e5a 64697200 		.ascii	"dir\000"
 11093 1e5e 01       		.byte	0x1
 11094 1e5f 7C0C     		.2byte	0xc7c
 11095 1e61 8C020000 		.4byte	0x28c
 11096 1e65 382F0000 		.4byte	.LLST191
 11097 1e69 1F       		.uleb128 0x1f
 11098 1e6a 17000000 		.4byte	.LASF150
 11099 1e6e 01       		.byte	0x1
 11100 1e6f 7D0C     		.2byte	0xc7d
 11101 1e71 CE000000 		.4byte	0xce
 11102 1e75 632F0000 		.4byte	.LLST192
 11103 1e79 18       		.uleb128 0x18
 11104 1e7a 73666E00 		.ascii	"sfn\000"
 11105 1e7e 01       		.byte	0x1
 11106 1e7f 7E0C     		.2byte	0xc7e
 11107 1e81 C0150000 		.4byte	0x15c0
 11108 1e85 03       		.uleb128 0x3
 11109 1e86 91       		.byte	0x91
 11110 1e87 AC7F     		.sleb128 -84
 11111 1e89 1C       		.uleb128 0x1c
 11112 1e8a 10000000 		.4byte	.LVL900
 11113 1e8e 390A0000 		.4byte	0xa39
 11114 1e92 A91E0000 		.4byte	0x1ea9
 11115 1e96 1D       		.uleb128 0x1d
 11116 1e97 01       		.uleb128 0x1
 11117 1e98 52       		.byte	0x52
 11118 1e99 01       		.uleb128 0x1
 11119 1e9a 31       		.byte	0x31
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 266


 11120 1e9b 1D       		.uleb128 0x1d
 11121 1e9c 01       		.uleb128 0x1
 11122 1e9d 51       		.byte	0x51
 11123 1e9e 02       		.uleb128 0x2
 11124 1e9f 91       		.byte	0x91
 11125 1ea0 54       		.sleb128 -44
 11126 1ea1 1D       		.uleb128 0x1d
 11127 1ea2 01       		.uleb128 0x1
 11128 1ea3 50       		.byte	0x50
 11129 1ea4 03       		.uleb128 0x3
 11130 1ea5 91       		.byte	0x91
 11131 1ea6 A47F     		.sleb128 -92
 11132 1ea8 00       		.byte	0
 11133 1ea9 1C       		.uleb128 0x1c
 11134 1eaa 20000000 		.4byte	.LVL903
 11135 1eae 70110000 		.4byte	0x1170
 11136 1eb2 BD1E0000 		.4byte	0x1ebd
 11137 1eb6 1D       		.uleb128 0x1d
 11138 1eb7 01       		.uleb128 0x1
 11139 1eb8 50       		.byte	0x50
 11140 1eb9 02       		.uleb128 0x2
 11141 1eba 91       		.byte	0x91
 11142 1ebb 54       		.sleb128 -44
 11143 1ebc 00       		.byte	0
 11144 1ebd 1C       		.uleb128 0x1c
 11145 1ebe 2C000000 		.4byte	.LVL906
 11146 1ec2 FF050000 		.4byte	0x5ff
 11147 1ec6 D61E0000 		.4byte	0x1ed6
 11148 1eca 1D       		.uleb128 0x1d
 11149 1ecb 01       		.uleb128 0x1
 11150 1ecc 51       		.byte	0x51
 11151 1ecd 01       		.uleb128 0x1
 11152 1ece 32       		.byte	0x32
 11153 1ecf 1D       		.uleb128 0x1d
 11154 1ed0 01       		.uleb128 0x1
 11155 1ed1 50       		.byte	0x50
 11156 1ed2 02       		.uleb128 0x2
 11157 1ed3 91       		.byte	0x91
 11158 1ed4 54       		.sleb128 -44
 11159 1ed5 00       		.byte	0
 11160 1ed6 1C       		.uleb128 0x1c
 11161 1ed7 74000000 		.4byte	.LVL914
 11162 1edb 7A040000 		.4byte	0x47a
 11163 1edf F61E0000 		.4byte	0x1ef6
 11164 1ee3 1D       		.uleb128 0x1d
 11165 1ee4 01       		.uleb128 0x1
 11166 1ee5 52       		.byte	0x52
 11167 1ee6 01       		.uleb128 0x1
 11168 1ee7 4C       		.byte	0x4c
 11169 1ee8 1D       		.uleb128 0x1d
 11170 1ee9 01       		.uleb128 0x1
 11171 1eea 51       		.byte	0x51
 11172 1eeb 02       		.uleb128 0x2
 11173 1eec 91       		.byte	0x91
 11174 1eed 54       		.sleb128 -44
 11175 1eee 1D       		.uleb128 0x1d
 11176 1eef 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 267


 11177 1ef0 50       		.byte	0x50
 11178 1ef1 03       		.uleb128 0x3
 11179 1ef2 91       		.byte	0x91
 11180 1ef3 B87F     		.sleb128 -72
 11181 1ef5 00       		.byte	0
 11182 1ef6 1C       		.uleb128 0x1c
 11183 1ef7 7E000000 		.4byte	.LVL915
 11184 1efb 7A0D0000 		.4byte	0xd7a
 11185 1eff 101F0000 		.4byte	0x1f10
 11186 1f03 1D       		.uleb128 0x1d
 11187 1f04 01       		.uleb128 0x1
 11188 1f05 51       		.byte	0x51
 11189 1f06 01       		.uleb128 0x1
 11190 1f07 32       		.byte	0x32
 11191 1f08 1D       		.uleb128 0x1d
 11192 1f09 01       		.uleb128 0x1
 11193 1f0a 50       		.byte	0x50
 11194 1f0b 03       		.uleb128 0x3
 11195 1f0c 91       		.byte	0x91
 11196 1f0d B87F     		.sleb128 -72
 11197 1f0f 00       		.byte	0
 11198 1f10 1C       		.uleb128 0x1c
 11199 1f11 88000000 		.4byte	.LVL918
 11200 1f15 EC120000 		.4byte	0x12ec
 11201 1f19 251F0000 		.4byte	0x1f25
 11202 1f1d 1D       		.uleb128 0x1d
 11203 1f1e 01       		.uleb128 0x1
 11204 1f1f 50       		.byte	0x50
 11205 1f20 03       		.uleb128 0x3
 11206 1f21 91       		.byte	0x91
 11207 1f22 B87F     		.sleb128 -72
 11208 1f24 00       		.byte	0
 11209 1f25 1C       		.uleb128 0x1c
 11210 1f26 A2000000 		.4byte	.LVL922
 11211 1f2a E50D0000 		.4byte	0xde5
 11212 1f2e 391F0000 		.4byte	0x1f39
 11213 1f32 1D       		.uleb128 0x1d
 11214 1f33 01       		.uleb128 0x1
 11215 1f34 50       		.byte	0x50
 11216 1f35 02       		.uleb128 0x2
 11217 1f36 91       		.byte	0x91
 11218 1f37 54       		.sleb128 -44
 11219 1f38 00       		.byte	0
 11220 1f39 1C       		.uleb128 0x1c
 11221 1f3a B2000000 		.4byte	.LVL925
 11222 1f3e 62130000 		.4byte	0x1362
 11223 1f42 4D1F0000 		.4byte	0x1f4d
 11224 1f46 1D       		.uleb128 0x1d
 11225 1f47 01       		.uleb128 0x1
 11226 1f48 51       		.byte	0x51
 11227 1f49 02       		.uleb128 0x2
 11228 1f4a 75       		.byte	0x75
 11229 1f4b 00       		.sleb128 0
 11230 1f4c 00       		.byte	0
 11231 1f4d 21       		.uleb128 0x21
 11232 1f4e BE000000 		.4byte	.LVL927
 11233 1f52 ED0B0000 		.4byte	0xbed
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 268


 11234 1f56 00       		.byte	0
 11235 1f57 23       		.uleb128 0x23
 11236 1f58 9B030000 		.4byte	.LASF151
 11237 1f5c 01       		.byte	0x1
 11238 1f5d BA0C     		.2byte	0xcba
 11239 1f5f EF030000 		.4byte	0x3ef
 11240 1f63 00000000 		.4byte	.LFB41
 11241 1f67 A6010000 		.4byte	.LFE41-.LFB41
 11242 1f6b 01       		.uleb128 0x1
 11243 1f6c 9C       		.byte	0x9c
 11244 1f6d 53210000 		.4byte	0x2153
 11245 1f71 19       		.uleb128 0x19
 11246 1f72 85000000 		.4byte	.LASF93
 11247 1f76 01       		.byte	0x1
 11248 1f77 BB0C     		.2byte	0xcbb
 11249 1f79 3C080000 		.4byte	0x83c
 11250 1f7d 762F0000 		.4byte	.LLST193
 11251 1f81 12       		.uleb128 0x12
 11252 1f82 72657300 		.ascii	"res\000"
 11253 1f86 01       		.byte	0x1
 11254 1f87 BE0C     		.2byte	0xcbe
 11255 1f89 EF030000 		.4byte	0x3ef
 11256 1f8d AF2F0000 		.4byte	.LLST194
 11257 1f91 18       		.uleb128 0x18
 11258 1f92 646A00   		.ascii	"dj\000"
 11259 1f95 01       		.byte	0x1
 11260 1f96 BF0C     		.2byte	0xcbf
 11261 1f98 03030000 		.4byte	0x303
 11262 1f9c 03       		.uleb128 0x3
 11263 1f9d 91       		.byte	0x91
 11264 1f9e BC7F     		.sleb128 -68
 11265 1fa0 12       		.uleb128 0x12
 11266 1fa1 64697200 		.ascii	"dir\000"
 11267 1fa5 01       		.byte	0x1
 11268 1fa6 C00C     		.2byte	0xcc0
 11269 1fa8 8C020000 		.4byte	0x28c
 11270 1fac 26300000 		.4byte	.LLST195
 11271 1fb0 12       		.uleb128 0x12
 11272 1fb1 6E00     		.ascii	"n\000"
 11273 1fb3 01       		.byte	0x1
 11274 1fb4 C00C     		.2byte	0xcc0
 11275 1fb6 B8000000 		.4byte	0xb8
 11276 1fba 4F300000 		.4byte	.LLST196
 11277 1fbe 12       		.uleb128 0x12
 11278 1fbf 64736300 		.ascii	"dsc\000"
 11279 1fc3 01       		.byte	0x1
 11280 1fc4 C10C     		.2byte	0xcc1
 11281 1fc6 CE000000 		.4byte	0xce
 11282 1fca 96300000 		.4byte	.LLST197
 11283 1fce 12       		.uleb128 0x12
 11284 1fcf 64636C00 		.ascii	"dcl\000"
 11285 1fd3 01       		.byte	0x1
 11286 1fd4 C10C     		.2byte	0xcc1
 11287 1fd6 CE000000 		.4byte	0xce
 11288 1fda D5300000 		.4byte	.LLST198
 11289 1fde 12       		.uleb128 0x12
 11290 1fdf 70636C00 		.ascii	"pcl\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 269


 11291 1fe3 01       		.byte	0x1
 11292 1fe4 C10C     		.2byte	0xcc1
 11293 1fe6 CE000000 		.4byte	0xce
 11294 1fea FE300000 		.4byte	.LLST199
 11295 1fee 12       		.uleb128 0x12
 11296 1fef 74696D00 		.ascii	"tim\000"
 11297 1ff3 01       		.byte	0x1
 11298 1ff4 C10C     		.2byte	0xcc1
 11299 1ff6 CE000000 		.4byte	0xce
 11300 1ffa 11310000 		.4byte	.LLST200
 11301 1ffe 18       		.uleb128 0x18
 11302 1fff 73666E00 		.ascii	"sfn\000"
 11303 2003 01       		.byte	0x1
 11304 2004 C20C     		.2byte	0xcc2
 11305 2006 C0150000 		.4byte	0x15c0
 11306 200a 03       		.uleb128 0x3
 11307 200b 91       		.byte	0x91
 11308 200c B07F     		.sleb128 -80
 11309 200e 21       		.uleb128 0x21
 11310 200f 14000000 		.4byte	.LVL931
 11311 2013 91250000 		.4byte	0x2591
 11312 2017 1C       		.uleb128 0x1c
 11313 2018 20000000 		.4byte	.LVL934
 11314 201c 390A0000 		.4byte	0xa39
 11315 2020 38200000 		.4byte	0x2038
 11316 2024 1D       		.uleb128 0x1d
 11317 2025 01       		.uleb128 0x1
 11318 2026 52       		.byte	0x52
 11319 2027 01       		.uleb128 0x1
 11320 2028 31       		.byte	0x31
 11321 2029 1D       		.uleb128 0x1d
 11322 202a 01       		.uleb128 0x1
 11323 202b 51       		.byte	0x51
 11324 202c 03       		.uleb128 0x3
 11325 202d 91       		.byte	0x91
 11326 202e BC7F     		.sleb128 -68
 11327 2030 1D       		.uleb128 0x1d
 11328 2031 01       		.uleb128 0x1
 11329 2032 50       		.byte	0x50
 11330 2033 03       		.uleb128 0x3
 11331 2034 91       		.byte	0x91
 11332 2035 AC7F     		.sleb128 -84
 11333 2037 00       		.byte	0
 11334 2038 1C       		.uleb128 0x1c
 11335 2039 32000000 		.4byte	.LVL937
 11336 203d 70110000 		.4byte	0x1170
 11337 2041 4D200000 		.4byte	0x204d
 11338 2045 1D       		.uleb128 0x1d
 11339 2046 01       		.uleb128 0x1
 11340 2047 50       		.byte	0x50
 11341 2048 03       		.uleb128 0x3
 11342 2049 91       		.byte	0x91
 11343 204a BC7F     		.sleb128 -68
 11344 204c 00       		.byte	0
 11345 204d 1C       		.uleb128 0x1c
 11346 204e 46000000 		.4byte	.LVL940
 11347 2052 FF0E0000 		.4byte	0xeff
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 270


 11348 2056 60200000 		.4byte	0x2060
 11349 205a 1D       		.uleb128 0x1d
 11350 205b 01       		.uleb128 0x1
 11351 205c 51       		.byte	0x51
 11352 205d 01       		.uleb128 0x1
 11353 205e 30       		.byte	0x30
 11354 205f 00       		.byte	0
 11355 2060 1C       		.uleb128 0x1c
 11356 2061 6A000000 		.4byte	.LVL947
 11357 2065 E5080000 		.4byte	0x8e5
 11358 2069 73200000 		.4byte	0x2073
 11359 206d 1D       		.uleb128 0x1d
 11360 206e 01       		.uleb128 0x1
 11361 206f 51       		.byte	0x51
 11362 2070 01       		.uleb128 0x1
 11363 2071 30       		.byte	0x30
 11364 2072 00       		.byte	0
 11365 2073 1C       		.uleb128 0x1c
 11366 2074 7A000000 		.4byte	.LVL949
 11367 2078 8E0C0000 		.4byte	0xc8e
 11368 207c 8D200000 		.4byte	0x208d
 11369 2080 1D       		.uleb128 0x1d
 11370 2081 01       		.uleb128 0x1
 11371 2082 51       		.byte	0x51
 11372 2083 02       		.uleb128 0x2
 11373 2084 78       		.byte	0x78
 11374 2085 00       		.sleb128 0
 11375 2086 1D       		.uleb128 0x1d
 11376 2087 01       		.uleb128 0x1
 11377 2088 50       		.byte	0x50
 11378 2089 02       		.uleb128 0x2
 11379 208a 76       		.byte	0x76
 11380 208b 00       		.sleb128 0
 11381 208c 00       		.byte	0
 11382 208d 1C       		.uleb128 0x1c
 11383 208e 8E000000 		.4byte	.LVL953
 11384 2092 F1040000 		.4byte	0x4f1
 11385 2096 AD200000 		.4byte	0x20ad
 11386 209a 1D       		.uleb128 0x1d
 11387 209b 01       		.uleb128 0x1
 11388 209c 52       		.byte	0x52
 11389 209d 03       		.uleb128 0x3
 11390 209e 0A       		.byte	0xa
 11391 209f 0002     		.2byte	0x200
 11392 20a1 1D       		.uleb128 0x1d
 11393 20a2 01       		.uleb128 0x1
 11394 20a3 51       		.byte	0x51
 11395 20a4 01       		.uleb128 0x1
 11396 20a5 30       		.byte	0x30
 11397 20a6 1D       		.uleb128 0x1d
 11398 20a7 01       		.uleb128 0x1
 11399 20a8 50       		.byte	0x50
 11400 20a9 02       		.uleb128 0x2
 11401 20aa 7A       		.byte	0x7a
 11402 20ab 00       		.sleb128 0
 11403 20ac 00       		.byte	0
 11404 20ad 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 271


 11405 20ae 98000000 		.4byte	.LVL954
 11406 20b2 F1040000 		.4byte	0x4f1
 11407 20b6 CC200000 		.4byte	0x20cc
 11408 20ba 1D       		.uleb128 0x1d
 11409 20bb 01       		.uleb128 0x1
 11410 20bc 52       		.byte	0x52
 11411 20bd 01       		.uleb128 0x1
 11412 20be 3B       		.byte	0x3b
 11413 20bf 1D       		.uleb128 0x1d
 11414 20c0 01       		.uleb128 0x1
 11415 20c1 51       		.byte	0x51
 11416 20c2 02       		.uleb128 0x2
 11417 20c3 08       		.byte	0x8
 11418 20c4 20       		.byte	0x20
 11419 20c5 1D       		.uleb128 0x1d
 11420 20c6 01       		.uleb128 0x1
 11421 20c7 50       		.byte	0x50
 11422 20c8 02       		.uleb128 0x2
 11423 20c9 7A       		.byte	0x7a
 11424 20ca 00       		.sleb128 0
 11425 20cb 00       		.byte	0
 11426 20cc 1C       		.uleb128 0x1c
 11427 20cd E4000000 		.4byte	.LVL955
 11428 20d1 7A040000 		.4byte	0x47a
 11429 20d5 ED200000 		.4byte	0x20ed
 11430 20d9 1D       		.uleb128 0x1d
 11431 20da 01       		.uleb128 0x1
 11432 20db 52       		.byte	0x52
 11433 20dc 02       		.uleb128 0x2
 11434 20dd 08       		.byte	0x8
 11435 20de 20       		.byte	0x20
 11436 20df 1D       		.uleb128 0x1d
 11437 20e0 01       		.uleb128 0x1
 11438 20e1 51       		.byte	0x51
 11439 20e2 02       		.uleb128 0x2
 11440 20e3 7A       		.byte	0x7a
 11441 20e4 00       		.sleb128 0
 11442 20e5 1D       		.uleb128 0x1d
 11443 20e6 01       		.uleb128 0x1
 11444 20e7 50       		.byte	0x50
 11445 20e8 03       		.uleb128 0x3
 11446 20e9 76       		.byte	0x76
 11447 20ea D000     		.sleb128 80
 11448 20ec 00       		.byte	0
 11449 20ed 1C       		.uleb128 0x1c
 11450 20ee 2C010000 		.4byte	.LVL963
 11451 20f2 E5080000 		.4byte	0x8e5
 11452 20f6 00210000 		.4byte	0x2100
 11453 20fa 1D       		.uleb128 0x1d
 11454 20fb 01       		.uleb128 0x1
 11455 20fc 51       		.byte	0x51
 11456 20fd 01       		.uleb128 0x1
 11457 20fe 30       		.byte	0x30
 11458 20ff 00       		.byte	0
 11459 2100 1C       		.uleb128 0x1c
 11460 2101 3C010000 		.4byte	.LVL966
 11461 2105 F1040000 		.4byte	0x4f1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 272


 11462 2109 20210000 		.4byte	0x2120
 11463 210d 1D       		.uleb128 0x1d
 11464 210e 01       		.uleb128 0x1
 11465 210f 52       		.byte	0x52
 11466 2110 03       		.uleb128 0x3
 11467 2111 0A       		.byte	0xa
 11468 2112 0002     		.2byte	0x200
 11469 2114 1D       		.uleb128 0x1d
 11470 2115 01       		.uleb128 0x1
 11471 2116 51       		.byte	0x51
 11472 2117 01       		.uleb128 0x1
 11473 2118 30       		.byte	0x30
 11474 2119 1D       		.uleb128 0x1d
 11475 211a 01       		.uleb128 0x1
 11476 211b 50       		.byte	0x50
 11477 211c 02       		.uleb128 0x2
 11478 211d 7A       		.byte	0x7a
 11479 211e 00       		.sleb128 0
 11480 211f 00       		.byte	0
 11481 2120 1C       		.uleb128 0x1c
 11482 2121 50010000 		.4byte	.LVL971
 11483 2125 1C120000 		.4byte	0x121c
 11484 2129 35210000 		.4byte	0x2135
 11485 212d 1D       		.uleb128 0x1d
 11486 212e 01       		.uleb128 0x1
 11487 212f 50       		.byte	0x50
 11488 2130 03       		.uleb128 0x3
 11489 2131 91       		.byte	0x91
 11490 2132 BC7F     		.sleb128 -68
 11491 2134 00       		.byte	0
 11492 2135 1C       		.uleb128 0x1c
 11493 2136 5E010000 		.4byte	.LVL973
 11494 213a 62130000 		.4byte	0x1362
 11495 213e 49210000 		.4byte	0x2149
 11496 2142 1D       		.uleb128 0x1d
 11497 2143 01       		.uleb128 0x1
 11498 2144 51       		.byte	0x51
 11499 2145 02       		.uleb128 0x2
 11500 2146 78       		.byte	0x78
 11501 2147 00       		.sleb128 0
 11502 2148 00       		.byte	0
 11503 2149 21       		.uleb128 0x21
 11504 214a 90010000 		.4byte	.LVL977
 11505 214e ED0B0000 		.4byte	0xbed
 11506 2152 00       		.byte	0
 11507 2153 23       		.uleb128 0x23
 11508 2154 A1040000 		.4byte	.LASF152
 11509 2158 01       		.byte	0x1
 11510 2159 030D     		.2byte	0xd03
 11511 215b EF030000 		.4byte	0x3ef
 11512 215f 00000000 		.4byte	.LFB42
 11513 2163 4E000000 		.4byte	.LFE42-.LFB42
 11514 2167 01       		.uleb128 0x1
 11515 2168 9C       		.byte	0x9c
 11516 2169 17220000 		.4byte	0x2217
 11517 216d 19       		.uleb128 0x19
 11518 216e 85000000 		.4byte	.LASF93
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 273


 11519 2172 01       		.byte	0x1
 11520 2173 040D     		.2byte	0xd04
 11521 2175 3C080000 		.4byte	0x83c
 11522 2179 3A310000 		.4byte	.LLST201
 11523 217d 19       		.uleb128 0x19
 11524 217e 1D000000 		.4byte	.LASF153
 11525 2182 01       		.byte	0x1
 11526 2183 050D     		.2byte	0xd05
 11527 2185 B8000000 		.4byte	0xb8
 11528 2189 65310000 		.4byte	.LLST202
 11529 218d 19       		.uleb128 0x19
 11530 218e 1D060000 		.4byte	.LASF154
 11531 2192 01       		.byte	0x1
 11532 2193 060D     		.2byte	0xd06
 11533 2195 B8000000 		.4byte	0xb8
 11534 2199 86310000 		.4byte	.LLST203
 11535 219d 12       		.uleb128 0x12
 11536 219e 72657300 		.ascii	"res\000"
 11537 21a2 01       		.byte	0x1
 11538 21a3 090D     		.2byte	0xd09
 11539 21a5 EF030000 		.4byte	0x3ef
 11540 21a9 C0310000 		.4byte	.LLST204
 11541 21ad 18       		.uleb128 0x18
 11542 21ae 646A00   		.ascii	"dj\000"
 11543 21b1 01       		.byte	0x1
 11544 21b2 0A0D     		.2byte	0xd0a
 11545 21b4 03030000 		.4byte	0x303
 11546 21b8 02       		.uleb128 0x2
 11547 21b9 91       		.byte	0x91
 11548 21ba 54       		.sleb128 -44
 11549 21bb 12       		.uleb128 0x12
 11550 21bc 64697200 		.ascii	"dir\000"
 11551 21c0 01       		.byte	0x1
 11552 21c1 0B0D     		.2byte	0xd0b
 11553 21c3 8C020000 		.4byte	0x28c
 11554 21c7 E9310000 		.4byte	.LLST205
 11555 21cb 18       		.uleb128 0x18
 11556 21cc 73666E00 		.ascii	"sfn\000"
 11557 21d0 01       		.byte	0x1
 11558 21d1 0C0D     		.2byte	0xd0c
 11559 21d3 C0150000 		.4byte	0x15c0
 11560 21d7 02       		.uleb128 0x2
 11561 21d8 91       		.byte	0x91
 11562 21d9 48       		.sleb128 -56
 11563 21da 1C       		.uleb128 0x1c
 11564 21db 14000000 		.4byte	.LVL986
 11565 21df 390A0000 		.4byte	0xa39
 11566 21e3 F9210000 		.4byte	0x21f9
 11567 21e7 1D       		.uleb128 0x1d
 11568 21e8 01       		.uleb128 0x1
 11569 21e9 52       		.byte	0x52
 11570 21ea 01       		.uleb128 0x1
 11571 21eb 31       		.byte	0x31
 11572 21ec 1D       		.uleb128 0x1d
 11573 21ed 01       		.uleb128 0x1
 11574 21ee 51       		.byte	0x51
 11575 21ef 02       		.uleb128 0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 274


 11576 21f0 91       		.byte	0x91
 11577 21f1 54       		.sleb128 -44
 11578 21f2 1D       		.uleb128 0x1d
 11579 21f3 01       		.uleb128 0x1
 11580 21f4 50       		.byte	0x50
 11581 21f5 02       		.uleb128 0x2
 11582 21f6 91       		.byte	0x91
 11583 21f7 44       		.sleb128 -60
 11584 21f8 00       		.byte	0
 11585 21f9 1C       		.uleb128 0x1c
 11586 21fa 24000000 		.4byte	.LVL988
 11587 21fe 70110000 		.4byte	0x1170
 11588 2202 0D220000 		.4byte	0x220d
 11589 2206 1D       		.uleb128 0x1d
 11590 2207 01       		.uleb128 0x1
 11591 2208 50       		.byte	0x50
 11592 2209 02       		.uleb128 0x2
 11593 220a 91       		.byte	0x91
 11594 220b 54       		.sleb128 -44
 11595 220c 00       		.byte	0
 11596 220d 21       		.uleb128 0x21
 11597 220e 46000000 		.4byte	.LVL993
 11598 2212 ED0B0000 		.4byte	0xbed
 11599 2216 00       		.byte	0
 11600 2217 23       		.uleb128 0x23
 11601 2218 35010000 		.4byte	.LASF155
 11602 221c 01       		.byte	0x1
 11603 221d 2D0D     		.2byte	0xd2d
 11604 221f EF030000 		.4byte	0x3ef
 11605 2223 00000000 		.4byte	.LFB43
 11606 2227 52000000 		.4byte	.LFE43-.LFB43
 11607 222b 01       		.uleb128 0x1
 11608 222c 9C       		.byte	0x9c
 11609 222d CB220000 		.4byte	0x22cb
 11610 2231 19       		.uleb128 0x19
 11611 2232 85000000 		.4byte	.LASF93
 11612 2236 01       		.byte	0x1
 11613 2237 2E0D     		.2byte	0xd2e
 11614 2239 3C080000 		.4byte	0x83c
 11615 223d 07320000 		.4byte	.LLST206
 11616 2241 11       		.uleb128 0x11
 11617 2242 666E6F00 		.ascii	"fno\000"
 11618 2246 01       		.byte	0x1
 11619 2247 2F0D     		.2byte	0xd2f
 11620 2249 CB220000 		.4byte	0x22cb
 11621 224d 32320000 		.4byte	.LLST207
 11622 2251 12       		.uleb128 0x12
 11623 2252 72657300 		.ascii	"res\000"
 11624 2256 01       		.byte	0x1
 11625 2257 320D     		.2byte	0xd32
 11626 2259 EF030000 		.4byte	0x3ef
 11627 225d 5E320000 		.4byte	.LLST208
 11628 2261 18       		.uleb128 0x18
 11629 2262 646A00   		.ascii	"dj\000"
 11630 2265 01       		.byte	0x1
 11631 2266 330D     		.2byte	0xd33
 11632 2268 03030000 		.4byte	0x303
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 275


 11633 226c 02       		.uleb128 0x2
 11634 226d 91       		.byte	0x91
 11635 226e 5C       		.sleb128 -36
 11636 226f 12       		.uleb128 0x12
 11637 2270 64697200 		.ascii	"dir\000"
 11638 2274 01       		.byte	0x1
 11639 2275 340D     		.2byte	0xd34
 11640 2277 8C020000 		.4byte	0x28c
 11641 227b 87320000 		.4byte	.LLST209
 11642 227f 18       		.uleb128 0x18
 11643 2280 73666E00 		.ascii	"sfn\000"
 11644 2284 01       		.byte	0x1
 11645 2285 350D     		.2byte	0xd35
 11646 2287 C0150000 		.4byte	0x15c0
 11647 228b 02       		.uleb128 0x2
 11648 228c 91       		.byte	0x91
 11649 228d 50       		.sleb128 -48
 11650 228e 1C       		.uleb128 0x1c
 11651 228f 12000000 		.4byte	.LVL999
 11652 2293 390A0000 		.4byte	0xa39
 11653 2297 AD220000 		.4byte	0x22ad
 11654 229b 1D       		.uleb128 0x1d
 11655 229c 01       		.uleb128 0x1
 11656 229d 52       		.byte	0x52
 11657 229e 01       		.uleb128 0x1
 11658 229f 31       		.byte	0x31
 11659 22a0 1D       		.uleb128 0x1d
 11660 22a1 01       		.uleb128 0x1
 11661 22a2 51       		.byte	0x51
 11662 22a3 02       		.uleb128 0x2
 11663 22a4 91       		.byte	0x91
 11664 22a5 5C       		.sleb128 -36
 11665 22a6 1D       		.uleb128 0x1d
 11666 22a7 01       		.uleb128 0x1
 11667 22a8 50       		.byte	0x50
 11668 22a9 02       		.uleb128 0x2
 11669 22aa 91       		.byte	0x91
 11670 22ab 4C       		.sleb128 -52
 11671 22ac 00       		.byte	0
 11672 22ad 1C       		.uleb128 0x1c
 11673 22ae 22000000 		.4byte	.LVL1001
 11674 22b2 70110000 		.4byte	0x1170
 11675 22b6 C1220000 		.4byte	0x22c1
 11676 22ba 1D       		.uleb128 0x1d
 11677 22bb 01       		.uleb128 0x1
 11678 22bc 50       		.byte	0x50
 11679 22bd 02       		.uleb128 0x2
 11680 22be 91       		.byte	0x91
 11681 22bf 5C       		.sleb128 -36
 11682 22c0 00       		.byte	0
 11683 22c1 21       		.uleb128 0x21
 11684 22c2 4A000000 		.4byte	.LVL1005
 11685 22c6 ED0B0000 		.4byte	0xbed
 11686 22ca 00       		.byte	0
 11687 22cb 0B       		.uleb128 0xb
 11688 22cc 04       		.byte	0x4
 11689 22cd D1220000 		.4byte	0x22d1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 276


 11690 22d1 15       		.uleb128 0x15
 11691 22d2 63030000 		.4byte	0x363
 11692 22d6 23       		.uleb128 0x23
 11693 22d7 17030000 		.4byte	.LASF156
 11694 22db 01       		.byte	0x1
 11695 22dc 560D     		.2byte	0xd56
 11696 22de EF030000 		.4byte	0x3ef
 11697 22e2 00000000 		.4byte	.LFB44
 11698 22e6 24010000 		.4byte	.LFE44-.LFB44
 11699 22ea 01       		.uleb128 0x1
 11700 22eb 9C       		.byte	0x9c
 11701 22ec 9A240000 		.4byte	0x249a
 11702 22f0 19       		.uleb128 0x19
 11703 22f1 75010000 		.4byte	.LASF157
 11704 22f5 01       		.byte	0x1
 11705 22f6 570D     		.2byte	0xd57
 11706 22f8 3C080000 		.4byte	0x83c
 11707 22fc A5320000 		.4byte	.LLST210
 11708 2300 19       		.uleb128 0x19
 11709 2301 C5030000 		.4byte	.LASF158
 11710 2305 01       		.byte	0x1
 11711 2306 580D     		.2byte	0xd58
 11712 2308 3C080000 		.4byte	0x83c
 11713 230c D1320000 		.4byte	.LLST211
 11714 2310 12       		.uleb128 0x12
 11715 2311 72657300 		.ascii	"res\000"
 11716 2315 01       		.byte	0x1
 11717 2316 5B0D     		.2byte	0xd5b
 11718 2318 EF030000 		.4byte	0x3ef
 11719 231c 16330000 		.4byte	.LLST212
 11720 2320 18       		.uleb128 0x18
 11721 2321 646A6F00 		.ascii	"djo\000"
 11722 2325 01       		.byte	0x1
 11723 2326 5C0D     		.2byte	0xd5c
 11724 2328 03030000 		.4byte	0x303
 11725 232c 02       		.uleb128 0x2
 11726 232d 91       		.byte	0x91
 11727 232e 54       		.sleb128 -44
 11728 232f 18       		.uleb128 0x18
 11729 2330 646A6E00 		.ascii	"djn\000"
 11730 2334 01       		.byte	0x1
 11731 2335 5C0D     		.2byte	0xd5c
 11732 2337 03030000 		.4byte	0x303
 11733 233b 03       		.uleb128 0x3
 11734 233c 91       		.byte	0x91
 11735 233d B87F     		.sleb128 -72
 11736 233f 18       		.uleb128 0x18
 11737 2340 62756600 		.ascii	"buf\000"
 11738 2344 01       		.byte	0x1
 11739 2345 5D0D     		.2byte	0xd5d
 11740 2347 9A240000 		.4byte	0x249a
 11741 234b 03       		.uleb128 0x3
 11742 234c 91       		.byte	0x91
 11743 234d A07F     		.sleb128 -96
 11744 234f 12       		.uleb128 0x12
 11745 2350 64697200 		.ascii	"dir\000"
 11746 2354 01       		.byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 277


 11747 2355 5D0D     		.2byte	0xd5d
 11748 2357 8C020000 		.4byte	0x28c
 11749 235b CE330000 		.4byte	.LLST213
 11750 235f 12       		.uleb128 0x12
 11751 2360 647700   		.ascii	"dw\000"
 11752 2363 01       		.byte	0x1
 11753 2364 5E0D     		.2byte	0xd5e
 11754 2366 CE000000 		.4byte	0xce
 11755 236a FA330000 		.4byte	.LLST214
 11756 236e 18       		.uleb128 0x18
 11757 236f 73666E00 		.ascii	"sfn\000"
 11758 2373 01       		.byte	0x1
 11759 2374 5F0D     		.2byte	0xd5f
 11760 2376 C0150000 		.4byte	0x15c0
 11761 237a 03       		.uleb128 0x3
 11762 237b 91       		.byte	0x91
 11763 237c 947F     		.sleb128 -108
 11764 237e 1C       		.uleb128 0x1c
 11765 237f 12000000 		.4byte	.LVL1012
 11766 2383 390A0000 		.4byte	0xa39
 11767 2387 9E230000 		.4byte	0x239e
 11768 238b 1D       		.uleb128 0x1d
 11769 238c 01       		.uleb128 0x1
 11770 238d 52       		.byte	0x52
 11771 238e 01       		.uleb128 0x1
 11772 238f 31       		.byte	0x31
 11773 2390 1D       		.uleb128 0x1d
 11774 2391 01       		.uleb128 0x1
 11775 2392 51       		.byte	0x51
 11776 2393 02       		.uleb128 0x2
 11777 2394 91       		.byte	0x91
 11778 2395 54       		.sleb128 -44
 11779 2396 1D       		.uleb128 0x1d
 11780 2397 01       		.uleb128 0x1
 11781 2398 50       		.byte	0x50
 11782 2399 03       		.uleb128 0x3
 11783 239a 91       		.byte	0x91
 11784 239b 8C7F     		.sleb128 -116
 11785 239d 00       		.byte	0
 11786 239e 1C       		.uleb128 0x1c
 11787 239f 28000000 		.4byte	.LVL1015
 11788 23a3 70110000 		.4byte	0x1170
 11789 23a7 B2230000 		.4byte	0x23b2
 11790 23ab 1D       		.uleb128 0x1d
 11791 23ac 01       		.uleb128 0x1
 11792 23ad 50       		.byte	0x50
 11793 23ae 02       		.uleb128 0x2
 11794 23af 91       		.byte	0x91
 11795 23b0 54       		.sleb128 -44
 11796 23b1 00       		.byte	0
 11797 23b2 1C       		.uleb128 0x1c
 11798 23b3 34000000 		.4byte	.LVL1018
 11799 23b7 FF050000 		.4byte	0x5ff
 11800 23bb CB230000 		.4byte	0x23cb
 11801 23bf 1D       		.uleb128 0x1d
 11802 23c0 01       		.uleb128 0x1
 11803 23c1 51       		.byte	0x51
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 278


 11804 23c2 01       		.uleb128 0x1
 11805 23c3 32       		.byte	0x32
 11806 23c4 1D       		.uleb128 0x1d
 11807 23c5 01       		.uleb128 0x1
 11808 23c6 50       		.byte	0x50
 11809 23c7 02       		.uleb128 0x2
 11810 23c8 91       		.byte	0x91
 11811 23c9 54       		.sleb128 -44
 11812 23ca 00       		.byte	0
 11813 23cb 1C       		.uleb128 0x1c
 11814 23cc 4A000000 		.4byte	.LVL1020
 11815 23d0 7A040000 		.4byte	0x47a
 11816 23d4 E5230000 		.4byte	0x23e5
 11817 23d8 1D       		.uleb128 0x1d
 11818 23d9 01       		.uleb128 0x1
 11819 23da 52       		.byte	0x52
 11820 23db 01       		.uleb128 0x1
 11821 23dc 45       		.byte	0x45
 11822 23dd 1D       		.uleb128 0x1d
 11823 23de 01       		.uleb128 0x1
 11824 23df 50       		.byte	0x50
 11825 23e0 03       		.uleb128 0x3
 11826 23e1 91       		.byte	0x91
 11827 23e2 A07F     		.sleb128 -96
 11828 23e4 00       		.byte	0
 11829 23e5 1C       		.uleb128 0x1c
 11830 23e6 54000000 		.4byte	.LVL1021
 11831 23ea 7A040000 		.4byte	0x47a
 11832 23ee 05240000 		.4byte	0x2405
 11833 23f2 1D       		.uleb128 0x1d
 11834 23f3 01       		.uleb128 0x1
 11835 23f4 52       		.byte	0x52
 11836 23f5 01       		.uleb128 0x1
 11837 23f6 4C       		.byte	0x4c
 11838 23f7 1D       		.uleb128 0x1d
 11839 23f8 01       		.uleb128 0x1
 11840 23f9 51       		.byte	0x51
 11841 23fa 02       		.uleb128 0x2
 11842 23fb 91       		.byte	0x91
 11843 23fc 54       		.sleb128 -44
 11844 23fd 1D       		.uleb128 0x1d
 11845 23fe 01       		.uleb128 0x1
 11846 23ff 50       		.byte	0x50
 11847 2400 03       		.uleb128 0x3
 11848 2401 91       		.byte	0x91
 11849 2402 B87F     		.sleb128 -72
 11850 2404 00       		.byte	0
 11851 2405 1C       		.uleb128 0x1c
 11852 2406 5C000000 		.4byte	.LVL1022
 11853 240a 70110000 		.4byte	0x1170
 11854 240e 20240000 		.4byte	0x2420
 11855 2412 1D       		.uleb128 0x1d
 11856 2413 01       		.uleb128 0x1
 11857 2414 51       		.byte	0x51
 11858 2415 02       		.uleb128 0x2
 11859 2416 75       		.byte	0x75
 11860 2417 00       		.sleb128 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 279


 11861 2418 1D       		.uleb128 0x1d
 11862 2419 01       		.uleb128 0x1
 11863 241a 50       		.byte	0x50
 11864 241b 03       		.uleb128 0x3
 11865 241c 91       		.byte	0x91
 11866 241d B87F     		.sleb128 -72
 11867 241f 00       		.byte	0
 11868 2420 1C       		.uleb128 0x1c
 11869 2421 6C000000 		.4byte	.LVL1025
 11870 2425 1C120000 		.4byte	0x121c
 11871 2429 35240000 		.4byte	0x2435
 11872 242d 1D       		.uleb128 0x1d
 11873 242e 01       		.uleb128 0x1
 11874 242f 50       		.byte	0x50
 11875 2430 03       		.uleb128 0x3
 11876 2431 91       		.byte	0x91
 11877 2432 B87F     		.sleb128 -72
 11878 2434 00       		.byte	0
 11879 2435 1C       		.uleb128 0x1c
 11880 2436 80000000 		.4byte	.LVL1029
 11881 243a 7A040000 		.4byte	0x47a
 11882 243e 54240000 		.4byte	0x2454
 11883 2442 1D       		.uleb128 0x1d
 11884 2443 01       		.uleb128 0x1
 11885 2444 52       		.byte	0x52
 11886 2445 01       		.uleb128 0x1
 11887 2446 43       		.byte	0x43
 11888 2447 1D       		.uleb128 0x1d
 11889 2448 01       		.uleb128 0x1
 11890 2449 51       		.byte	0x51
 11891 244a 02       		.uleb128 0x2
 11892 244b 7D       		.byte	0x7d
 11893 244c 1A       		.sleb128 26
 11894 244d 1D       		.uleb128 0x1d
 11895 244e 01       		.uleb128 0x1
 11896 244f 50       		.byte	0x50
 11897 2450 02       		.uleb128 0x2
 11898 2451 75       		.byte	0x75
 11899 2452 0D       		.sleb128 13
 11900 2453 00       		.byte	0
 11901 2454 1C       		.uleb128 0x1c
 11902 2455 BA000000 		.4byte	.LVL1031
 11903 2459 8E0C0000 		.4byte	0xc8e
 11904 245d 68240000 		.4byte	0x2468
 11905 2461 1D       		.uleb128 0x1d
 11906 2462 01       		.uleb128 0x1
 11907 2463 50       		.byte	0x50
 11908 2464 02       		.uleb128 0x2
 11909 2465 74       		.byte	0x74
 11910 2466 00       		.sleb128 0
 11911 2467 00       		.byte	0
 11912 2468 1C       		.uleb128 0x1c
 11913 2469 C4000000 		.4byte	.LVL1034
 11914 246d E5080000 		.4byte	0x8e5
 11915 2471 7C240000 		.4byte	0x247c
 11916 2475 1D       		.uleb128 0x1d
 11917 2476 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 280


 11918 2477 50       		.byte	0x50
 11919 2478 02       		.uleb128 0x2
 11920 2479 74       		.byte	0x74
 11921 247a 00       		.sleb128 0
 11922 247b 00       		.byte	0
 11923 247c 1C       		.uleb128 0x1c
 11924 247d 0E010000 		.4byte	.LVL1042
 11925 2481 E50D0000 		.4byte	0xde5
 11926 2485 90240000 		.4byte	0x2490
 11927 2489 1D       		.uleb128 0x1d
 11928 248a 01       		.uleb128 0x1
 11929 248b 50       		.byte	0x50
 11930 248c 02       		.uleb128 0x2
 11931 248d 91       		.byte	0x91
 11932 248e 54       		.sleb128 -44
 11933 248f 00       		.byte	0
 11934 2490 21       		.uleb128 0x21
 11935 2491 18010000 		.4byte	.LVL1045
 11936 2495 ED0B0000 		.4byte	0xbed
 11937 2499 00       		.byte	0
 11938 249a 08       		.uleb128 0x8
 11939 249b B8000000 		.4byte	0xb8
 11940 249f AA240000 		.4byte	0x24aa
 11941 24a3 0D       		.uleb128 0xd
 11942 24a4 DD010000 		.4byte	0x1dd
 11943 24a8 14       		.byte	0x14
 11944 24a9 00       		.byte	0
 11945 24aa 08       		.uleb128 0x8
 11946 24ab 86020000 		.4byte	0x286
 11947 24af BA240000 		.4byte	0x24ba
 11948 24b3 0D       		.uleb128 0xd
 11949 24b4 DD010000 		.4byte	0x1dd
 11950 24b8 00       		.byte	0
 11951 24b9 00       		.byte	0
 11952 24ba 1A       		.uleb128 0x1a
 11953 24bb 03020000 		.4byte	.LASF159
 11954 24bf 01       		.byte	0x1
 11955 24c0 D401     		.2byte	0x1d4
 11956 24c2 AA240000 		.4byte	0x24aa
 11957 24c6 05       		.uleb128 0x5
 11958 24c7 03       		.byte	0x3
 11959 24c8 24000000 		.4byte	FatFs
 11960 24cc 1A       		.uleb128 0x1a
 11961 24cd A5060000 		.4byte	.LASF160
 11962 24d1 01       		.byte	0x1
 11963 24d2 DA01     		.2byte	0x1da
 11964 24d4 C3000000 		.4byte	0xc3
 11965 24d8 05       		.uleb128 0x5
 11966 24d9 03       		.byte	0x3
 11967 24da 28000000 		.4byte	Fsid
 11968 24de 08       		.uleb128 0x8
 11969 24df 6F040000 		.4byte	0x46f
 11970 24e3 EE240000 		.4byte	0x24ee
 11971 24e7 0D       		.uleb128 0xd
 11972 24e8 DD010000 		.4byte	0x1dd
 11973 24ec 02       		.byte	0x2
 11974 24ed 00       		.byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 281


 11975 24ee 1A       		.uleb128 0x1a
 11976 24ef 17060000 		.4byte	.LASF161
 11977 24f3 01       		.byte	0x1
 11978 24f4 E301     		.2byte	0x1e3
 11979 24f6 DE240000 		.4byte	0x24de
 11980 24fa 05       		.uleb128 0x5
 11981 24fb 03       		.byte	0x3
 11982 24fc 00000000 		.4byte	Files
 11983 2500 26       		.uleb128 0x26
 11984 2501 DB050000 		.4byte	.LASF162
 11985 2505 06       		.byte	0x6
 11986 2506 23       		.byte	0x23
 11987 2507 2C040000 		.4byte	0x42c
 11988 250b 24250000 		.4byte	0x2524
 11989 250f 27       		.uleb128 0x27
 11990 2510 B8000000 		.4byte	0xb8
 11991 2514 27       		.uleb128 0x27
 11992 2515 E6040000 		.4byte	0x4e6
 11993 2519 27       		.uleb128 0x27
 11994 251a CE000000 		.4byte	0xce
 11995 251e 27       		.uleb128 0x27
 11996 251f AD000000 		.4byte	0xad
 11997 2523 00       		.byte	0
 11998 2524 26       		.uleb128 0x26
 11999 2525 93060000 		.4byte	.LASF163
 12000 2529 06       		.byte	0x6
 12001 252a 22       		.byte	0x22
 12002 252b 2C040000 		.4byte	0x42c
 12003 252f 48250000 		.4byte	0x2548
 12004 2533 27       		.uleb128 0x27
 12005 2534 B8000000 		.4byte	0xb8
 12006 2538 27       		.uleb128 0x27
 12007 2539 8C020000 		.4byte	0x28c
 12008 253d 27       		.uleb128 0x27
 12009 253e CE000000 		.4byte	0xce
 12010 2542 27       		.uleb128 0x27
 12011 2543 AD000000 		.4byte	0xad
 12012 2547 00       		.byte	0
 12013 2548 26       		.uleb128 0x26
 12014 2549 DA020000 		.4byte	.LASF164
 12015 254d 06       		.byte	0x6
 12016 254e 21       		.byte	0x21
 12017 254f FA030000 		.4byte	0x3fa
 12018 2553 5D250000 		.4byte	0x255d
 12019 2557 27       		.uleb128 0x27
 12020 2558 B8000000 		.4byte	0xb8
 12021 255c 00       		.byte	0
 12022 255d 26       		.uleb128 0x26
 12023 255e 83020000 		.4byte	.LASF165
 12024 2562 06       		.byte	0x6
 12025 2563 20       		.byte	0x20
 12026 2564 FA030000 		.4byte	0x3fa
 12027 2568 72250000 		.4byte	0x2572
 12028 256c 27       		.uleb128 0x27
 12029 256d B8000000 		.4byte	0xb8
 12030 2571 00       		.byte	0
 12031 2572 26       		.uleb128 0x26
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 282


 12032 2573 8A030000 		.4byte	.LASF166
 12033 2577 06       		.byte	0x6
 12034 2578 24       		.byte	0x24
 12035 2579 2C040000 		.4byte	0x42c
 12036 257d 91250000 		.4byte	0x2591
 12037 2581 27       		.uleb128 0x27
 12038 2582 B8000000 		.4byte	0xb8
 12039 2586 27       		.uleb128 0x27
 12040 2587 B8000000 		.4byte	0xb8
 12041 258b 27       		.uleb128 0x27
 12042 258c DD040000 		.4byte	0x4dd
 12043 2590 00       		.byte	0
 12044 2591 28       		.uleb128 0x28
 12045 2592 4D040000 		.4byte	.LASF170
 12046 2596 05       		.byte	0x5
 12047 2597 FA       		.byte	0xfa
 12048 2598 CE000000 		.4byte	0xce
 12049 259c 00       		.byte	0
 12050              		.section	.debug_abbrev,"",%progbits
 12051              	.Ldebug_abbrev0:
 12052 0000 01       		.uleb128 0x1
 12053 0001 11       		.uleb128 0x11
 12054 0002 01       		.byte	0x1
 12055 0003 25       		.uleb128 0x25
 12056 0004 0E       		.uleb128 0xe
 12057 0005 13       		.uleb128 0x13
 12058 0006 0B       		.uleb128 0xb
 12059 0007 03       		.uleb128 0x3
 12060 0008 0E       		.uleb128 0xe
 12061 0009 1B       		.uleb128 0x1b
 12062 000a 0E       		.uleb128 0xe
 12063 000b 55       		.uleb128 0x55
 12064 000c 17       		.uleb128 0x17
 12065 000d 11       		.uleb128 0x11
 12066 000e 01       		.uleb128 0x1
 12067 000f 10       		.uleb128 0x10
 12068 0010 17       		.uleb128 0x17
 12069 0011 00       		.byte	0
 12070 0012 00       		.byte	0
 12071 0013 02       		.uleb128 0x2
 12072 0014 24       		.uleb128 0x24
 12073 0015 00       		.byte	0
 12074 0016 0B       		.uleb128 0xb
 12075 0017 0B       		.uleb128 0xb
 12076 0018 3E       		.uleb128 0x3e
 12077 0019 0B       		.uleb128 0xb
 12078 001a 03       		.uleb128 0x3
 12079 001b 0E       		.uleb128 0xe
 12080 001c 00       		.byte	0
 12081 001d 00       		.byte	0
 12082 001e 03       		.uleb128 0x3
 12083 001f 16       		.uleb128 0x16
 12084 0020 00       		.byte	0
 12085 0021 03       		.uleb128 0x3
 12086 0022 0E       		.uleb128 0xe
 12087 0023 3A       		.uleb128 0x3a
 12088 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 283


 12089 0025 3B       		.uleb128 0x3b
 12090 0026 0B       		.uleb128 0xb
 12091 0027 49       		.uleb128 0x49
 12092 0028 13       		.uleb128 0x13
 12093 0029 00       		.byte	0
 12094 002a 00       		.byte	0
 12095 002b 04       		.uleb128 0x4
 12096 002c 24       		.uleb128 0x24
 12097 002d 00       		.byte	0
 12098 002e 0B       		.uleb128 0xb
 12099 002f 0B       		.uleb128 0xb
 12100 0030 3E       		.uleb128 0x3e
 12101 0031 0B       		.uleb128 0xb
 12102 0032 03       		.uleb128 0x3
 12103 0033 08       		.uleb128 0x8
 12104 0034 00       		.byte	0
 12105 0035 00       		.byte	0
 12106 0036 05       		.uleb128 0x5
 12107 0037 13       		.uleb128 0x13
 12108 0038 01       		.byte	0x1
 12109 0039 0B       		.uleb128 0xb
 12110 003a 05       		.uleb128 0x5
 12111 003b 3A       		.uleb128 0x3a
 12112 003c 0B       		.uleb128 0xb
 12113 003d 3B       		.uleb128 0x3b
 12114 003e 0B       		.uleb128 0xb
 12115 003f 01       		.uleb128 0x1
 12116 0040 13       		.uleb128 0x13
 12117 0041 00       		.byte	0
 12118 0042 00       		.byte	0
 12119 0043 06       		.uleb128 0x6
 12120 0044 0D       		.uleb128 0xd
 12121 0045 00       		.byte	0
 12122 0046 03       		.uleb128 0x3
 12123 0047 0E       		.uleb128 0xe
 12124 0048 3A       		.uleb128 0x3a
 12125 0049 0B       		.uleb128 0xb
 12126 004a 3B       		.uleb128 0x3b
 12127 004b 0B       		.uleb128 0xb
 12128 004c 49       		.uleb128 0x49
 12129 004d 13       		.uleb128 0x13
 12130 004e 38       		.uleb128 0x38
 12131 004f 0B       		.uleb128 0xb
 12132 0050 00       		.byte	0
 12133 0051 00       		.byte	0
 12134 0052 07       		.uleb128 0x7
 12135 0053 0D       		.uleb128 0xd
 12136 0054 00       		.byte	0
 12137 0055 03       		.uleb128 0x3
 12138 0056 08       		.uleb128 0x8
 12139 0057 3A       		.uleb128 0x3a
 12140 0058 0B       		.uleb128 0xb
 12141 0059 3B       		.uleb128 0x3b
 12142 005a 0B       		.uleb128 0xb
 12143 005b 49       		.uleb128 0x49
 12144 005c 13       		.uleb128 0x13
 12145 005d 38       		.uleb128 0x38
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 284


 12146 005e 0B       		.uleb128 0xb
 12147 005f 00       		.byte	0
 12148 0060 00       		.byte	0
 12149 0061 08       		.uleb128 0x8
 12150 0062 01       		.uleb128 0x1
 12151 0063 01       		.byte	0x1
 12152 0064 49       		.uleb128 0x49
 12153 0065 13       		.uleb128 0x13
 12154 0066 01       		.uleb128 0x1
 12155 0067 13       		.uleb128 0x13
 12156 0068 00       		.byte	0
 12157 0069 00       		.byte	0
 12158 006a 09       		.uleb128 0x9
 12159 006b 21       		.uleb128 0x21
 12160 006c 00       		.byte	0
 12161 006d 49       		.uleb128 0x49
 12162 006e 13       		.uleb128 0x13
 12163 006f 2F       		.uleb128 0x2f
 12164 0070 05       		.uleb128 0x5
 12165 0071 00       		.byte	0
 12166 0072 00       		.byte	0
 12167 0073 0A       		.uleb128 0xa
 12168 0074 13       		.uleb128 0x13
 12169 0075 01       		.byte	0x1
 12170 0076 0B       		.uleb128 0xb
 12171 0077 0B       		.uleb128 0xb
 12172 0078 3A       		.uleb128 0x3a
 12173 0079 0B       		.uleb128 0xb
 12174 007a 3B       		.uleb128 0x3b
 12175 007b 0B       		.uleb128 0xb
 12176 007c 01       		.uleb128 0x1
 12177 007d 13       		.uleb128 0x13
 12178 007e 00       		.byte	0
 12179 007f 00       		.byte	0
 12180 0080 0B       		.uleb128 0xb
 12181 0081 0F       		.uleb128 0xf
 12182 0082 00       		.byte	0
 12183 0083 0B       		.uleb128 0xb
 12184 0084 0B       		.uleb128 0xb
 12185 0085 49       		.uleb128 0x49
 12186 0086 13       		.uleb128 0x13
 12187 0087 00       		.byte	0
 12188 0088 00       		.byte	0
 12189 0089 0C       		.uleb128 0xc
 12190 008a 16       		.uleb128 0x16
 12191 008b 00       		.byte	0
 12192 008c 03       		.uleb128 0x3
 12193 008d 08       		.uleb128 0x8
 12194 008e 3A       		.uleb128 0x3a
 12195 008f 0B       		.uleb128 0xb
 12196 0090 3B       		.uleb128 0x3b
 12197 0091 0B       		.uleb128 0xb
 12198 0092 49       		.uleb128 0x49
 12199 0093 13       		.uleb128 0x13
 12200 0094 00       		.byte	0
 12201 0095 00       		.byte	0
 12202 0096 0D       		.uleb128 0xd
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 285


 12203 0097 21       		.uleb128 0x21
 12204 0098 00       		.byte	0
 12205 0099 49       		.uleb128 0x49
 12206 009a 13       		.uleb128 0x13
 12207 009b 2F       		.uleb128 0x2f
 12208 009c 0B       		.uleb128 0xb
 12209 009d 00       		.byte	0
 12210 009e 00       		.byte	0
 12211 009f 0E       		.uleb128 0xe
 12212 00a0 04       		.uleb128 0x4
 12213 00a1 01       		.byte	0x1
 12214 00a2 0B       		.uleb128 0xb
 12215 00a3 0B       		.uleb128 0xb
 12216 00a4 3A       		.uleb128 0x3a
 12217 00a5 0B       		.uleb128 0xb
 12218 00a6 3B       		.uleb128 0x3b
 12219 00a7 0B       		.uleb128 0xb
 12220 00a8 01       		.uleb128 0x1
 12221 00a9 13       		.uleb128 0x13
 12222 00aa 00       		.byte	0
 12223 00ab 00       		.byte	0
 12224 00ac 0F       		.uleb128 0xf
 12225 00ad 28       		.uleb128 0x28
 12226 00ae 00       		.byte	0
 12227 00af 03       		.uleb128 0x3
 12228 00b0 0E       		.uleb128 0xe
 12229 00b1 1C       		.uleb128 0x1c
 12230 00b2 0D       		.uleb128 0xd
 12231 00b3 00       		.byte	0
 12232 00b4 00       		.byte	0
 12233 00b5 10       		.uleb128 0x10
 12234 00b6 2E       		.uleb128 0x2e
 12235 00b7 01       		.byte	0x1
 12236 00b8 03       		.uleb128 0x3
 12237 00b9 0E       		.uleb128 0xe
 12238 00ba 3A       		.uleb128 0x3a
 12239 00bb 0B       		.uleb128 0xb
 12240 00bc 3B       		.uleb128 0x3b
 12241 00bd 05       		.uleb128 0x5
 12242 00be 27       		.uleb128 0x27
 12243 00bf 19       		.uleb128 0x19
 12244 00c0 11       		.uleb128 0x11
 12245 00c1 01       		.uleb128 0x1
 12246 00c2 12       		.uleb128 0x12
 12247 00c3 06       		.uleb128 0x6
 12248 00c4 40       		.uleb128 0x40
 12249 00c5 18       		.uleb128 0x18
 12250 00c6 9742     		.uleb128 0x2117
 12251 00c8 19       		.uleb128 0x19
 12252 00c9 01       		.uleb128 0x1
 12253 00ca 13       		.uleb128 0x13
 12254 00cb 00       		.byte	0
 12255 00cc 00       		.byte	0
 12256 00cd 11       		.uleb128 0x11
 12257 00ce 05       		.uleb128 0x5
 12258 00cf 00       		.byte	0
 12259 00d0 03       		.uleb128 0x3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 286


 12260 00d1 08       		.uleb128 0x8
 12261 00d2 3A       		.uleb128 0x3a
 12262 00d3 0B       		.uleb128 0xb
 12263 00d4 3B       		.uleb128 0x3b
 12264 00d5 05       		.uleb128 0x5
 12265 00d6 49       		.uleb128 0x49
 12266 00d7 13       		.uleb128 0x13
 12267 00d8 02       		.uleb128 0x2
 12268 00d9 17       		.uleb128 0x17
 12269 00da 00       		.byte	0
 12270 00db 00       		.byte	0
 12271 00dc 12       		.uleb128 0x12
 12272 00dd 34       		.uleb128 0x34
 12273 00de 00       		.byte	0
 12274 00df 03       		.uleb128 0x3
 12275 00e0 08       		.uleb128 0x8
 12276 00e1 3A       		.uleb128 0x3a
 12277 00e2 0B       		.uleb128 0xb
 12278 00e3 3B       		.uleb128 0x3b
 12279 00e4 05       		.uleb128 0x5
 12280 00e5 49       		.uleb128 0x49
 12281 00e6 13       		.uleb128 0x13
 12282 00e7 02       		.uleb128 0x2
 12283 00e8 17       		.uleb128 0x17
 12284 00e9 00       		.byte	0
 12285 00ea 00       		.byte	0
 12286 00eb 13       		.uleb128 0x13
 12287 00ec 0F       		.uleb128 0xf
 12288 00ed 00       		.byte	0
 12289 00ee 0B       		.uleb128 0xb
 12290 00ef 0B       		.uleb128 0xb
 12291 00f0 00       		.byte	0
 12292 00f1 00       		.byte	0
 12293 00f2 14       		.uleb128 0x14
 12294 00f3 26       		.uleb128 0x26
 12295 00f4 00       		.byte	0
 12296 00f5 00       		.byte	0
 12297 00f6 00       		.byte	0
 12298 00f7 15       		.uleb128 0x15
 12299 00f8 26       		.uleb128 0x26
 12300 00f9 00       		.byte	0
 12301 00fa 49       		.uleb128 0x49
 12302 00fb 13       		.uleb128 0x13
 12303 00fc 00       		.byte	0
 12304 00fd 00       		.byte	0
 12305 00fe 16       		.uleb128 0x16
 12306 00ff 2E       		.uleb128 0x2e
 12307 0100 01       		.byte	0x1
 12308 0101 03       		.uleb128 0x3
 12309 0102 0E       		.uleb128 0xe
 12310 0103 3A       		.uleb128 0x3a
 12311 0104 0B       		.uleb128 0xb
 12312 0105 3B       		.uleb128 0x3b
 12313 0106 05       		.uleb128 0x5
 12314 0107 27       		.uleb128 0x27
 12315 0108 19       		.uleb128 0x19
 12316 0109 49       		.uleb128 0x49
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 287


 12317 010a 13       		.uleb128 0x13
 12318 010b 11       		.uleb128 0x11
 12319 010c 01       		.uleb128 0x1
 12320 010d 12       		.uleb128 0x12
 12321 010e 06       		.uleb128 0x6
 12322 010f 40       		.uleb128 0x40
 12323 0110 18       		.uleb128 0x18
 12324 0111 9742     		.uleb128 0x2117
 12325 0113 19       		.uleb128 0x19
 12326 0114 01       		.uleb128 0x1
 12327 0115 13       		.uleb128 0x13
 12328 0116 00       		.byte	0
 12329 0117 00       		.byte	0
 12330 0118 17       		.uleb128 0x17
 12331 0119 05       		.uleb128 0x5
 12332 011a 00       		.byte	0
 12333 011b 03       		.uleb128 0x3
 12334 011c 08       		.uleb128 0x8
 12335 011d 3A       		.uleb128 0x3a
 12336 011e 0B       		.uleb128 0xb
 12337 011f 3B       		.uleb128 0x3b
 12338 0120 05       		.uleb128 0x5
 12339 0121 49       		.uleb128 0x49
 12340 0122 13       		.uleb128 0x13
 12341 0123 02       		.uleb128 0x2
 12342 0124 18       		.uleb128 0x18
 12343 0125 00       		.byte	0
 12344 0126 00       		.byte	0
 12345 0127 18       		.uleb128 0x18
 12346 0128 34       		.uleb128 0x34
 12347 0129 00       		.byte	0
 12348 012a 03       		.uleb128 0x3
 12349 012b 08       		.uleb128 0x8
 12350 012c 3A       		.uleb128 0x3a
 12351 012d 0B       		.uleb128 0xb
 12352 012e 3B       		.uleb128 0x3b
 12353 012f 05       		.uleb128 0x5
 12354 0130 49       		.uleb128 0x49
 12355 0131 13       		.uleb128 0x13
 12356 0132 02       		.uleb128 0x2
 12357 0133 18       		.uleb128 0x18
 12358 0134 00       		.byte	0
 12359 0135 00       		.byte	0
 12360 0136 19       		.uleb128 0x19
 12361 0137 05       		.uleb128 0x5
 12362 0138 00       		.byte	0
 12363 0139 03       		.uleb128 0x3
 12364 013a 0E       		.uleb128 0xe
 12365 013b 3A       		.uleb128 0x3a
 12366 013c 0B       		.uleb128 0xb
 12367 013d 3B       		.uleb128 0x3b
 12368 013e 05       		.uleb128 0x5
 12369 013f 49       		.uleb128 0x49
 12370 0140 13       		.uleb128 0x13
 12371 0141 02       		.uleb128 0x2
 12372 0142 17       		.uleb128 0x17
 12373 0143 00       		.byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 288


 12374 0144 00       		.byte	0
 12375 0145 1A       		.uleb128 0x1a
 12376 0146 34       		.uleb128 0x34
 12377 0147 00       		.byte	0
 12378 0148 03       		.uleb128 0x3
 12379 0149 0E       		.uleb128 0xe
 12380 014a 3A       		.uleb128 0x3a
 12381 014b 0B       		.uleb128 0xb
 12382 014c 3B       		.uleb128 0x3b
 12383 014d 05       		.uleb128 0x5
 12384 014e 49       		.uleb128 0x49
 12385 014f 13       		.uleb128 0x13
 12386 0150 02       		.uleb128 0x2
 12387 0151 18       		.uleb128 0x18
 12388 0152 00       		.byte	0
 12389 0153 00       		.byte	0
 12390 0154 1B       		.uleb128 0x1b
 12391 0155 34       		.uleb128 0x34
 12392 0156 00       		.byte	0
 12393 0157 03       		.uleb128 0x3
 12394 0158 08       		.uleb128 0x8
 12395 0159 3A       		.uleb128 0x3a
 12396 015a 0B       		.uleb128 0xb
 12397 015b 3B       		.uleb128 0x3b
 12398 015c 05       		.uleb128 0x5
 12399 015d 49       		.uleb128 0x49
 12400 015e 13       		.uleb128 0x13
 12401 015f 00       		.byte	0
 12402 0160 00       		.byte	0
 12403 0161 1C       		.uleb128 0x1c
 12404 0162 898201   		.uleb128 0x4109
 12405 0165 01       		.byte	0x1
 12406 0166 11       		.uleb128 0x11
 12407 0167 01       		.uleb128 0x1
 12408 0168 31       		.uleb128 0x31
 12409 0169 13       		.uleb128 0x13
 12410 016a 01       		.uleb128 0x1
 12411 016b 13       		.uleb128 0x13
 12412 016c 00       		.byte	0
 12413 016d 00       		.byte	0
 12414 016e 1D       		.uleb128 0x1d
 12415 016f 8A8201   		.uleb128 0x410a
 12416 0172 00       		.byte	0
 12417 0173 02       		.uleb128 0x2
 12418 0174 18       		.uleb128 0x18
 12419 0175 9142     		.uleb128 0x2111
 12420 0177 18       		.uleb128 0x18
 12421 0178 00       		.byte	0
 12422 0179 00       		.byte	0
 12423 017a 1E       		.uleb128 0x1e
 12424 017b 898201   		.uleb128 0x4109
 12425 017e 01       		.byte	0x1
 12426 017f 11       		.uleb128 0x11
 12427 0180 01       		.uleb128 0x1
 12428 0181 31       		.uleb128 0x31
 12429 0182 13       		.uleb128 0x13
 12430 0183 00       		.byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 289


 12431 0184 00       		.byte	0
 12432 0185 1F       		.uleb128 0x1f
 12433 0186 34       		.uleb128 0x34
 12434 0187 00       		.byte	0
 12435 0188 03       		.uleb128 0x3
 12436 0189 0E       		.uleb128 0xe
 12437 018a 3A       		.uleb128 0x3a
 12438 018b 0B       		.uleb128 0xb
 12439 018c 3B       		.uleb128 0x3b
 12440 018d 05       		.uleb128 0x5
 12441 018e 49       		.uleb128 0x49
 12442 018f 13       		.uleb128 0x13
 12443 0190 02       		.uleb128 0x2
 12444 0191 17       		.uleb128 0x17
 12445 0192 00       		.byte	0
 12446 0193 00       		.byte	0
 12447 0194 20       		.uleb128 0x20
 12448 0195 0B       		.uleb128 0xb
 12449 0196 01       		.byte	0x1
 12450 0197 11       		.uleb128 0x11
 12451 0198 01       		.uleb128 0x1
 12452 0199 12       		.uleb128 0x12
 12453 019a 06       		.uleb128 0x6
 12454 019b 01       		.uleb128 0x1
 12455 019c 13       		.uleb128 0x13
 12456 019d 00       		.byte	0
 12457 019e 00       		.byte	0
 12458 019f 21       		.uleb128 0x21
 12459 01a0 898201   		.uleb128 0x4109
 12460 01a3 00       		.byte	0
 12461 01a4 11       		.uleb128 0x11
 12462 01a5 01       		.uleb128 0x1
 12463 01a6 31       		.uleb128 0x31
 12464 01a7 13       		.uleb128 0x13
 12465 01a8 00       		.byte	0
 12466 01a9 00       		.byte	0
 12467 01aa 22       		.uleb128 0x22
 12468 01ab 2E       		.uleb128 0x2e
 12469 01ac 01       		.byte	0x1
 12470 01ad 03       		.uleb128 0x3
 12471 01ae 0E       		.uleb128 0xe
 12472 01af 3A       		.uleb128 0x3a
 12473 01b0 0B       		.uleb128 0xb
 12474 01b1 3B       		.uleb128 0x3b
 12475 01b2 05       		.uleb128 0x5
 12476 01b3 27       		.uleb128 0x27
 12477 01b4 19       		.uleb128 0x19
 12478 01b5 49       		.uleb128 0x49
 12479 01b6 13       		.uleb128 0x13
 12480 01b7 11       		.uleb128 0x11
 12481 01b8 01       		.uleb128 0x1
 12482 01b9 12       		.uleb128 0x12
 12483 01ba 06       		.uleb128 0x6
 12484 01bb 40       		.uleb128 0x40
 12485 01bc 18       		.uleb128 0x18
 12486 01bd 9642     		.uleb128 0x2116
 12487 01bf 19       		.uleb128 0x19
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 290


 12488 01c0 01       		.uleb128 0x1
 12489 01c1 13       		.uleb128 0x13
 12490 01c2 00       		.byte	0
 12491 01c3 00       		.byte	0
 12492 01c4 23       		.uleb128 0x23
 12493 01c5 2E       		.uleb128 0x2e
 12494 01c6 01       		.byte	0x1
 12495 01c7 3F       		.uleb128 0x3f
 12496 01c8 19       		.uleb128 0x19
 12497 01c9 03       		.uleb128 0x3
 12498 01ca 0E       		.uleb128 0xe
 12499 01cb 3A       		.uleb128 0x3a
 12500 01cc 0B       		.uleb128 0xb
 12501 01cd 3B       		.uleb128 0x3b
 12502 01ce 05       		.uleb128 0x5
 12503 01cf 27       		.uleb128 0x27
 12504 01d0 19       		.uleb128 0x19
 12505 01d1 49       		.uleb128 0x49
 12506 01d2 13       		.uleb128 0x13
 12507 01d3 11       		.uleb128 0x11
 12508 01d4 01       		.uleb128 0x1
 12509 01d5 12       		.uleb128 0x12
 12510 01d6 06       		.uleb128 0x6
 12511 01d7 40       		.uleb128 0x40
 12512 01d8 18       		.uleb128 0x18
 12513 01d9 9742     		.uleb128 0x2117
 12514 01db 19       		.uleb128 0x19
 12515 01dc 01       		.uleb128 0x1
 12516 01dd 13       		.uleb128 0x13
 12517 01de 00       		.byte	0
 12518 01df 00       		.byte	0
 12519 01e0 24       		.uleb128 0x24
 12520 01e1 0B       		.uleb128 0xb
 12521 01e2 01       		.byte	0x1
 12522 01e3 55       		.uleb128 0x55
 12523 01e4 17       		.uleb128 0x17
 12524 01e5 01       		.uleb128 0x1
 12525 01e6 13       		.uleb128 0x13
 12526 01e7 00       		.byte	0
 12527 01e8 00       		.byte	0
 12528 01e9 25       		.uleb128 0x25
 12529 01ea 2E       		.uleb128 0x2e
 12530 01eb 01       		.byte	0x1
 12531 01ec 3F       		.uleb128 0x3f
 12532 01ed 19       		.uleb128 0x19
 12533 01ee 03       		.uleb128 0x3
 12534 01ef 0E       		.uleb128 0xe
 12535 01f0 3A       		.uleb128 0x3a
 12536 01f1 0B       		.uleb128 0xb
 12537 01f2 3B       		.uleb128 0x3b
 12538 01f3 05       		.uleb128 0x5
 12539 01f4 27       		.uleb128 0x27
 12540 01f5 19       		.uleb128 0x19
 12541 01f6 49       		.uleb128 0x49
 12542 01f7 13       		.uleb128 0x13
 12543 01f8 11       		.uleb128 0x11
 12544 01f9 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 291


 12545 01fa 12       		.uleb128 0x12
 12546 01fb 06       		.uleb128 0x6
 12547 01fc 40       		.uleb128 0x40
 12548 01fd 18       		.uleb128 0x18
 12549 01fe 9642     		.uleb128 0x2116
 12550 0200 19       		.uleb128 0x19
 12551 0201 01       		.uleb128 0x1
 12552 0202 13       		.uleb128 0x13
 12553 0203 00       		.byte	0
 12554 0204 00       		.byte	0
 12555 0205 26       		.uleb128 0x26
 12556 0206 2E       		.uleb128 0x2e
 12557 0207 01       		.byte	0x1
 12558 0208 3F       		.uleb128 0x3f
 12559 0209 19       		.uleb128 0x19
 12560 020a 03       		.uleb128 0x3
 12561 020b 0E       		.uleb128 0xe
 12562 020c 3A       		.uleb128 0x3a
 12563 020d 0B       		.uleb128 0xb
 12564 020e 3B       		.uleb128 0x3b
 12565 020f 0B       		.uleb128 0xb
 12566 0210 27       		.uleb128 0x27
 12567 0211 19       		.uleb128 0x19
 12568 0212 49       		.uleb128 0x49
 12569 0213 13       		.uleb128 0x13
 12570 0214 3C       		.uleb128 0x3c
 12571 0215 19       		.uleb128 0x19
 12572 0216 01       		.uleb128 0x1
 12573 0217 13       		.uleb128 0x13
 12574 0218 00       		.byte	0
 12575 0219 00       		.byte	0
 12576 021a 27       		.uleb128 0x27
 12577 021b 05       		.uleb128 0x5
 12578 021c 00       		.byte	0
 12579 021d 49       		.uleb128 0x49
 12580 021e 13       		.uleb128 0x13
 12581 021f 00       		.byte	0
 12582 0220 00       		.byte	0
 12583 0221 28       		.uleb128 0x28
 12584 0222 2E       		.uleb128 0x2e
 12585 0223 00       		.byte	0
 12586 0224 3F       		.uleb128 0x3f
 12587 0225 19       		.uleb128 0x19
 12588 0226 03       		.uleb128 0x3
 12589 0227 0E       		.uleb128 0xe
 12590 0228 3A       		.uleb128 0x3a
 12591 0229 0B       		.uleb128 0xb
 12592 022a 3B       		.uleb128 0x3b
 12593 022b 0B       		.uleb128 0xb
 12594 022c 27       		.uleb128 0x27
 12595 022d 19       		.uleb128 0x19
 12596 022e 49       		.uleb128 0x49
 12597 022f 13       		.uleb128 0x13
 12598 0230 3C       		.uleb128 0x3c
 12599 0231 19       		.uleb128 0x19
 12600 0232 00       		.byte	0
 12601 0233 00       		.byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 292


 12602 0234 00       		.byte	0
 12603              		.section	.debug_loc,"",%progbits
 12604              	.Ldebug_loc0:
 12605              	.LLST0:
 12606 0000 00000000 		.4byte	.LVL0
 12607 0004 02000000 		.4byte	.LVL1
 12608 0008 0100     		.2byte	0x1
 12609 000a 50       		.byte	0x50
 12610 000b 02000000 		.4byte	.LVL1
 12611 000f 14000000 		.4byte	.LFE0
 12612 0013 0400     		.2byte	0x4
 12613 0015 F3       		.byte	0xf3
 12614 0016 01       		.uleb128 0x1
 12615 0017 50       		.byte	0x50
 12616 0018 9F       		.byte	0x9f
 12617 0019 00000000 		.4byte	0
 12618 001d 00000000 		.4byte	0
 12619              	.LLST1:
 12620 0021 00000000 		.4byte	.LVL0
 12621 0025 02000000 		.4byte	.LVL1
 12622 0029 0100     		.2byte	0x1
 12623 002b 51       		.byte	0x51
 12624 002c 02000000 		.4byte	.LVL1
 12625 0030 14000000 		.4byte	.LFE0
 12626 0034 0400     		.2byte	0x4
 12627 0036 F3       		.byte	0xf3
 12628 0037 01       		.uleb128 0x1
 12629 0038 51       		.byte	0x51
 12630 0039 9F       		.byte	0x9f
 12631 003a 00000000 		.4byte	0
 12632 003e 00000000 		.4byte	0
 12633              	.LLST2:
 12634 0042 00000000 		.4byte	.LVL0
 12635 0046 02000000 		.4byte	.LVL1
 12636 004a 0100     		.2byte	0x1
 12637 004c 52       		.byte	0x52
 12638 004d 02000000 		.4byte	.LVL1
 12639 0051 0C000000 		.4byte	.LVL3
 12640 0055 0100     		.2byte	0x1
 12641 0057 53       		.byte	0x53
 12642 0058 0C000000 		.4byte	.LVL3
 12643 005c 0E000000 		.4byte	.LVL4
 12644 0060 0100     		.2byte	0x1
 12645 0062 52       		.byte	0x52
 12646 0063 0E000000 		.4byte	.LVL4
 12647 0067 14000000 		.4byte	.LFE0
 12648 006b 0100     		.2byte	0x1
 12649 006d 53       		.byte	0x53
 12650 006e 00000000 		.4byte	0
 12651 0072 00000000 		.4byte	0
 12652              	.LLST3:
 12653 0076 00000000 		.4byte	.LVL0
 12654 007a 02000000 		.4byte	.LVL1
 12655 007e 0100     		.2byte	0x1
 12656 0080 50       		.byte	0x50
 12657 0081 02000000 		.4byte	.LVL1
 12658 0085 0C000000 		.4byte	.LVL3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 293


 12659 0089 0300     		.2byte	0x3
 12660 008b 70       		.byte	0x70
 12661 008c 01       		.sleb128 1
 12662 008d 9F       		.byte	0x9f
 12663 008e 0C000000 		.4byte	.LVL3
 12664 0092 14000000 		.4byte	.LFE0
 12665 0096 0100     		.2byte	0x1
 12666 0098 50       		.byte	0x50
 12667 0099 00000000 		.4byte	0
 12668 009d 00000000 		.4byte	0
 12669              	.LLST4:
 12670 00a1 00000000 		.4byte	.LVL0
 12671 00a5 02000000 		.4byte	.LVL1
 12672 00a9 0100     		.2byte	0x1
 12673 00ab 51       		.byte	0x51
 12674 00ac 02000000 		.4byte	.LVL1
 12675 00b0 0A000000 		.4byte	.LVL2
 12676 00b4 0300     		.2byte	0x3
 12677 00b6 71       		.byte	0x71
 12678 00b7 01       		.sleb128 1
 12679 00b8 9F       		.byte	0x9f
 12680 00b9 0A000000 		.4byte	.LVL2
 12681 00bd 14000000 		.4byte	.LFE0
 12682 00c1 0100     		.2byte	0x1
 12683 00c3 51       		.byte	0x51
 12684 00c4 00000000 		.4byte	0
 12685 00c8 00000000 		.4byte	0
 12686              	.LLST5:
 12687 00cc 00000000 		.4byte	.LVL5
 12688 00d0 04000000 		.4byte	.LVL7
 12689 00d4 0100     		.2byte	0x1
 12690 00d6 50       		.byte	0x50
 12691 00d7 04000000 		.4byte	.LVL7
 12692 00db 12000000 		.4byte	.LFE1
 12693 00df 0400     		.2byte	0x4
 12694 00e1 F3       		.byte	0xf3
 12695 00e2 01       		.uleb128 0x1
 12696 00e3 50       		.byte	0x50
 12697 00e4 9F       		.byte	0x9f
 12698 00e5 00000000 		.4byte	0
 12699 00e9 00000000 		.4byte	0
 12700              	.LLST6:
 12701 00ed 00000000 		.4byte	.LVL5
 12702 00f1 02000000 		.4byte	.LVL6
 12703 00f5 0100     		.2byte	0x1
 12704 00f7 51       		.byte	0x51
 12705 00f8 02000000 		.4byte	.LVL6
 12706 00fc 12000000 		.4byte	.LFE1
 12707 0100 0400     		.2byte	0x4
 12708 0102 F3       		.byte	0xf3
 12709 0103 01       		.uleb128 0x1
 12710 0104 51       		.byte	0x51
 12711 0105 9F       		.byte	0x9f
 12712 0106 00000000 		.4byte	0
 12713 010a 00000000 		.4byte	0
 12714              	.LLST7:
 12715 010e 00000000 		.4byte	.LVL5
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 294


 12716 0112 04000000 		.4byte	.LVL7
 12717 0116 0100     		.2byte	0x1
 12718 0118 52       		.byte	0x52
 12719 0119 04000000 		.4byte	.LVL7
 12720 011d 0A000000 		.4byte	.LVL8
 12721 0121 0100     		.2byte	0x1
 12722 0123 53       		.byte	0x53
 12723 0124 0A000000 		.4byte	.LVL8
 12724 0128 0C000000 		.4byte	.LVL9
 12725 012c 0100     		.2byte	0x1
 12726 012e 52       		.byte	0x52
 12727 012f 0C000000 		.4byte	.LVL9
 12728 0133 12000000 		.4byte	.LFE1
 12729 0137 0100     		.2byte	0x1
 12730 0139 53       		.byte	0x53
 12731 013a 00000000 		.4byte	0
 12732 013e 00000000 		.4byte	0
 12733              	.LLST8:
 12734 0142 00000000 		.4byte	.LVL5
 12735 0146 04000000 		.4byte	.LVL7
 12736 014a 0100     		.2byte	0x1
 12737 014c 50       		.byte	0x50
 12738 014d 04000000 		.4byte	.LVL7
 12739 0151 0A000000 		.4byte	.LVL8
 12740 0155 0300     		.2byte	0x3
 12741 0157 70       		.byte	0x70
 12742 0158 01       		.sleb128 1
 12743 0159 9F       		.byte	0x9f
 12744 015a 0A000000 		.4byte	.LVL8
 12745 015e 12000000 		.4byte	.LFE1
 12746 0162 0100     		.2byte	0x1
 12747 0164 50       		.byte	0x50
 12748 0165 00000000 		.4byte	0
 12749 0169 00000000 		.4byte	0
 12750              	.LLST9:
 12751 016d 00000000 		.4byte	.LVL10
 12752 0171 06000000 		.4byte	.LVL12
 12753 0175 0100     		.2byte	0x1
 12754 0177 50       		.byte	0x50
 12755 0178 06000000 		.4byte	.LVL12
 12756 017c 08000000 		.4byte	.LVL13
 12757 0180 0100     		.2byte	0x1
 12758 0182 53       		.byte	0x53
 12759 0183 08000000 		.4byte	.LVL13
 12760 0187 24000000 		.4byte	.LFE2
 12761 018b 0400     		.2byte	0x4
 12762 018d F3       		.byte	0xf3
 12763 018e 01       		.uleb128 0x1
 12764 018f 50       		.byte	0x50
 12765 0190 9F       		.byte	0x9f
 12766 0191 00000000 		.4byte	0
 12767 0195 00000000 		.4byte	0
 12768              	.LLST10:
 12769 0199 00000000 		.4byte	.LVL10
 12770 019d 08000000 		.4byte	.LVL13
 12771 01a1 0100     		.2byte	0x1
 12772 01a3 51       		.byte	0x51
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 295


 12773 01a4 08000000 		.4byte	.LVL13
 12774 01a8 24000000 		.4byte	.LFE2
 12775 01ac 0400     		.2byte	0x4
 12776 01ae F3       		.byte	0xf3
 12777 01af 01       		.uleb128 0x1
 12778 01b0 51       		.byte	0x51
 12779 01b1 9F       		.byte	0x9f
 12780 01b2 00000000 		.4byte	0
 12781 01b6 00000000 		.4byte	0
 12782              	.LLST11:
 12783 01ba 00000000 		.4byte	.LVL10
 12784 01be 0E000000 		.4byte	.LVL15
 12785 01c2 0100     		.2byte	0x1
 12786 01c4 52       		.byte	0x52
 12787 01c5 0E000000 		.4byte	.LVL15
 12788 01c9 22000000 		.4byte	.LVL21
 12789 01cd 0100     		.2byte	0x1
 12790 01cf 54       		.byte	0x54
 12791 01d0 00000000 		.4byte	0
 12792 01d4 00000000 		.4byte	0
 12793              	.LLST12:
 12794 01d8 04000000 		.4byte	.LVL11
 12795 01dc 06000000 		.4byte	.LVL12
 12796 01e0 0100     		.2byte	0x1
 12797 01e2 50       		.byte	0x50
 12798 01e3 06000000 		.4byte	.LVL12
 12799 01e7 08000000 		.4byte	.LVL13
 12800 01eb 0100     		.2byte	0x1
 12801 01ed 53       		.byte	0x53
 12802 01ee 08000000 		.4byte	.LVL13
 12803 01f2 0C000000 		.4byte	.LVL14
 12804 01f6 0100     		.2byte	0x1
 12805 01f8 56       		.byte	0x56
 12806 01f9 0C000000 		.4byte	.LVL14
 12807 01fd 14000000 		.4byte	.LVL16
 12808 0201 0100     		.2byte	0x1
 12809 0203 53       		.byte	0x53
 12810 0204 14000000 		.4byte	.LVL16
 12811 0208 22000000 		.4byte	.LVL20
 12812 020c 0100     		.2byte	0x1
 12813 020e 56       		.byte	0x56
 12814 020f 00000000 		.4byte	0
 12815 0213 00000000 		.4byte	0
 12816              	.LLST13:
 12817 0217 04000000 		.4byte	.LVL11
 12818 021b 08000000 		.4byte	.LVL13
 12819 021f 0100     		.2byte	0x1
 12820 0221 51       		.byte	0x51
 12821 0222 08000000 		.4byte	.LVL13
 12822 0226 0C000000 		.4byte	.LVL14
 12823 022a 0100     		.2byte	0x1
 12824 022c 55       		.byte	0x55
 12825 022d 0C000000 		.4byte	.LVL14
 12826 0231 18000000 		.4byte	.LVL18
 12827 0235 0100     		.2byte	0x1
 12828 0237 51       		.byte	0x51
 12829 0238 18000000 		.4byte	.LVL18
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 296


 12830 023c 22000000 		.4byte	.LVL20
 12831 0240 0100     		.2byte	0x1
 12832 0242 55       		.byte	0x55
 12833 0243 00000000 		.4byte	0
 12834 0247 00000000 		.4byte	0
 12835              	.LLST14:
 12836 024b 04000000 		.4byte	.LVL11
 12837 024f 08000000 		.4byte	.LVL13
 12838 0253 0200     		.2byte	0x2
 12839 0255 30       		.byte	0x30
 12840 0256 9F       		.byte	0x9f
 12841 0257 08000000 		.4byte	.LVL13
 12842 025b 16000000 		.4byte	.LVL17
 12843 025f 0100     		.2byte	0x1
 12844 0261 50       		.byte	0x50
 12845 0262 1C000000 		.4byte	.LVL19
 12846 0266 24000000 		.4byte	.LFE2
 12847 026a 0100     		.2byte	0x1
 12848 026c 50       		.byte	0x50
 12849 026d 00000000 		.4byte	0
 12850 0271 00000000 		.4byte	0
 12851              	.LLST15:
 12852 0275 00000000 		.4byte	.LVL22
 12853 0279 04000000 		.4byte	.LVL23
 12854 027d 0100     		.2byte	0x1
 12855 027f 50       		.byte	0x50
 12856 0280 04000000 		.4byte	.LVL23
 12857 0284 10000000 		.4byte	.LVL24
 12858 0288 0100     		.2byte	0x1
 12859 028a 50       		.byte	0x50
 12860 028b 00000000 		.4byte	0
 12861 028f 00000000 		.4byte	0
 12862              	.LLST16:
 12863 0293 00000000 		.4byte	.LVL25
 12864 0297 58000000 		.4byte	.LVL30
 12865 029b 0100     		.2byte	0x1
 12866 029d 50       		.byte	0x50
 12867 029e 58000000 		.4byte	.LVL30
 12868 02a2 5A000000 		.4byte	.LVL31
 12869 02a6 0400     		.2byte	0x4
 12870 02a8 F3       		.byte	0xf3
 12871 02a9 01       		.uleb128 0x1
 12872 02aa 50       		.byte	0x50
 12873 02ab 9F       		.byte	0x9f
 12874 02ac 5A000000 		.4byte	.LVL31
 12875 02b0 5C000000 		.4byte	.LVL32
 12876 02b4 0100     		.2byte	0x1
 12877 02b6 50       		.byte	0x50
 12878 02b7 5C000000 		.4byte	.LVL32
 12879 02bb 5E000000 		.4byte	.LVL33
 12880 02bf 0400     		.2byte	0x4
 12881 02c1 F3       		.byte	0xf3
 12882 02c2 01       		.uleb128 0x1
 12883 02c3 50       		.byte	0x50
 12884 02c4 9F       		.byte	0x9f
 12885 02c5 5E000000 		.4byte	.LVL33
 12886 02c9 60000000 		.4byte	.LVL34
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 297


 12887 02cd 0100     		.2byte	0x1
 12888 02cf 50       		.byte	0x50
 12889 02d0 60000000 		.4byte	.LVL34
 12890 02d4 62000000 		.4byte	.LVL35
 12891 02d8 0400     		.2byte	0x4
 12892 02da F3       		.byte	0xf3
 12893 02db 01       		.uleb128 0x1
 12894 02dc 50       		.byte	0x50
 12895 02dd 9F       		.byte	0x9f
 12896 02de 62000000 		.4byte	.LVL35
 12897 02e2 7C000000 		.4byte	.LVL37
 12898 02e6 0100     		.2byte	0x1
 12899 02e8 50       		.byte	0x50
 12900 02e9 7C000000 		.4byte	.LVL37
 12901 02ed 7E000000 		.4byte	.LVL38
 12902 02f1 0400     		.2byte	0x4
 12903 02f3 F3       		.byte	0xf3
 12904 02f4 01       		.uleb128 0x1
 12905 02f5 50       		.byte	0x50
 12906 02f6 9F       		.byte	0x9f
 12907 02f7 7E000000 		.4byte	.LVL38
 12908 02fb 80000000 		.4byte	.LVL39
 12909 02ff 0100     		.2byte	0x1
 12910 0301 50       		.byte	0x50
 12911 0302 80000000 		.4byte	.LVL39
 12912 0306 82000000 		.4byte	.LVL40
 12913 030a 0400     		.2byte	0x4
 12914 030c F3       		.byte	0xf3
 12915 030d 01       		.uleb128 0x1
 12916 030e 50       		.byte	0x50
 12917 030f 9F       		.byte	0x9f
 12918 0310 82000000 		.4byte	.LVL40
 12919 0314 84000000 		.4byte	.LVL41
 12920 0318 0100     		.2byte	0x1
 12921 031a 50       		.byte	0x50
 12922 031b 84000000 		.4byte	.LVL41
 12923 031f 8C000000 		.4byte	.LFE4
 12924 0323 0400     		.2byte	0x4
 12925 0325 F3       		.byte	0xf3
 12926 0326 01       		.uleb128 0x1
 12927 0327 50       		.byte	0x50
 12928 0328 9F       		.byte	0x9f
 12929 0329 00000000 		.4byte	0
 12930 032d 00000000 		.4byte	0
 12931              	.LLST17:
 12932 0331 02000000 		.4byte	.LVL26
 12933 0335 0A000000 		.4byte	.LVL27
 12934 0339 0200     		.2byte	0x2
 12935 033b 30       		.byte	0x30
 12936 033c 9F       		.byte	0x9f
 12937 033d 0A000000 		.4byte	.LVL27
 12938 0341 6A000000 		.4byte	.LVL36
 12939 0345 0100     		.2byte	0x1
 12940 0347 53       		.byte	0x53
 12941 0348 7E000000 		.4byte	.LVL38
 12942 034c 82000000 		.4byte	.LVL40
 12943 0350 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 298


 12944 0352 53       		.byte	0x53
 12945 0353 00000000 		.4byte	0
 12946 0357 00000000 		.4byte	0
 12947              	.LLST18:
 12948 035b 02000000 		.4byte	.LVL26
 12949 035f 0A000000 		.4byte	.LVL27
 12950 0363 0200     		.2byte	0x2
 12951 0365 30       		.byte	0x30
 12952 0366 9F       		.byte	0x9f
 12953 0367 0A000000 		.4byte	.LVL27
 12954 036b 84000000 		.4byte	.LVL42
 12955 036f 0100     		.2byte	0x1
 12956 0371 55       		.byte	0x55
 12957 0372 00000000 		.4byte	0
 12958 0376 00000000 		.4byte	0
 12959              	.LLST19:
 12960 037a 00000000 		.4byte	.LVL43
 12961 037e 06000000 		.4byte	.LVL44
 12962 0382 0200     		.2byte	0x2
 12963 0384 30       		.byte	0x30
 12964 0385 9F       		.byte	0x9f
 12965 0386 06000000 		.4byte	.LVL44
 12966 038a 1A000000 		.4byte	.LVL46
 12967 038e 0100     		.2byte	0x1
 12968 0390 50       		.byte	0x50
 12969 0391 1A000000 		.4byte	.LVL46
 12970 0395 1E000000 		.4byte	.LVL47
 12971 0399 0300     		.2byte	0x3
 12972 039b 70       		.byte	0x70
 12973 039c 03       		.sleb128 3
 12974 039d 9F       		.byte	0x9f
 12975 039e 00000000 		.4byte	0
 12976 03a2 00000000 		.4byte	0
 12977              	.LLST20:
 12978 03a6 00000000 		.4byte	.LVL48
 12979 03aa 76000000 		.4byte	.LVL55
 12980 03ae 0100     		.2byte	0x1
 12981 03b0 50       		.byte	0x50
 12982 03b1 76000000 		.4byte	.LVL55
 12983 03b5 BA000000 		.4byte	.LVL59
 12984 03b9 0400     		.2byte	0x4
 12985 03bb F3       		.byte	0xf3
 12986 03bc 01       		.uleb128 0x1
 12987 03bd 50       		.byte	0x50
 12988 03be 9F       		.byte	0x9f
 12989 03bf BA000000 		.4byte	.LVL59
 12990 03c3 BC000000 		.4byte	.LVL60
 12991 03c7 0100     		.2byte	0x1
 12992 03c9 50       		.byte	0x50
 12993 03ca BC000000 		.4byte	.LVL60
 12994 03ce C8000000 		.4byte	.LFE6
 12995 03d2 0400     		.2byte	0x4
 12996 03d4 F3       		.byte	0xf3
 12997 03d5 01       		.uleb128 0x1
 12998 03d6 50       		.byte	0x50
 12999 03d7 9F       		.byte	0x9f
 13000 03d8 00000000 		.4byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 299


 13001 03dc 00000000 		.4byte	0
 13002              	.LLST21:
 13003 03e0 00000000 		.4byte	.LVL48
 13004 03e4 9C000000 		.4byte	.LVL56
 13005 03e8 0100     		.2byte	0x1
 13006 03ea 51       		.byte	0x51
 13007 03eb 9C000000 		.4byte	.LVL56
 13008 03ef A6000000 		.4byte	.LVL57
 13009 03f3 0400     		.2byte	0x4
 13010 03f5 F3       		.byte	0xf3
 13011 03f6 01       		.uleb128 0x1
 13012 03f7 51       		.byte	0x51
 13013 03f8 9F       		.byte	0x9f
 13014 03f9 A6000000 		.4byte	.LVL57
 13015 03fd AA000000 		.4byte	.LVL58
 13016 0401 0100     		.2byte	0x1
 13017 0403 51       		.byte	0x51
 13018 0404 AA000000 		.4byte	.LVL58
 13019 0408 BA000000 		.4byte	.LVL59
 13020 040c 0400     		.2byte	0x4
 13021 040e F3       		.byte	0xf3
 13022 040f 01       		.uleb128 0x1
 13023 0410 51       		.byte	0x51
 13024 0411 9F       		.byte	0x9f
 13025 0412 BA000000 		.4byte	.LVL59
 13026 0416 C0000000 		.4byte	.LVL61
 13027 041a 0100     		.2byte	0x1
 13028 041c 51       		.byte	0x51
 13029 041d C0000000 		.4byte	.LVL61
 13030 0421 C8000000 		.4byte	.LFE6
 13031 0425 0400     		.2byte	0x4
 13032 0427 F3       		.byte	0xf3
 13033 0428 01       		.uleb128 0x1
 13034 0429 51       		.byte	0x51
 13035 042a 9F       		.byte	0x9f
 13036 042b 00000000 		.4byte	0
 13037 042f 00000000 		.4byte	0
 13038              	.LLST22:
 13039 0433 02000000 		.4byte	.LVL49
 13040 0437 08000000 		.4byte	.LVL50
 13041 043b 0200     		.2byte	0x2
 13042 043d 30       		.byte	0x30
 13043 043e 9F       		.byte	0x9f
 13044 043f 08000000 		.4byte	.LVL50
 13045 0443 4A000000 		.4byte	.LVL53
 13046 0447 0100     		.2byte	0x1
 13047 0449 53       		.byte	0x53
 13048 044a 4C000000 		.4byte	.LVL54
 13049 044e C8000000 		.4byte	.LFE6
 13050 0452 0100     		.2byte	0x1
 13051 0454 53       		.byte	0x53
 13052 0455 00000000 		.4byte	0
 13053 0459 00000000 		.4byte	0
 13054              	.LLST23:
 13055 045d 00000000 		.4byte	.LVL62
 13056 0461 02000000 		.4byte	.LVL63
 13057 0465 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 300


 13058 0467 50       		.byte	0x50
 13059 0468 02000000 		.4byte	.LVL63
 13060 046c 38000000 		.4byte	.LVL70
 13061 0470 0100     		.2byte	0x1
 13062 0472 50       		.byte	0x50
 13063 0473 38000000 		.4byte	.LVL70
 13064 0477 42000000 		.4byte	.LVL71
 13065 047b 0600     		.2byte	0x6
 13066 047d F3       		.byte	0xf3
 13067 047e 01       		.uleb128 0x1
 13068 047f 50       		.byte	0x50
 13069 0480 31       		.byte	0x31
 13070 0481 1C       		.byte	0x1c
 13071 0482 9F       		.byte	0x9f
 13072 0483 42000000 		.4byte	.LVL71
 13073 0487 44000000 		.4byte	.LVL72
 13074 048b 0100     		.2byte	0x1
 13075 048d 50       		.byte	0x50
 13076 048e 44000000 		.4byte	.LVL72
 13077 0492 46000000 		.4byte	.LVL73
 13078 0496 0600     		.2byte	0x6
 13079 0498 F3       		.byte	0xf3
 13080 0499 01       		.uleb128 0x1
 13081 049a 50       		.byte	0x50
 13082 049b 31       		.byte	0x31
 13083 049c 1C       		.byte	0x1c
 13084 049d 9F       		.byte	0x9f
 13085 049e 46000000 		.4byte	.LVL73
 13086 04a2 48000000 		.4byte	.LVL74
 13087 04a6 0100     		.2byte	0x1
 13088 04a8 50       		.byte	0x50
 13089 04a9 48000000 		.4byte	.LVL74
 13090 04ad 50000000 		.4byte	.LFE7
 13091 04b1 0600     		.2byte	0x6
 13092 04b3 F3       		.byte	0xf3
 13093 04b4 01       		.uleb128 0x1
 13094 04b5 50       		.byte	0x50
 13095 04b6 31       		.byte	0x31
 13096 04b7 1C       		.byte	0x1c
 13097 04b8 9F       		.byte	0x9f
 13098 04b9 00000000 		.4byte	0
 13099 04bd 00000000 		.4byte	0
 13100              	.LLST24:
 13101 04c1 12000000 		.4byte	.LVL64
 13102 04c5 14000000 		.4byte	.LVL65
 13103 04c9 0E00     		.2byte	0xe
 13104 04cb 70       		.byte	0x70
 13105 04cc 00       		.sleb128 0
 13106 04cd 31       		.byte	0x31
 13107 04ce 24       		.byte	0x24
 13108 04cf 70       		.byte	0x70
 13109 04d0 00       		.sleb128 0
 13110 04d1 22       		.byte	0x22
 13111 04d2 32       		.byte	0x32
 13112 04d3 24       		.byte	0x24
 13113 04d4 72       		.byte	0x72
 13114 04d5 00       		.sleb128 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 301


 13115 04d6 22       		.byte	0x22
 13116 04d7 23       		.byte	0x23
 13117 04d8 0A       		.uleb128 0xa
 13118 04d9 14000000 		.4byte	.LVL65
 13119 04dd 1C000000 		.4byte	.LVL66
 13120 04e1 0F00     		.2byte	0xf
 13121 04e3 70       		.byte	0x70
 13122 04e4 00       		.sleb128 0
 13123 04e5 31       		.byte	0x31
 13124 04e6 24       		.byte	0x24
 13125 04e7 70       		.byte	0x70
 13126 04e8 00       		.sleb128 0
 13127 04e9 22       		.byte	0x22
 13128 04ea 32       		.byte	0x32
 13129 04eb 24       		.byte	0x24
 13130 04ec 03       		.byte	0x3
 13131 04ed 0A000000 		.4byte	.LANCHOR0+10
 13132 04f1 22       		.byte	0x22
 13133 04f2 1C000000 		.4byte	.LVL66
 13134 04f6 22000000 		.4byte	.LVL67
 13135 04fa 0100     		.2byte	0x1
 13136 04fc 53       		.byte	0x53
 13137 04fd 22000000 		.4byte	.LVL67
 13138 0501 24000000 		.4byte	.LVL68
 13139 0505 0300     		.2byte	0x3
 13140 0507 73       		.byte	0x73
 13141 0508 01       		.sleb128 1
 13142 0509 9F       		.byte	0x9f
 13143 050a 24000000 		.4byte	.LVL68
 13144 050e 36000000 		.4byte	.LVL69
 13145 0512 0100     		.2byte	0x1
 13146 0514 53       		.byte	0x53
 13147 0515 46000000 		.4byte	.LVL73
 13148 0519 48000000 		.4byte	.LVL74
 13149 051d 0100     		.2byte	0x1
 13150 051f 53       		.byte	0x53
 13151 0520 00000000 		.4byte	0
 13152 0524 00000000 		.4byte	0
 13153              	.LLST25:
 13154 0528 02000000 		.4byte	.LVL76
 13155 052c 0A000000 		.4byte	.LVL77
 13156 0530 0200     		.2byte	0x2
 13157 0532 30       		.byte	0x30
 13158 0533 9F       		.byte	0x9f
 13159 0534 0A000000 		.4byte	.LVL77
 13160 0538 2C000000 		.4byte	.LFE8
 13161 053c 0100     		.2byte	0x1
 13162 053e 53       		.byte	0x53
 13163 053f 00000000 		.4byte	0
 13164 0543 00000000 		.4byte	0
 13165              	.LLST26:
 13166 0547 00000000 		.4byte	.LVL79
 13167 054b 24000000 		.4byte	.LVL84
 13168 054f 0100     		.2byte	0x1
 13169 0551 50       		.byte	0x50
 13170 0552 24000000 		.4byte	.LVL84
 13171 0556 28010000 		.4byte	.LFE22
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 302


 13172 055a 0400     		.2byte	0x4
 13173 055c F3       		.byte	0xf3
 13174 055d 01       		.uleb128 0x1
 13175 055e 50       		.byte	0x50
 13176 055f 9F       		.byte	0x9f
 13177 0560 00000000 		.4byte	0
 13178 0564 00000000 		.4byte	0
 13179              	.LLST27:
 13180 0568 00000000 		.4byte	.LVL79
 13181 056c 20000000 		.4byte	.LVL82
 13182 0570 0100     		.2byte	0x1
 13183 0572 51       		.byte	0x51
 13184 0573 20000000 		.4byte	.LVL82
 13185 0577 C0000000 		.4byte	.LVL109
 13186 057b 0100     		.2byte	0x1
 13187 057d 5B       		.byte	0x5b
 13188 057e C0000000 		.4byte	.LVL109
 13189 0582 CC000000 		.4byte	.LVL111
 13190 0586 0100     		.2byte	0x1
 13191 0588 51       		.byte	0x51
 13192 0589 CC000000 		.4byte	.LVL111
 13193 058d 12010000 		.4byte	.LVL120
 13194 0591 0100     		.2byte	0x1
 13195 0593 5B       		.byte	0x5b
 13196 0594 12010000 		.4byte	.LVL120
 13197 0598 14010000 		.4byte	.LVL121
 13198 059c 0100     		.2byte	0x1
 13199 059e 51       		.byte	0x51
 13200 059f 14010000 		.4byte	.LVL121
 13201 05a3 14010000 		.4byte	.LVL126
 13202 05a7 0100     		.2byte	0x1
 13203 05a9 5B       		.byte	0x5b
 13204 05aa 14010000 		.4byte	.LVL126
 13205 05ae 28010000 		.4byte	.LFE22
 13206 05b2 0400     		.2byte	0x4
 13207 05b4 F3       		.byte	0xf3
 13208 05b5 01       		.uleb128 0x1
 13209 05b6 51       		.byte	0x51
 13210 05b7 9F       		.byte	0x9f
 13211 05b8 00000000 		.4byte	0
 13212 05bc 00000000 		.4byte	0
 13213              	.LLST28:
 13214 05c0 2C000000 		.4byte	.LVL86
 13215 05c4 36000000 		.4byte	.LVL87
 13216 05c8 0200     		.2byte	0x2
 13217 05ca 30       		.byte	0x30
 13218 05cb 9F       		.byte	0x9f
 13219 05cc 38000000 		.4byte	.LVL88
 13220 05d0 62000000 		.4byte	.LVL93
 13221 05d4 0100     		.2byte	0x1
 13222 05d6 5A       		.byte	0x5a
 13223 05d7 62000000 		.4byte	.LVL93
 13224 05db 68000000 		.4byte	.LVL94
 13225 05df 0100     		.2byte	0x1
 13226 05e1 53       		.byte	0x53
 13227 05e2 68000000 		.4byte	.LVL94
 13228 05e6 76000000 		.4byte	.LVL97
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 303


 13229 05ea 0100     		.2byte	0x1
 13230 05ec 5A       		.byte	0x5a
 13231 05ed 76000000 		.4byte	.LVL97
 13232 05f1 7C000000 		.4byte	.LVL98
 13233 05f5 0100     		.2byte	0x1
 13234 05f7 51       		.byte	0x51
 13235 05f8 7C000000 		.4byte	.LVL98
 13236 05fc 98000000 		.4byte	.LVL100
 13237 0600 0100     		.2byte	0x1
 13238 0602 5A       		.byte	0x5a
 13239 0603 98000000 		.4byte	.LVL100
 13240 0607 9A000000 		.4byte	.LVL101
 13241 060b 0100     		.2byte	0x1
 13242 060d 51       		.byte	0x51
 13243 060e 9A000000 		.4byte	.LVL101
 13244 0612 AA000000 		.4byte	.LVL102
 13245 0616 0100     		.2byte	0x1
 13246 0618 5A       		.byte	0x5a
 13247 0619 AA000000 		.4byte	.LVL102
 13248 061d AE000000 		.4byte	.LVL104
 13249 0621 0100     		.2byte	0x1
 13250 0623 52       		.byte	0x52
 13251 0624 AE000000 		.4byte	.LVL104
 13252 0628 FA000000 		.4byte	.LVL116
 13253 062c 0100     		.2byte	0x1
 13254 062e 5A       		.byte	0x5a
 13255 062f FA000000 		.4byte	.LVL116
 13256 0633 06010000 		.4byte	.LVL118
 13257 0637 0100     		.2byte	0x1
 13258 0639 51       		.byte	0x51
 13259 063a 06010000 		.4byte	.LVL118
 13260 063e 14010000 		.4byte	.LVL121
 13261 0642 0100     		.2byte	0x1
 13262 0644 5A       		.byte	0x5a
 13263 0645 00000000 		.4byte	0
 13264 0649 00000000 		.4byte	0
 13265              	.LLST29:
 13266 064d 3E000000 		.4byte	.LVL90
 13267 0651 5E000000 		.4byte	.LVL92
 13268 0655 0500     		.2byte	0x5
 13269 0657 74       		.byte	0x74
 13270 0658 00       		.sleb128 0
 13271 0659 73       		.byte	0x73
 13272 065a 00       		.sleb128 0
 13273 065b 22       		.byte	0x22
 13274 065c 5E000000 		.4byte	.LVL92
 13275 0660 68000000 		.4byte	.LVL94
 13276 0664 0700     		.2byte	0x7
 13277 0666 74       		.byte	0x74
 13278 0667 00       		.sleb128 0
 13279 0668 71       		.byte	0x71
 13280 0669 00       		.sleb128 0
 13281 066a 22       		.byte	0x22
 13282 066b 31       		.byte	0x31
 13283 066c 1C       		.byte	0x1c
 13284 066d 68000000 		.4byte	.LVL94
 13285 0671 6A000000 		.4byte	.LVL95
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 304


 13286 0675 0500     		.2byte	0x5
 13287 0677 74       		.byte	0x74
 13288 0678 00       		.sleb128 0
 13289 0679 73       		.byte	0x73
 13290 067a 00       		.sleb128 0
 13291 067b 22       		.byte	0x22
 13292 067c 6A000000 		.4byte	.LVL95
 13293 0680 72000000 		.4byte	.LVL96
 13294 0684 0700     		.2byte	0x7
 13295 0686 74       		.byte	0x74
 13296 0687 00       		.sleb128 0
 13297 0688 71       		.byte	0x71
 13298 0689 00       		.sleb128 0
 13299 068a 22       		.byte	0x22
 13300 068b 31       		.byte	0x31
 13301 068c 1C       		.byte	0x1c
 13302 068d 72000000 		.4byte	.LVL96
 13303 0691 7C000000 		.4byte	.LVL98
 13304 0695 0700     		.2byte	0x7
 13305 0697 74       		.byte	0x74
 13306 0698 00       		.sleb128 0
 13307 0699 79       		.byte	0x79
 13308 069a 00       		.sleb128 0
 13309 069b 22       		.byte	0x22
 13310 069c 31       		.byte	0x31
 13311 069d 1C       		.byte	0x1c
 13312 069e 7C000000 		.4byte	.LVL98
 13313 06a2 AC000000 		.4byte	.LVL103
 13314 06a6 0100     		.2byte	0x1
 13315 06a8 55       		.byte	0x55
 13316 06a9 AC000000 		.4byte	.LVL103
 13317 06ad AE000000 		.4byte	.LVL104
 13318 06b1 0300     		.2byte	0x3
 13319 06b3 75       		.byte	0x75
 13320 06b4 20       		.sleb128 32
 13321 06b5 9F       		.byte	0x9f
 13322 06b6 AE000000 		.4byte	.LVL104
 13323 06ba B6000000 		.4byte	.LVL106
 13324 06be 0100     		.2byte	0x1
 13325 06c0 55       		.byte	0x55
 13326 06c1 B6000000 		.4byte	.LVL106
 13327 06c5 B8000000 		.4byte	.LVL107
 13328 06c9 0500     		.2byte	0x5
 13329 06cb 74       		.byte	0x74
 13330 06cc 00       		.sleb128 0
 13331 06cd 73       		.byte	0x73
 13332 06ce 00       		.sleb128 0
 13333 06cf 22       		.byte	0x22
 13334 06d0 B8000000 		.4byte	.LVL107
 13335 06d4 C6000000 		.4byte	.LVL110
 13336 06d8 0100     		.2byte	0x1
 13337 06da 55       		.byte	0x55
 13338 06db C6000000 		.4byte	.LVL110
 13339 06df 06010000 		.4byte	.LVL118
 13340 06e3 0100     		.2byte	0x1
 13341 06e5 53       		.byte	0x53
 13342 06e6 06010000 		.4byte	.LVL118
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 305


 13343 06ea 0E010000 		.4byte	.LVL119
 13344 06ee 0500     		.2byte	0x5
 13345 06f0 74       		.byte	0x74
 13346 06f1 00       		.sleb128 0
 13347 06f2 73       		.byte	0x73
 13348 06f3 00       		.sleb128 0
 13349 06f4 22       		.byte	0x22
 13350 06f5 0E010000 		.4byte	.LVL119
 13351 06f9 12010000 		.4byte	.LVL120
 13352 06fd 0100     		.2byte	0x1
 13353 06ff 55       		.byte	0x55
 13354 0700 12010000 		.4byte	.LVL120
 13355 0704 14010000 		.4byte	.LVL121
 13356 0708 0100     		.2byte	0x1
 13357 070a 53       		.byte	0x53
 13358 070b 00000000 		.4byte	0
 13359 070f 00000000 		.4byte	0
 13360              	.LLST30:
 13361 0713 22000000 		.4byte	.LVL83
 13362 0717 26000000 		.4byte	.LVL85
 13363 071b 0100     		.2byte	0x1
 13364 071d 51       		.byte	0x51
 13365 071e 26000000 		.4byte	.LVL85
 13366 0722 2B000000 		.4byte	.LVL86-1
 13367 0726 0100     		.2byte	0x1
 13368 0728 50       		.byte	0x50
 13369 0729 2B000000 		.4byte	.LVL86-1
 13370 072d D2000000 		.4byte	.LVL112
 13371 0731 0100     		.2byte	0x1
 13372 0733 58       		.byte	0x58
 13373 0734 D2000000 		.4byte	.LVL112
 13374 0738 DC000000 		.4byte	.LVL113
 13375 073c 0100     		.2byte	0x1
 13376 073e 51       		.byte	0x51
 13377 073f DC000000 		.4byte	.LVL113
 13378 0743 14010000 		.4byte	.LVL124
 13379 0747 0100     		.2byte	0x1
 13380 0749 58       		.byte	0x58
 13381 074a 00000000 		.4byte	0
 13382 074e 00000000 		.4byte	0
 13383              	.LLST31:
 13384 0752 2C000000 		.4byte	.LVL86
 13385 0756 36000000 		.4byte	.LVL87
 13386 075a 0200     		.2byte	0x2
 13387 075c 38       		.byte	0x38
 13388 075d 9F       		.byte	0x9f
 13389 075e 38000000 		.4byte	.LVL88
 13390 0762 5A000000 		.4byte	.LVL91
 13391 0766 0100     		.2byte	0x1
 13392 0768 57       		.byte	0x57
 13393 0769 5A000000 		.4byte	.LVL91
 13394 076d 68000000 		.4byte	.LVL94
 13395 0771 0200     		.2byte	0x2
 13396 0773 3B       		.byte	0x3b
 13397 0774 9F       		.byte	0x9f
 13398 0775 68000000 		.4byte	.LVL94
 13399 0779 14010000 		.4byte	.LVL123
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 306


 13400 077d 0100     		.2byte	0x1
 13401 077f 57       		.byte	0x57
 13402 0780 00000000 		.4byte	0
 13403 0784 00000000 		.4byte	0
 13404              	.LLST32:
 13405 0788 2C000000 		.4byte	.LVL86
 13406 078c 36000000 		.4byte	.LVL87
 13407 0790 0200     		.2byte	0x2
 13408 0792 30       		.byte	0x30
 13409 0793 9F       		.byte	0x9f
 13410 0794 36000000 		.4byte	.LVL87
 13411 0798 38000000 		.4byte	.LVL88
 13412 079c 0100     		.2byte	0x1
 13413 079e 59       		.byte	0x59
 13414 079f 38000000 		.4byte	.LVL88
 13415 07a3 3C000000 		.4byte	.LVL89
 13416 07a7 0100     		.2byte	0x1
 13417 07a9 53       		.byte	0x53
 13418 07aa 3C000000 		.4byte	.LVL89
 13419 07ae 72000000 		.4byte	.LVL96
 13420 07b2 0100     		.2byte	0x1
 13421 07b4 51       		.byte	0x51
 13422 07b5 72000000 		.4byte	.LVL96
 13423 07b9 B6000000 		.4byte	.LVL106
 13424 07bd 0100     		.2byte	0x1
 13425 07bf 59       		.byte	0x59
 13426 07c0 B6000000 		.4byte	.LVL106
 13427 07c4 BA000000 		.4byte	.LVL108
 13428 07c8 0100     		.2byte	0x1
 13429 07ca 51       		.byte	0x51
 13430 07cb BA000000 		.4byte	.LVL108
 13431 07cf 06010000 		.4byte	.LVL118
 13432 07d3 0100     		.2byte	0x1
 13433 07d5 59       		.byte	0x59
 13434 07d6 06010000 		.4byte	.LVL118
 13435 07da 0E010000 		.4byte	.LVL119
 13436 07de 0100     		.2byte	0x1
 13437 07e0 51       		.byte	0x51
 13438 07e1 0E010000 		.4byte	.LVL119
 13439 07e5 14010000 		.4byte	.LVL125
 13440 07e9 0100     		.2byte	0x1
 13441 07eb 59       		.byte	0x59
 13442 07ec 00000000 		.4byte	0
 13443 07f0 00000000 		.4byte	0
 13444              	.LLST33:
 13445 07f4 2C000000 		.4byte	.LVL86
 13446 07f8 36000000 		.4byte	.LVL87
 13447 07fc 0200     		.2byte	0x2
 13448 07fe 30       		.byte	0x30
 13449 07ff 9F       		.byte	0x9f
 13450 0800 38000000 		.4byte	.LVL88
 13451 0804 5A000000 		.4byte	.LVL91
 13452 0808 0100     		.2byte	0x1
 13453 080a 56       		.byte	0x56
 13454 080b 5A000000 		.4byte	.LVL91
 13455 080f 68000000 		.4byte	.LVL94
 13456 0813 0200     		.2byte	0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 307


 13457 0815 38       		.byte	0x38
 13458 0816 9F       		.byte	0x9f
 13459 0817 68000000 		.4byte	.LVL94
 13460 081b AE000000 		.4byte	.LVL104
 13461 081f 0100     		.2byte	0x1
 13462 0821 56       		.byte	0x56
 13463 0822 AE000000 		.4byte	.LVL104
 13464 0826 B4000000 		.4byte	.LVL105
 13465 082a 0300     		.2byte	0x3
 13466 082c 76       		.byte	0x76
 13467 082d 01       		.sleb128 1
 13468 082e 9F       		.byte	0x9f
 13469 082f B4000000 		.4byte	.LVL105
 13470 0833 14010000 		.4byte	.LVL122
 13471 0837 0100     		.2byte	0x1
 13472 0839 56       		.byte	0x56
 13473 083a 00000000 		.4byte	0
 13474 083e 00000000 		.4byte	0
 13475              	.LLST34:
 13476 0842 10000000 		.4byte	.LVL80
 13477 0846 B8000000 		.4byte	.LVL107
 13478 084a 0100     		.2byte	0x1
 13479 084c 54       		.byte	0x54
 13480 084d 06010000 		.4byte	.LVL118
 13481 0851 12010000 		.4byte	.LVL120
 13482 0855 0100     		.2byte	0x1
 13483 0857 54       		.byte	0x54
 13484 0858 00000000 		.4byte	0
 13485 085c 00000000 		.4byte	0
 13486              	.LLST35:
 13487 0860 00000000 		.4byte	.LVL127
 13488 0864 14000000 		.4byte	.LVL130
 13489 0868 0100     		.2byte	0x1
 13490 086a 50       		.byte	0x50
 13491 086b 14000000 		.4byte	.LVL130
 13492 086f 7E000000 		.4byte	.LFE23
 13493 0873 0400     		.2byte	0x4
 13494 0875 F3       		.byte	0xf3
 13495 0876 01       		.uleb128 0x1
 13496 0877 50       		.byte	0x50
 13497 0878 9F       		.byte	0x9f
 13498 0879 00000000 		.4byte	0
 13499 087d 00000000 		.4byte	0
 13500              	.LLST36:
 13501 0881 0E000000 		.4byte	.LVL129
 13502 0885 14000000 		.4byte	.LVL130
 13503 0889 0200     		.2byte	0x2
 13504 088b 30       		.byte	0x30
 13505 088c 9F       		.byte	0x9f
 13506 088d 14000000 		.4byte	.LVL130
 13507 0891 2C000000 		.4byte	.LVL135
 13508 0895 0100     		.2byte	0x1
 13509 0897 52       		.byte	0x52
 13510 0898 34000000 		.4byte	.LVL137
 13511 089c 3A000000 		.4byte	.LVL139
 13512 08a0 0200     		.2byte	0x2
 13513 08a2 38       		.byte	0x38
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 308


 13514 08a3 9F       		.byte	0x9f
 13515 08a4 3A000000 		.4byte	.LVL139
 13516 08a8 4A000000 		.4byte	.LVL145
 13517 08ac 0100     		.2byte	0x1
 13518 08ae 52       		.byte	0x52
 13519 08af 00000000 		.4byte	0
 13520 08b3 00000000 		.4byte	0
 13521              	.LLST37:
 13522 08b7 0E000000 		.4byte	.LVL129
 13523 08bb 14000000 		.4byte	.LVL130
 13524 08bf 0200     		.2byte	0x2
 13525 08c1 74       		.byte	0x74
 13526 08c2 0C       		.sleb128 12
 13527 08c3 00000000 		.4byte	0
 13528 08c7 00000000 		.4byte	0
 13529              	.LLST38:
 13530 08cb 0E000000 		.4byte	.LVL129
 13531 08cf 78000000 		.4byte	.LVL146
 13532 08d3 0100     		.2byte	0x1
 13533 08d5 54       		.byte	0x54
 13534 08d6 00000000 		.4byte	0
 13535 08da 00000000 		.4byte	0
 13536              	.LLST39:
 13537 08de 06000000 		.4byte	.LVL128
 13538 08e2 20000000 		.4byte	.LVL132
 13539 08e6 0100     		.2byte	0x1
 13540 08e8 53       		.byte	0x53
 13541 08e9 20000000 		.4byte	.LVL132
 13542 08ed 26000000 		.4byte	.LVL134
 13543 08f1 0300     		.2byte	0x3
 13544 08f3 73       		.byte	0x73
 13545 08f4 01       		.sleb128 1
 13546 08f5 9F       		.byte	0x9f
 13547 08f6 26000000 		.4byte	.LVL134
 13548 08fa 30000000 		.4byte	.LVL136
 13549 08fe 0100     		.2byte	0x1
 13550 0900 53       		.byte	0x53
 13551 0901 30000000 		.4byte	.LVL136
 13552 0905 36000000 		.4byte	.LVL138
 13553 0909 0300     		.2byte	0x3
 13554 090b 73       		.byte	0x73
 13555 090c 01       		.sleb128 1
 13556 090d 9F       		.byte	0x9f
 13557 090e 36000000 		.4byte	.LVL138
 13558 0912 40000000 		.4byte	.LVL141
 13559 0916 0100     		.2byte	0x1
 13560 0918 53       		.byte	0x53
 13561 0919 40000000 		.4byte	.LVL141
 13562 091d 46000000 		.4byte	.LVL144
 13563 0921 0300     		.2byte	0x3
 13564 0923 73       		.byte	0x73
 13565 0924 01       		.sleb128 1
 13566 0925 9F       		.byte	0x9f
 13567 0926 46000000 		.4byte	.LVL144
 13568 092a 7E000000 		.4byte	.LFE23
 13569 092e 0100     		.2byte	0x1
 13570 0930 53       		.byte	0x53
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 309


 13571 0931 00000000 		.4byte	0
 13572 0935 00000000 		.4byte	0
 13573              	.LLST40:
 13574 0939 16000000 		.4byte	.LVL131
 13575 093d 20000000 		.4byte	.LVL132
 13576 0941 0500     		.2byte	0x5
 13577 0943 74       		.byte	0x74
 13578 0944 00       		.sleb128 0
 13579 0945 72       		.byte	0x72
 13580 0946 00       		.sleb128 0
 13581 0947 22       		.byte	0x22
 13582 0948 20000000 		.4byte	.LVL132
 13583 094c 26000000 		.4byte	.LVL134
 13584 0950 0100     		.2byte	0x1
 13585 0952 50       		.byte	0x50
 13586 0953 3C000000 		.4byte	.LVL140
 13587 0957 42000000 		.4byte	.LVL142
 13588 095b 0500     		.2byte	0x5
 13589 095d 74       		.byte	0x74
 13590 095e 00       		.sleb128 0
 13591 095f 72       		.byte	0x72
 13592 0960 00       		.sleb128 0
 13593 0961 22       		.byte	0x22
 13594 0962 42000000 		.4byte	.LVL142
 13595 0966 46000000 		.4byte	.LVL144
 13596 096a 0100     		.2byte	0x1
 13597 096c 50       		.byte	0x50
 13598 096d 00000000 		.4byte	0
 13599 0971 00000000 		.4byte	0
 13600              	.LLST41:
 13601 0975 00000000 		.4byte	.LVL147
 13602 0979 1E000000 		.4byte	.LVL150
 13603 097d 0100     		.2byte	0x1
 13604 097f 50       		.byte	0x50
 13605 0980 1E000000 		.4byte	.LVL150
 13606 0984 6E000000 		.4byte	.LVL160
 13607 0988 0100     		.2byte	0x1
 13608 098a 54       		.byte	0x54
 13609 098b 6E000000 		.4byte	.LVL160
 13610 098f 70000000 		.4byte	.LVL161
 13611 0993 0100     		.2byte	0x1
 13612 0995 50       		.byte	0x50
 13613 0996 70000000 		.4byte	.LVL161
 13614 099a 7C000000 		.4byte	.LVL163
 13615 099e 0100     		.2byte	0x1
 13616 09a0 54       		.byte	0x54
 13617 09a1 7C000000 		.4byte	.LVL163
 13618 09a5 82000000 		.4byte	.LFE9
 13619 09a9 0400     		.2byte	0x4
 13620 09ab F3       		.byte	0xf3
 13621 09ac 01       		.uleb128 0x1
 13622 09ad 50       		.byte	0x50
 13623 09ae 9F       		.byte	0x9f
 13624 09af 00000000 		.4byte	0
 13625 09b3 00000000 		.4byte	0
 13626              	.LLST42:
 13627 09b7 00000000 		.4byte	.LVL147
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 310


 13628 09bb 18000000 		.4byte	.LVL149
 13629 09bf 0100     		.2byte	0x1
 13630 09c1 51       		.byte	0x51
 13631 09c2 18000000 		.4byte	.LVL149
 13632 09c6 6E000000 		.4byte	.LVL160
 13633 09ca 0100     		.2byte	0x1
 13634 09cc 56       		.byte	0x56
 13635 09cd 6E000000 		.4byte	.LVL160
 13636 09d1 72000000 		.4byte	.LVL162
 13637 09d5 0100     		.2byte	0x1
 13638 09d7 51       		.byte	0x51
 13639 09d8 72000000 		.4byte	.LVL162
 13640 09dc 7C000000 		.4byte	.LVL165
 13641 09e0 0100     		.2byte	0x1
 13642 09e2 56       		.byte	0x56
 13643 09e3 7C000000 		.4byte	.LVL165
 13644 09e7 82000000 		.4byte	.LFE9
 13645 09eb 0400     		.2byte	0x4
 13646 09ed F3       		.byte	0xf3
 13647 09ee 01       		.uleb128 0x1
 13648 09ef 51       		.byte	0x51
 13649 09f0 9F       		.byte	0x9f
 13650 09f1 00000000 		.4byte	0
 13651 09f5 00000000 		.4byte	0
 13652              	.LLST43:
 13653 09f9 0C000000 		.4byte	.LVL148
 13654 09fd 7C000000 		.4byte	.LVL164
 13655 0a01 0100     		.2byte	0x1
 13656 0a03 55       		.byte	0x55
 13657 0a04 00000000 		.4byte	0
 13658 0a08 00000000 		.4byte	0
 13659              	.LLST44:
 13660 0a0c 3A000000 		.4byte	.LVL152
 13661 0a10 3C000000 		.4byte	.LVL153
 13662 0a14 0200     		.2byte	0x2
 13663 0a16 74       		.byte	0x74
 13664 0a17 03       		.sleb128 3
 13665 0a18 3C000000 		.4byte	.LVL153
 13666 0a1c 4E000000 		.4byte	.LVL156
 13667 0a20 0100     		.2byte	0x1
 13668 0a22 57       		.byte	0x57
 13669 0a23 4E000000 		.4byte	.LVL156
 13670 0a27 50000000 		.4byte	.LVL157
 13671 0a2b 0300     		.2byte	0x3
 13672 0a2d 77       		.byte	0x77
 13673 0a2e 01       		.sleb128 1
 13674 0a2f 9F       		.byte	0x9f
 13675 0a30 50000000 		.4byte	.LVL157
 13676 0a34 54000000 		.4byte	.LVL158
 13677 0a38 0100     		.2byte	0x1
 13678 0a3a 57       		.byte	0x57
 13679 0a3b 00000000 		.4byte	0
 13680 0a3f 00000000 		.4byte	0
 13681              	.LLST45:
 13682 0a43 00000000 		.4byte	.LVL166
 13683 0a47 0C000000 		.4byte	.LVL168
 13684 0a4b 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 311


 13685 0a4d 50       		.byte	0x50
 13686 0a4e 0C000000 		.4byte	.LVL168
 13687 0a52 86000000 		.4byte	.LVL170
 13688 0a56 0100     		.2byte	0x1
 13689 0a58 54       		.byte	0x54
 13690 0a59 86000000 		.4byte	.LVL170
 13691 0a5d 98000000 		.4byte	.LFE25
 13692 0a61 0400     		.2byte	0x4
 13693 0a63 F3       		.byte	0xf3
 13694 0a64 01       		.uleb128 0x1
 13695 0a65 50       		.byte	0x50
 13696 0a66 9F       		.byte	0x9f
 13697 0a67 00000000 		.4byte	0
 13698 0a6b 00000000 		.4byte	0
 13699              	.LLST46:
 13700 0a6f 00000000 		.4byte	.LVL166
 13701 0a73 08000000 		.4byte	.LVL167
 13702 0a77 0100     		.2byte	0x1
 13703 0a79 51       		.byte	0x51
 13704 0a7a 08000000 		.4byte	.LVL167
 13705 0a7e 11000000 		.4byte	.LVL169-1
 13706 0a82 0100     		.2byte	0x1
 13707 0a84 52       		.byte	0x52
 13708 0a85 11000000 		.4byte	.LVL169-1
 13709 0a89 98000000 		.4byte	.LFE25
 13710 0a8d 0400     		.2byte	0x4
 13711 0a8f F3       		.byte	0xf3
 13712 0a90 01       		.uleb128 0x1
 13713 0a91 51       		.byte	0x51
 13714 0a92 9F       		.byte	0x9f
 13715 0a93 00000000 		.4byte	0
 13716 0a97 00000000 		.4byte	0
 13717              	.LLST47:
 13718 0a9b 00000000 		.4byte	.LVL171
 13719 0a9f 14000000 		.4byte	.LVL172
 13720 0aa3 0100     		.2byte	0x1
 13721 0aa5 50       		.byte	0x50
 13722 0aa6 14000000 		.4byte	.LVL172
 13723 0aaa 20000000 		.4byte	.LVL174
 13724 0aae 0400     		.2byte	0x4
 13725 0ab0 F3       		.byte	0xf3
 13726 0ab1 01       		.uleb128 0x1
 13727 0ab2 50       		.byte	0x50
 13728 0ab3 9F       		.byte	0x9f
 13729 0ab4 20000000 		.4byte	.LVL174
 13730 0ab8 22000000 		.4byte	.LVL175
 13731 0abc 0100     		.2byte	0x1
 13732 0abe 50       		.byte	0x50
 13733 0abf 22000000 		.4byte	.LVL175
 13734 0ac3 24000000 		.4byte	.LVL176
 13735 0ac7 0400     		.2byte	0x4
 13736 0ac9 F3       		.byte	0xf3
 13737 0aca 01       		.uleb128 0x1
 13738 0acb 50       		.byte	0x50
 13739 0acc 9F       		.byte	0x9f
 13740 0acd 24000000 		.4byte	.LVL176
 13741 0ad1 26000000 		.4byte	.LVL177
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 312


 13742 0ad5 0100     		.2byte	0x1
 13743 0ad7 50       		.byte	0x50
 13744 0ad8 26000000 		.4byte	.LVL177
 13745 0adc 28000000 		.4byte	.LVL178
 13746 0ae0 0400     		.2byte	0x4
 13747 0ae2 F3       		.byte	0xf3
 13748 0ae3 01       		.uleb128 0x1
 13749 0ae4 50       		.byte	0x50
 13750 0ae5 9F       		.byte	0x9f
 13751 0ae6 28000000 		.4byte	.LVL178
 13752 0aea 2A000000 		.4byte	.LVL179
 13753 0aee 0100     		.2byte	0x1
 13754 0af0 50       		.byte	0x50
 13755 0af1 2A000000 		.4byte	.LVL179
 13756 0af5 30000000 		.4byte	.LFE27
 13757 0af9 0400     		.2byte	0x4
 13758 0afb F3       		.byte	0xf3
 13759 0afc 01       		.uleb128 0x1
 13760 0afd 50       		.byte	0x50
 13761 0afe 9F       		.byte	0x9f
 13762 0aff 00000000 		.4byte	0
 13763 0b03 00000000 		.4byte	0
 13764              	.LLST48:
 13765 0b07 00000000 		.4byte	.LVL171
 13766 0b0b 17000000 		.4byte	.LVL173-1
 13767 0b0f 0100     		.2byte	0x1
 13768 0b11 51       		.byte	0x51
 13769 0b12 17000000 		.4byte	.LVL173-1
 13770 0b16 20000000 		.4byte	.LVL174
 13771 0b1a 0400     		.2byte	0x4
 13772 0b1c F3       		.byte	0xf3
 13773 0b1d 01       		.uleb128 0x1
 13774 0b1e 51       		.byte	0x51
 13775 0b1f 9F       		.byte	0x9f
 13776 0b20 20000000 		.4byte	.LVL174
 13777 0b24 2C000000 		.4byte	.LVL180
 13778 0b28 0100     		.2byte	0x1
 13779 0b2a 51       		.byte	0x51
 13780 0b2b 2C000000 		.4byte	.LVL180
 13781 0b2f 30000000 		.4byte	.LFE27
 13782 0b33 0400     		.2byte	0x4
 13783 0b35 F3       		.byte	0xf3
 13784 0b36 01       		.uleb128 0x1
 13785 0b37 51       		.byte	0x51
 13786 0b38 9F       		.byte	0x9f
 13787 0b39 00000000 		.4byte	0
 13788 0b3d 00000000 		.4byte	0
 13789              	.LLST49:
 13790 0b41 00000000 		.4byte	.LVL181
 13791 0b45 48000000 		.4byte	.LVL193
 13792 0b49 0100     		.2byte	0x1
 13793 0b4b 50       		.byte	0x50
 13794 0b4c 48000000 		.4byte	.LVL193
 13795 0b50 14030000 		.4byte	.LVL243
 13796 0b54 0400     		.2byte	0x4
 13797 0b56 F3       		.byte	0xf3
 13798 0b57 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 313


 13799 0b58 50       		.byte	0x50
 13800 0b59 9F       		.byte	0x9f
 13801 0b5a 14030000 		.4byte	.LVL243
 13802 0b5e 16030000 		.4byte	.LVL244
 13803 0b62 0100     		.2byte	0x1
 13804 0b64 50       		.byte	0x50
 13805 0b65 16030000 		.4byte	.LVL244
 13806 0b69 18030000 		.4byte	.LVL245
 13807 0b6d 0400     		.2byte	0x4
 13808 0b6f F3       		.byte	0xf3
 13809 0b70 01       		.uleb128 0x1
 13810 0b71 50       		.byte	0x50
 13811 0b72 9F       		.byte	0x9f
 13812 0b73 18030000 		.4byte	.LVL245
 13813 0b77 1A030000 		.4byte	.LVL246
 13814 0b7b 0100     		.2byte	0x1
 13815 0b7d 50       		.byte	0x50
 13816 0b7e 1A030000 		.4byte	.LVL246
 13817 0b82 B4030000 		.4byte	.LFE26
 13818 0b86 0400     		.2byte	0x4
 13819 0b88 F3       		.byte	0xf3
 13820 0b89 01       		.uleb128 0x1
 13821 0b8a 50       		.byte	0x50
 13822 0b8b 9F       		.byte	0x9f
 13823 0b8c 00000000 		.4byte	0
 13824 0b90 00000000 		.4byte	0
 13825              	.LLST50:
 13826 0b94 00000000 		.4byte	.LVL181
 13827 0b98 4B000000 		.4byte	.LVL194-1
 13828 0b9c 0100     		.2byte	0x1
 13829 0b9e 51       		.byte	0x51
 13830 0b9f 4B000000 		.4byte	.LVL194-1
 13831 0ba3 14030000 		.4byte	.LVL243
 13832 0ba7 0400     		.2byte	0x4
 13833 0ba9 F3       		.byte	0xf3
 13834 0baa 01       		.uleb128 0x1
 13835 0bab 51       		.byte	0x51
 13836 0bac 9F       		.byte	0x9f
 13837 0bad 14030000 		.4byte	.LVL243
 13838 0bb1 1C030000 		.4byte	.LVL247
 13839 0bb5 0100     		.2byte	0x1
 13840 0bb7 51       		.byte	0x51
 13841 0bb8 1C030000 		.4byte	.LVL247
 13842 0bbc B4030000 		.4byte	.LFE26
 13843 0bc0 0400     		.2byte	0x4
 13844 0bc2 F3       		.byte	0xf3
 13845 0bc3 01       		.uleb128 0x1
 13846 0bc4 51       		.byte	0x51
 13847 0bc5 9F       		.byte	0x9f
 13848 0bc6 00000000 		.4byte	0
 13849 0bca 00000000 		.4byte	0
 13850              	.LLST51:
 13851 0bce 00000000 		.4byte	.LVL181
 13852 0bd2 1A000000 		.4byte	.LVL184
 13853 0bd6 0100     		.2byte	0x1
 13854 0bd8 52       		.byte	0x52
 13855 0bd9 1A000000 		.4byte	.LVL184
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 314


 13856 0bdd 24000000 		.4byte	.LVL186
 13857 0be1 0400     		.2byte	0x4
 13858 0be3 F3       		.byte	0xf3
 13859 0be4 01       		.uleb128 0x1
 13860 0be5 52       		.byte	0x52
 13861 0be6 9F       		.byte	0x9f
 13862 0be7 24000000 		.4byte	.LVL186
 13863 0beb 28000000 		.4byte	.LVL188
 13864 0bef 0100     		.2byte	0x1
 13865 0bf1 52       		.byte	0x52
 13866 0bf2 28000000 		.4byte	.LVL188
 13867 0bf6 B4030000 		.4byte	.LFE26
 13868 0bfa 0400     		.2byte	0x4
 13869 0bfc F3       		.byte	0xf3
 13870 0bfd 01       		.uleb128 0x1
 13871 0bfe 52       		.byte	0x52
 13872 0bff 9F       		.byte	0x9f
 13873 0c00 00000000 		.4byte	0
 13874 0c04 00000000 		.4byte	0
 13875              	.LLST52:
 13876 0c08 84000000 		.4byte	.LVL199
 13877 0c0c B8000000 		.4byte	.LVL203
 13878 0c10 0100     		.2byte	0x1
 13879 0c12 50       		.byte	0x50
 13880 0c13 BE000000 		.4byte	.LVL204
 13881 0c17 58010000 		.4byte	.LVL219
 13882 0c1b 0100     		.2byte	0x1
 13883 0c1d 50       		.byte	0x50
 13884 0c1e AE010000 		.4byte	.LVL228
 13885 0c22 BA010000 		.4byte	.LVL229
 13886 0c26 0200     		.2byte	0x2
 13887 0c28 31       		.byte	0x31
 13888 0c29 9F       		.byte	0x9f
 13889 0c2a BA010000 		.4byte	.LVL229
 13890 0c2e 14030000 		.4byte	.LVL243
 13891 0c32 0100     		.2byte	0x1
 13892 0c34 56       		.byte	0x56
 13893 0c35 2C030000 		.4byte	.LVL255
 13894 0c39 2E030000 		.4byte	.LVL256
 13895 0c3d 0100     		.2byte	0x1
 13896 0c3f 50       		.byte	0x50
 13897 0c40 30030000 		.4byte	.LVL257
 13898 0c44 32030000 		.4byte	.LVL258
 13899 0c48 0100     		.2byte	0x1
 13900 0c4a 50       		.byte	0x50
 13901 0c4b 34030000 		.4byte	.LVL259
 13902 0c4f 36030000 		.4byte	.LVL260
 13903 0c53 0100     		.2byte	0x1
 13904 0c55 50       		.byte	0x50
 13905 0c56 38030000 		.4byte	.LVL261
 13906 0c5a 3A030000 		.4byte	.LVL262
 13907 0c5e 0100     		.2byte	0x1
 13908 0c60 50       		.byte	0x50
 13909 0c61 3C030000 		.4byte	.LVL263
 13910 0c65 3E030000 		.4byte	.LVL264
 13911 0c69 0100     		.2byte	0x1
 13912 0c6b 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 315


 13913 0c6c 40030000 		.4byte	.LVL265
 13914 0c70 42030000 		.4byte	.LVL266
 13915 0c74 0100     		.2byte	0x1
 13916 0c76 50       		.byte	0x50
 13917 0c77 44030000 		.4byte	.LVL267
 13918 0c7b 46030000 		.4byte	.LVL268
 13919 0c7f 0100     		.2byte	0x1
 13920 0c81 50       		.byte	0x50
 13921 0c82 54030000 		.4byte	.LVL275
 13922 0c86 5E030000 		.4byte	.LVL280
 13923 0c8a 0100     		.2byte	0x1
 13924 0c8c 56       		.byte	0x56
 13925 0c8d 00000000 		.4byte	0
 13926 0c91 00000000 		.4byte	0
 13927              	.LLST53:
 13928 0c95 1A010000 		.4byte	.LVL212
 13929 0c99 1C010000 		.4byte	.LVL213
 13930 0c9d 0300     		.2byte	0x3
 13931 0c9f 75       		.byte	0x75
 13932 0ca0 C000     		.sleb128 64
 13933 0ca2 1C010000 		.4byte	.LVL213
 13934 0ca6 26010000 		.4byte	.LVL214
 13935 0caa 0100     		.2byte	0x1
 13936 0cac 53       		.byte	0x53
 13937 0cad 26010000 		.4byte	.LVL214
 13938 0cb1 2C010000 		.4byte	.LVL217
 13939 0cb5 0300     		.2byte	0x3
 13940 0cb7 72       		.byte	0x72
 13941 0cb8 01       		.sleb128 1
 13942 0cb9 9F       		.byte	0x9f
 13943 0cba 2C010000 		.4byte	.LVL217
 13944 0cbe 2E010000 		.4byte	.LVL218
 13945 0cc2 0500     		.2byte	0x5
 13946 0cc4 75       		.byte	0x75
 13947 0cc5 00       		.sleb128 0
 13948 0cc6 73       		.byte	0x73
 13949 0cc7 00       		.sleb128 0
 13950 0cc8 22       		.byte	0x22
 13951 0cc9 2E010000 		.4byte	.LVL218
 13952 0ccd A7010000 		.4byte	.LVL227-1
 13953 0cd1 0100     		.2byte	0x1
 13954 0cd3 51       		.byte	0x51
 13955 0cd4 38030000 		.4byte	.LVL261
 13956 0cd8 3C030000 		.4byte	.LVL263
 13957 0cdc 0100     		.2byte	0x1
 13958 0cde 53       		.byte	0x53
 13959 0cdf 3C030000 		.4byte	.LVL263
 13960 0ce3 50030000 		.4byte	.LVL273
 13961 0ce7 0100     		.2byte	0x1
 13962 0ce9 51       		.byte	0x51
 13963 0cea 00000000 		.4byte	0
 13964 0cee 00000000 		.4byte	0
 13965              	.LLST54:
 13966 0cf2 88000000 		.4byte	.LVL200
 13967 0cf6 C0000000 		.4byte	.LVL205
 13968 0cfa 0200     		.2byte	0x2
 13969 0cfc 30       		.byte	0x30
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 316


 13970 0cfd 9F       		.byte	0x9f
 13971 0cfe C4000000 		.4byte	.LVL207
 13972 0d02 C6000000 		.4byte	.LVL208
 13973 0d06 0200     		.2byte	0x2
 13974 0d08 30       		.byte	0x30
 13975 0d09 9F       		.byte	0x9f
 13976 0d0a 00000000 		.4byte	0
 13977 0d0e 00000000 		.4byte	0
 13978              	.LLST55:
 13979 0d12 88000000 		.4byte	.LVL200
 13980 0d16 C0000000 		.4byte	.LVL205
 13981 0d1a 0400     		.2byte	0x4
 13982 0d1c 75       		.byte	0x75
 13983 0d1d EE03     		.sleb128 494
 13984 0d1f 9F       		.byte	0x9f
 13985 0d20 C4000000 		.4byte	.LVL207
 13986 0d24 C6000000 		.4byte	.LVL208
 13987 0d28 0400     		.2byte	0x4
 13988 0d2a 75       		.byte	0x75
 13989 0d2b EE03     		.sleb128 494
 13990 0d2d 9F       		.byte	0x9f
 13991 0d2e 00000000 		.4byte	0
 13992 0d32 00000000 		.4byte	0
 13993              	.LLST56:
 13994 0d36 14000000 		.4byte	.LVL183
 13995 0d3a 26000000 		.4byte	.LVL187
 13996 0d3e 0100     		.2byte	0x1
 13997 0d40 54       		.byte	0x54
 13998 0d41 26000000 		.4byte	.LVL187
 13999 0d45 28000000 		.4byte	.LVL188
 14000 0d49 0B00     		.2byte	0xb
 14001 0d4b 73       		.byte	0x73
 14002 0d4c 00       		.sleb128 0
 14003 0d4d 94       		.byte	0x94
 14004 0d4e 01       		.byte	0x1
 14005 0d4f 08       		.byte	0x8
 14006 0d50 FF       		.byte	0xff
 14007 0d51 1A       		.byte	0x1a
 14008 0d52 08       		.byte	0x8
 14009 0d53 30       		.byte	0x30
 14010 0d54 1C       		.byte	0x1c
 14011 0d55 9F       		.byte	0x9f
 14012 0d56 28000000 		.4byte	.LVL188
 14013 0d5a 98000000 		.4byte	.LVL201
 14014 0d5e 0100     		.2byte	0x1
 14015 0d60 54       		.byte	0x54
 14016 0d61 C0000000 		.4byte	.LVL205
 14017 0d65 C2000000 		.4byte	.LVL206
 14018 0d69 0100     		.2byte	0x1
 14019 0d6b 54       		.byte	0x54
 14020 0d6c C4000000 		.4byte	.LVL207
 14021 0d70 C6000000 		.4byte	.LVL208
 14022 0d74 0100     		.2byte	0x1
 14023 0d76 54       		.byte	0x54
 14024 0d77 14030000 		.4byte	.LVL243
 14025 0d7b 2C030000 		.4byte	.LVL255
 14026 0d7f 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 317


 14027 0d81 54       		.byte	0x54
 14028 0d82 00000000 		.4byte	0
 14029 0d86 00000000 		.4byte	0
 14030              	.LLST57:
 14031 0d8a 4C000000 		.4byte	.LVL194
 14032 0d8e 5E000000 		.4byte	.LVL195
 14033 0d92 0100     		.2byte	0x1
 14034 0d94 50       		.byte	0x50
 14035 0d95 6C000000 		.4byte	.LVL196
 14036 0d99 7E000000 		.4byte	.LVL198
 14037 0d9d 0100     		.2byte	0x1
 14038 0d9f 50       		.byte	0x50
 14039 0da0 1C030000 		.4byte	.LVL247
 14040 0da4 1E030000 		.4byte	.LVL248
 14041 0da8 0100     		.2byte	0x1
 14042 0daa 50       		.byte	0x50
 14043 0dab 20030000 		.4byte	.LVL249
 14044 0daf 22030000 		.4byte	.LVL250
 14045 0db3 0100     		.2byte	0x1
 14046 0db5 50       		.byte	0x50
 14047 0db6 24030000 		.4byte	.LVL251
 14048 0dba 26030000 		.4byte	.LVL252
 14049 0dbe 0100     		.2byte	0x1
 14050 0dc0 50       		.byte	0x50
 14051 0dc1 28030000 		.4byte	.LVL253
 14052 0dc5 2A030000 		.4byte	.LVL254
 14053 0dc9 0100     		.2byte	0x1
 14054 0dcb 50       		.byte	0x50
 14055 0dcc 00000000 		.4byte	0
 14056 0dd0 00000000 		.4byte	0
 14057              	.LLST58:
 14058 0dd4 7C000000 		.4byte	.LVL197
 14059 0dd8 B6000000 		.4byte	.LVL202
 14060 0ddc 0200     		.2byte	0x2
 14061 0dde 30       		.byte	0x30
 14062 0ddf 9F       		.byte	0x9f
 14063 0de0 B6000000 		.4byte	.LVL202
 14064 0de4 C0000000 		.4byte	.LVL205
 14065 0de8 0100     		.2byte	0x1
 14066 0dea 54       		.byte	0x54
 14067 0deb C0000000 		.4byte	.LVL205
 14068 0def C6000000 		.4byte	.LVL208
 14069 0df3 0200     		.2byte	0x2
 14070 0df5 30       		.byte	0x30
 14071 0df6 9F       		.byte	0x9f
 14072 0df7 C6000000 		.4byte	.LVL208
 14073 0dfb 06030000 		.4byte	.LVL241
 14074 0dff 0100     		.2byte	0x1
 14075 0e01 54       		.byte	0x54
 14076 0e02 2C030000 		.4byte	.LVL255
 14077 0e06 5E030000 		.4byte	.LVL280
 14078 0e0a 0100     		.2byte	0x1
 14079 0e0c 54       		.byte	0x54
 14080 0e0d 00000000 		.4byte	0
 14081 0e11 00000000 		.4byte	0
 14082              	.LLST59:
 14083 0e15 F6000000 		.4byte	.LVL209
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 318


 14084 0e19 FC000000 		.4byte	.LVL210
 14085 0e1d 0100     		.2byte	0x1
 14086 0e1f 57       		.byte	0x57
 14087 0e20 FC000000 		.4byte	.LVL210
 14088 0e24 14010000 		.4byte	.LVL211
 14089 0e28 1400     		.2byte	0x14
 14090 0e2a 75       		.byte	0x75
 14091 0e2b C700     		.sleb128 71
 14092 0e2d 94       		.byte	0x94
 14093 0e2e 01       		.byte	0x1
 14094 0e2f 08       		.byte	0x8
 14095 0e30 FF       		.byte	0xff
 14096 0e31 1A       		.byte	0x1a
 14097 0e32 38       		.byte	0x38
 14098 0e33 24       		.byte	0x24
 14099 0e34 75       		.byte	0x75
 14100 0e35 C600     		.sleb128 70
 14101 0e37 94       		.byte	0x94
 14102 0e38 01       		.byte	0x1
 14103 0e39 08       		.byte	0x8
 14104 0e3a FF       		.byte	0xff
 14105 0e3b 1A       		.byte	0x1a
 14106 0e3c 21       		.byte	0x21
 14107 0e3d 9F       		.byte	0x9f
 14108 0e3e 14010000 		.4byte	.LVL211
 14109 0e42 28010000 		.4byte	.LVL215
 14110 0e46 0100     		.2byte	0x1
 14111 0e48 57       		.byte	0x57
 14112 0e49 28010000 		.4byte	.LVL215
 14113 0e4d 2A010000 		.4byte	.LVL216
 14114 0e51 0100     		.2byte	0x1
 14115 0e53 53       		.byte	0x53
 14116 0e54 2A010000 		.4byte	.LVL216
 14117 0e58 14030000 		.4byte	.LVL243
 14118 0e5c 0100     		.2byte	0x1
 14119 0e5e 5B       		.byte	0x5b
 14120 0e5f 38030000 		.4byte	.LVL261
 14121 0e63 3C030000 		.4byte	.LVL263
 14122 0e67 0100     		.2byte	0x1
 14123 0e69 57       		.byte	0x57
 14124 0e6a 3C030000 		.4byte	.LVL263
 14125 0e6e 5E030000 		.4byte	.LVL280
 14126 0e72 0100     		.2byte	0x1
 14127 0e74 5B       		.byte	0x5b
 14128 0e75 00000000 		.4byte	0
 14129 0e79 00000000 		.4byte	0
 14130              	.LLST60:
 14131 0e7d 60010000 		.4byte	.LVL220
 14132 0e81 66010000 		.4byte	.LVL221
 14133 0e85 0100     		.2byte	0x1
 14134 0e87 50       		.byte	0x50
 14135 0e88 66010000 		.4byte	.LVL221
 14136 0e8c 7E010000 		.4byte	.LVL222
 14137 0e90 1400     		.2byte	0x14
 14138 0e92 75       		.byte	0x75
 14139 0e93 C400     		.sleb128 68
 14140 0e95 94       		.byte	0x94
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 319


 14141 0e96 01       		.byte	0x1
 14142 0e97 08       		.byte	0x8
 14143 0e98 FF       		.byte	0xff
 14144 0e99 1A       		.byte	0x1a
 14145 0e9a 38       		.byte	0x38
 14146 0e9b 24       		.byte	0x24
 14147 0e9c 75       		.byte	0x75
 14148 0e9d C300     		.sleb128 67
 14149 0e9f 94       		.byte	0x94
 14150 0ea0 01       		.byte	0x1
 14151 0ea1 08       		.byte	0x8
 14152 0ea2 FF       		.byte	0xff
 14153 0ea3 1A       		.byte	0x1a
 14154 0ea4 21       		.byte	0x21
 14155 0ea5 9F       		.byte	0x9f
 14156 0ea6 7E010000 		.4byte	.LVL222
 14157 0eaa A4010000 		.4byte	.LVL226
 14158 0eae 0100     		.2byte	0x1
 14159 0eb0 50       		.byte	0x50
 14160 0eb1 48030000 		.4byte	.LVL269
 14161 0eb5 4A030000 		.4byte	.LVL270
 14162 0eb9 0100     		.2byte	0x1
 14163 0ebb 50       		.byte	0x50
 14164 0ebc 4C030000 		.4byte	.LVL271
 14165 0ec0 4E030000 		.4byte	.LVL272
 14166 0ec4 0100     		.2byte	0x1
 14167 0ec6 50       		.byte	0x50
 14168 0ec7 00000000 		.4byte	0
 14169 0ecb 00000000 		.4byte	0
 14170              	.LLST61:
 14171 0ecf 9C010000 		.4byte	.LVL225
 14172 0ed3 A7010000 		.4byte	.LVL227-1
 14173 0ed7 0100     		.2byte	0x1
 14174 0ed9 53       		.byte	0x53
 14175 0eda A7010000 		.4byte	.LVL227-1
 14176 0ede 14030000 		.4byte	.LVL243
 14177 0ee2 0100     		.2byte	0x1
 14178 0ee4 5A       		.byte	0x5a
 14179 0ee5 4C030000 		.4byte	.LVL271
 14180 0ee9 50030000 		.4byte	.LVL273
 14181 0eed 0100     		.2byte	0x1
 14182 0eef 53       		.byte	0x53
 14183 0ef0 50030000 		.4byte	.LVL273
 14184 0ef4 5E030000 		.4byte	.LVL280
 14185 0ef8 0100     		.2byte	0x1
 14186 0efa 5A       		.byte	0x5a
 14187 0efb 00000000 		.4byte	0
 14188 0eff 00000000 		.4byte	0
 14189              	.LLST62:
 14190 0f03 A8010000 		.4byte	.LVL227
 14191 0f07 52020000 		.4byte	.LVL239
 14192 0f0b 0100     		.2byte	0x1
 14193 0f0d 50       		.byte	0x50
 14194 0f0e 52020000 		.4byte	.LVL239
 14195 0f12 57020000 		.4byte	.LVL240-1
 14196 0f16 0600     		.2byte	0x6
 14197 0f18 75       		.byte	0x75
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 320


 14198 0f19 18       		.sleb128 24
 14199 0f1a 06       		.byte	0x6
 14200 0f1b 32       		.byte	0x32
 14201 0f1c 1C       		.byte	0x1c
 14202 0f1d 9F       		.byte	0x9f
 14203 0f1e 50030000 		.4byte	.LVL273
 14204 0f22 52030000 		.4byte	.LVL274
 14205 0f26 0100     		.2byte	0x1
 14206 0f28 50       		.byte	0x50
 14207 0f29 54030000 		.4byte	.LVL275
 14208 0f2d 56030000 		.4byte	.LVL276
 14209 0f31 0100     		.2byte	0x1
 14210 0f33 50       		.byte	0x50
 14211 0f34 56030000 		.4byte	.LVL276
 14212 0f38 58030000 		.4byte	.LVL277
 14213 0f3c 0300     		.2byte	0x3
 14214 0f3e 73       		.byte	0x73
 14215 0f3f 7E       		.sleb128 -2
 14216 0f40 9F       		.byte	0x9f
 14217 0f41 58030000 		.4byte	.LVL277
 14218 0f45 5A030000 		.4byte	.LVL278
 14219 0f49 0100     		.2byte	0x1
 14220 0f4b 50       		.byte	0x50
 14221 0f4c 5A030000 		.4byte	.LVL278
 14222 0f50 5C030000 		.4byte	.LVL279
 14223 0f54 0300     		.2byte	0x3
 14224 0f56 73       		.byte	0x73
 14225 0f57 7E       		.sleb128 -2
 14226 0f58 9F       		.byte	0x9f
 14227 0f59 5C030000 		.4byte	.LVL279
 14228 0f5d 5E030000 		.4byte	.LVL280
 14229 0f61 0100     		.2byte	0x1
 14230 0f63 50       		.byte	0x50
 14231 0f64 00000000 		.4byte	0
 14232 0f68 00000000 		.4byte	0
 14233              	.LLST63:
 14234 0f6c FE010000 		.4byte	.LVL233
 14235 0f70 00020000 		.4byte	.LVL234
 14236 0f74 0100     		.2byte	0x1
 14237 0f76 53       		.byte	0x53
 14238 0f77 20020000 		.4byte	.LVL236
 14239 0f7b 24020000 		.4byte	.LVL237
 14240 0f7f 0100     		.2byte	0x1
 14241 0f81 53       		.byte	0x53
 14242 0f82 24020000 		.4byte	.LVL237
 14243 0f86 26020000 		.4byte	.LVL238
 14244 0f8a 0400     		.2byte	0x4
 14245 0f8c 73       		.byte	0x73
 14246 0f8d 817C     		.sleb128 -511
 14247 0f8f 9F       		.byte	0x9f
 14248 0f90 00000000 		.4byte	0
 14249 0f94 00000000 		.4byte	0
 14250              	.LLST64:
 14251 0f98 8C010000 		.4byte	.LVL223
 14252 0f9c 98010000 		.4byte	.LVL224
 14253 0fa0 0100     		.2byte	0x1
 14254 0fa2 52       		.byte	0x52
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 321


 14255 0fa3 98010000 		.4byte	.LVL224
 14256 0fa7 D6010000 		.4byte	.LVL231
 14257 0fab 0100     		.2byte	0x1
 14258 0fad 59       		.byte	0x59
 14259 0fae D6010000 		.4byte	.LVL231
 14260 0fb2 E2010000 		.4byte	.LVL232
 14261 0fb6 0100     		.2byte	0x1
 14262 0fb8 51       		.byte	0x51
 14263 0fb9 E2010000 		.4byte	.LVL232
 14264 0fbd 00020000 		.4byte	.LVL234
 14265 0fc1 0100     		.2byte	0x1
 14266 0fc3 59       		.byte	0x59
 14267 0fc4 00020000 		.4byte	.LVL234
 14268 0fc8 02020000 		.4byte	.LVL235
 14269 0fcc 0100     		.2byte	0x1
 14270 0fce 51       		.byte	0x51
 14271 0fcf 02020000 		.4byte	.LVL235
 14272 0fd3 14030000 		.4byte	.LVL243
 14273 0fd7 0100     		.2byte	0x1
 14274 0fd9 59       		.byte	0x59
 14275 0fda 48030000 		.4byte	.LVL269
 14276 0fde 4C030000 		.4byte	.LVL271
 14277 0fe2 0100     		.2byte	0x1
 14278 0fe4 52       		.byte	0x52
 14279 0fe5 4C030000 		.4byte	.LVL271
 14280 0fe9 54030000 		.4byte	.LVL275
 14281 0fed 0100     		.2byte	0x1
 14282 0fef 59       		.byte	0x59
 14283 0ff0 54030000 		.4byte	.LVL275
 14284 0ff4 58030000 		.4byte	.LVL277
 14285 0ff8 0100     		.2byte	0x1
 14286 0ffa 51       		.byte	0x51
 14287 0ffb 58030000 		.4byte	.LVL277
 14288 0fff 5E030000 		.4byte	.LVL280
 14289 1003 0100     		.2byte	0x1
 14290 1005 59       		.byte	0x59
 14291 1006 00000000 		.4byte	0
 14292 100a 00000000 		.4byte	0
 14293              	.LLST65:
 14294 100e 10000000 		.4byte	.LVL182
 14295 1012 32000000 		.4byte	.LVL190
 14296 1016 0100     		.2byte	0x1
 14297 1018 53       		.byte	0x53
 14298 1019 32000000 		.4byte	.LVL190
 14299 101d 3A000000 		.4byte	.LVL192
 14300 1021 0200     		.2byte	0x2
 14301 1023 70       		.byte	0x70
 14302 1024 00       		.sleb128 0
 14303 1025 14030000 		.4byte	.LVL243
 14304 1029 18030000 		.4byte	.LVL245
 14305 102d 0100     		.2byte	0x1
 14306 102f 53       		.byte	0x53
 14307 1030 00000000 		.4byte	0
 14308 1034 00000000 		.4byte	0
 14309              	.LLST66:
 14310 1038 38000000 		.4byte	.LVL191
 14311 103c 14030000 		.4byte	.LVL243
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 322


 14312 1040 0100     		.2byte	0x1
 14313 1042 55       		.byte	0x55
 14314 1043 18030000 		.4byte	.LVL245
 14315 1047 5E030000 		.4byte	.LVL280
 14316 104b 0100     		.2byte	0x1
 14317 104d 55       		.byte	0x55
 14318 104e 00000000 		.4byte	0
 14319 1052 00000000 		.4byte	0
 14320              	.LLST67:
 14321 1056 00000000 		.4byte	.LVL281
 14322 105a 09000000 		.4byte	.LVL282-1
 14323 105e 0100     		.2byte	0x1
 14324 1060 50       		.byte	0x50
 14325 1061 09000000 		.4byte	.LVL282-1
 14326 1065 B8000000 		.4byte	.LVL289
 14327 1069 0100     		.2byte	0x1
 14328 106b 54       		.byte	0x54
 14329 106c B8000000 		.4byte	.LVL289
 14330 1070 E8000000 		.4byte	.LFE10
 14331 1074 0400     		.2byte	0x4
 14332 1076 F3       		.byte	0xf3
 14333 1077 01       		.uleb128 0x1
 14334 1078 50       		.byte	0x50
 14335 1079 9F       		.byte	0x9f
 14336 107a 00000000 		.4byte	0
 14337 107e 00000000 		.4byte	0
 14338              	.LLST68:
 14339 1082 0C000000 		.4byte	.LVL283
 14340 1086 24000000 		.4byte	.LVL284
 14341 108a 0100     		.2byte	0x1
 14342 108c 50       		.byte	0x50
 14343 108d 24000000 		.4byte	.LVL284
 14344 1091 B8000000 		.4byte	.LVL290
 14345 1095 0100     		.2byte	0x1
 14346 1097 55       		.byte	0x55
 14347 1098 B8000000 		.4byte	.LVL290
 14348 109c E8000000 		.4byte	.LFE10
 14349 10a0 0100     		.2byte	0x1
 14350 10a2 50       		.byte	0x50
 14351 10a3 00000000 		.4byte	0
 14352 10a7 00000000 		.4byte	0
 14353              	.LLST69:
 14354 10ab 00000000 		.4byte	.LVL291
 14355 10af 12000000 		.4byte	.LVL294
 14356 10b3 0100     		.2byte	0x1
 14357 10b5 50       		.byte	0x50
 14358 10b6 12000000 		.4byte	.LVL294
 14359 10ba 14000000 		.4byte	.LVL295
 14360 10be 0400     		.2byte	0x4
 14361 10c0 F3       		.byte	0xf3
 14362 10c1 01       		.uleb128 0x1
 14363 10c2 50       		.byte	0x50
 14364 10c3 9F       		.byte	0x9f
 14365 10c4 14000000 		.4byte	.LVL295
 14366 10c8 16000000 		.4byte	.LVL296
 14367 10cc 0100     		.2byte	0x1
 14368 10ce 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 323


 14369 10cf 16000000 		.4byte	.LVL296
 14370 10d3 18000000 		.4byte	.LFE11
 14371 10d7 0400     		.2byte	0x4
 14372 10d9 F3       		.byte	0xf3
 14373 10da 01       		.uleb128 0x1
 14374 10db 50       		.byte	0x50
 14375 10dc 9F       		.byte	0x9f
 14376 10dd 00000000 		.4byte	0
 14377 10e1 00000000 		.4byte	0
 14378              	.LLST70:
 14379 10e5 00000000 		.4byte	.LVL291
 14380 10e9 02000000 		.4byte	.LVL292
 14381 10ed 0100     		.2byte	0x1
 14382 10ef 51       		.byte	0x51
 14383 10f0 02000000 		.4byte	.LVL292
 14384 10f4 0E000000 		.4byte	.LVL293
 14385 10f8 0100     		.2byte	0x1
 14386 10fa 51       		.byte	0x51
 14387 10fb 0E000000 		.4byte	.LVL293
 14388 10ff 14000000 		.4byte	.LVL295
 14389 1103 0600     		.2byte	0x6
 14390 1105 F3       		.byte	0xf3
 14391 1106 01       		.uleb128 0x1
 14392 1107 51       		.byte	0x51
 14393 1108 32       		.byte	0x32
 14394 1109 1C       		.byte	0x1c
 14395 110a 9F       		.byte	0x9f
 14396 110b 14000000 		.4byte	.LVL295
 14397 110f 16000000 		.4byte	.LVL296
 14398 1113 0100     		.2byte	0x1
 14399 1115 51       		.byte	0x51
 14400 1116 16000000 		.4byte	.LVL296
 14401 111a 18000000 		.4byte	.LFE11
 14402 111e 0600     		.2byte	0x6
 14403 1120 F3       		.byte	0xf3
 14404 1121 01       		.uleb128 0x1
 14405 1122 51       		.byte	0x51
 14406 1123 32       		.byte	0x32
 14407 1124 1C       		.byte	0x1c
 14408 1125 9F       		.byte	0x9f
 14409 1126 00000000 		.4byte	0
 14410 112a 00000000 		.4byte	0
 14411              	.LLST71:
 14412 112e 00000000 		.4byte	.LVL297
 14413 1132 2B000000 		.4byte	.LVL301-1
 14414 1136 0100     		.2byte	0x1
 14415 1138 50       		.byte	0x50
 14416 1139 2B000000 		.4byte	.LVL301-1
 14417 113d 52000000 		.4byte	.LVL306
 14418 1141 0100     		.2byte	0x1
 14419 1143 55       		.byte	0x55
 14420 1144 52000000 		.4byte	.LVL306
 14421 1148 68000000 		.4byte	.LVL308
 14422 114c 0400     		.2byte	0x4
 14423 114e F3       		.byte	0xf3
 14424 114f 01       		.uleb128 0x1
 14425 1150 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 324


 14426 1151 9F       		.byte	0x9f
 14427 1152 68000000 		.4byte	.LVL308
 14428 1156 71000000 		.4byte	.LVL310-1
 14429 115a 0100     		.2byte	0x1
 14430 115c 50       		.byte	0x50
 14431 115d 71000000 		.4byte	.LVL310-1
 14432 1161 92000000 		.4byte	.LVL314
 14433 1165 0100     		.2byte	0x1
 14434 1167 55       		.byte	0x55
 14435 1168 92000000 		.4byte	.LVL314
 14436 116c 9B000000 		.4byte	.LVL316-1
 14437 1170 0100     		.2byte	0x1
 14438 1172 50       		.byte	0x50
 14439 1173 9B000000 		.4byte	.LVL316-1
 14440 1177 CC000000 		.4byte	.LVL321
 14441 117b 0100     		.2byte	0x1
 14442 117d 55       		.byte	0x55
 14443 117e CC000000 		.4byte	.LVL321
 14444 1182 CE000000 		.4byte	.LVL322
 14445 1186 0100     		.2byte	0x1
 14446 1188 50       		.byte	0x50
 14447 1189 CE000000 		.4byte	.LVL322
 14448 118d D0000000 		.4byte	.LVL323
 14449 1191 0100     		.2byte	0x1
 14450 1193 55       		.byte	0x55
 14451 1194 D0000000 		.4byte	.LVL323
 14452 1198 D2000000 		.4byte	.LVL324
 14453 119c 0100     		.2byte	0x1
 14454 119e 50       		.byte	0x50
 14455 119f D2000000 		.4byte	.LVL324
 14456 11a3 D4000000 		.4byte	.LVL325
 14457 11a7 0100     		.2byte	0x1
 14458 11a9 55       		.byte	0x55
 14459 11aa D4000000 		.4byte	.LVL325
 14460 11ae D6000000 		.4byte	.LVL326
 14461 11b2 0100     		.2byte	0x1
 14462 11b4 50       		.byte	0x50
 14463 11b5 D6000000 		.4byte	.LVL326
 14464 11b9 F0000000 		.4byte	.LVL330
 14465 11bd 0100     		.2byte	0x1
 14466 11bf 55       		.byte	0x55
 14467 11c0 F0000000 		.4byte	.LVL330
 14468 11c4 F2000000 		.4byte	.LFE12
 14469 11c8 0400     		.2byte	0x4
 14470 11ca F3       		.byte	0xf3
 14471 11cb 01       		.uleb128 0x1
 14472 11cc 50       		.byte	0x50
 14473 11cd 9F       		.byte	0x9f
 14474 11ce 00000000 		.4byte	0
 14475 11d2 00000000 		.4byte	0
 14476              	.LLST72:
 14477 11d6 00000000 		.4byte	.LVL297
 14478 11da 24000000 		.4byte	.LVL300
 14479 11de 0100     		.2byte	0x1
 14480 11e0 51       		.byte	0x51
 14481 11e1 24000000 		.4byte	.LVL300
 14482 11e5 68000000 		.4byte	.LVL308
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 325


 14483 11e9 0100     		.2byte	0x1
 14484 11eb 54       		.byte	0x54
 14485 11ec 68000000 		.4byte	.LVL308
 14486 11f0 6A000000 		.4byte	.LVL309
 14487 11f4 0100     		.2byte	0x1
 14488 11f6 51       		.byte	0x51
 14489 11f7 6A000000 		.4byte	.LVL309
 14490 11fb 78000000 		.4byte	.LVL311
 14491 11ff 0100     		.2byte	0x1
 14492 1201 54       		.byte	0x54
 14493 1202 78000000 		.4byte	.LVL311
 14494 1206 92000000 		.4byte	.LVL314
 14495 120a 0400     		.2byte	0x4
 14496 120c F3       		.byte	0xf3
 14497 120d 01       		.uleb128 0x1
 14498 120e 51       		.byte	0x51
 14499 120f 9F       		.byte	0x9f
 14500 1210 92000000 		.4byte	.LVL314
 14501 1214 94000000 		.4byte	.LVL315
 14502 1218 0100     		.2byte	0x1
 14503 121a 51       		.byte	0x51
 14504 121b 94000000 		.4byte	.LVL315
 14505 121f A2000000 		.4byte	.LVL317
 14506 1223 0100     		.2byte	0x1
 14507 1225 54       		.byte	0x54
 14508 1226 A2000000 		.4byte	.LVL317
 14509 122a CC000000 		.4byte	.LVL321
 14510 122e 0400     		.2byte	0x4
 14511 1230 F3       		.byte	0xf3
 14512 1231 01       		.uleb128 0x1
 14513 1232 51       		.byte	0x51
 14514 1233 9F       		.byte	0x9f
 14515 1234 CC000000 		.4byte	.LVL321
 14516 1238 DA000000 		.4byte	.LVL327
 14517 123c 0100     		.2byte	0x1
 14518 123e 51       		.byte	0x51
 14519 123f DA000000 		.4byte	.LVL327
 14520 1243 F0000000 		.4byte	.LVL330
 14521 1247 0100     		.2byte	0x1
 14522 1249 54       		.byte	0x54
 14523 124a F0000000 		.4byte	.LVL330
 14524 124e F2000000 		.4byte	.LFE12
 14525 1252 0400     		.2byte	0x4
 14526 1254 F3       		.byte	0xf3
 14527 1255 01       		.uleb128 0x1
 14528 1256 51       		.byte	0x51
 14529 1257 9F       		.byte	0x9f
 14530 1258 00000000 		.4byte	0
 14531 125c 00000000 		.4byte	0
 14532              	.LLST73:
 14533 1260 3A000000 		.4byte	.LVL302
 14534 1264 68000000 		.4byte	.LVL308
 14535 1268 0100     		.2byte	0x1
 14536 126a 57       		.byte	0x57
 14537 126b E0000000 		.4byte	.LVL328
 14538 126f E6000000 		.4byte	.LVL329
 14539 1273 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 326


 14540 1275 57       		.byte	0x57
 14541 1276 00000000 		.4byte	0
 14542 127a 00000000 		.4byte	0
 14543              	.LLST74:
 14544 127e 1E000000 		.4byte	.LVL298
 14545 1282 22000000 		.4byte	.LVL299
 14546 1286 0100     		.2byte	0x1
 14547 1288 51       		.byte	0x51
 14548 1289 22000000 		.4byte	.LVL299
 14549 128d 4E000000 		.4byte	.LVL305
 14550 1291 0100     		.2byte	0x1
 14551 1293 56       		.byte	0x56
 14552 1294 4E000000 		.4byte	.LVL305
 14553 1298 68000000 		.4byte	.LVL308
 14554 129c 0A00     		.2byte	0xa
 14555 129e 74       		.byte	0x74
 14556 129f 00       		.sleb128 0
 14557 12a0 31       		.byte	0x31
 14558 12a1 25       		.byte	0x25
 14559 12a2 74       		.byte	0x74
 14560 12a3 00       		.sleb128 0
 14561 12a4 22       		.byte	0x22
 14562 12a5 23       		.byte	0x23
 14563 12a6 01       		.uleb128 0x1
 14564 12a7 9F       		.byte	0x9f
 14565 12a8 DA000000 		.4byte	.LVL327
 14566 12ac E6000000 		.4byte	.LVL329
 14567 12b0 0100     		.2byte	0x1
 14568 12b2 56       		.byte	0x56
 14569 12b3 00000000 		.4byte	0
 14570 12b7 00000000 		.4byte	0
 14571              	.LLST75:
 14572 12bb 84000000 		.4byte	.LVL312
 14573 12bf 8E000000 		.4byte	.LVL313
 14574 12c3 0100     		.2byte	0x1
 14575 12c5 53       		.byte	0x53
 14576 12c6 8E000000 		.4byte	.LVL313
 14577 12ca 92000000 		.4byte	.LVL314
 14578 12ce 0F00     		.2byte	0xf
 14579 12d0 F3       		.byte	0xf3
 14580 12d1 01       		.uleb128 0x1
 14581 12d2 51       		.byte	0x51
 14582 12d3 31       		.byte	0x31
 14583 12d4 24       		.byte	0x24
 14584 12d5 0A       		.byte	0xa
 14585 12d6 FE01     		.2byte	0x1fe
 14586 12d8 1A       		.byte	0x1a
 14587 12d9 75       		.byte	0x75
 14588 12da 00       		.sleb128 0
 14589 12db 22       		.byte	0x22
 14590 12dc 23       		.byte	0x23
 14591 12dd 30       		.uleb128 0x30
 14592 12de 9F       		.byte	0x9f
 14593 12df AE000000 		.4byte	.LVL318
 14594 12e3 BA000000 		.4byte	.LVL319
 14595 12e7 0100     		.2byte	0x1
 14596 12e9 53       		.byte	0x53
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 327


 14597 12ea BA000000 		.4byte	.LVL319
 14598 12ee C0000000 		.4byte	.LVL320
 14599 12f2 0800     		.2byte	0x8
 14600 12f4 75       		.byte	0x75
 14601 12f5 00       		.sleb128 0
 14602 12f6 74       		.byte	0x74
 14603 12f7 00       		.sleb128 0
 14604 12f8 22       		.byte	0x22
 14605 12f9 23       		.byte	0x23
 14606 12fa 30       		.uleb128 0x30
 14607 12fb 9F       		.byte	0x9f
 14608 12fc C0000000 		.4byte	.LVL320
 14609 1300 CC000000 		.4byte	.LVL321
 14610 1304 0F00     		.2byte	0xf
 14611 1306 F3       		.byte	0xf3
 14612 1307 01       		.uleb128 0x1
 14613 1308 51       		.byte	0x51
 14614 1309 32       		.byte	0x32
 14615 130a 24       		.byte	0x24
 14616 130b 0A       		.byte	0xa
 14617 130c FC01     		.2byte	0x1fc
 14618 130e 1A       		.byte	0x1a
 14619 130f 75       		.byte	0x75
 14620 1310 00       		.sleb128 0
 14621 1311 22       		.byte	0x22
 14622 1312 23       		.byte	0x23
 14623 1313 30       		.uleb128 0x30
 14624 1314 9F       		.byte	0x9f
 14625 1315 00000000 		.4byte	0
 14626 1319 00000000 		.4byte	0
 14627              	.LLST76:
 14628 131d 00000000 		.4byte	.LVL331
 14629 1321 3E000000 		.4byte	.LVL335
 14630 1325 0100     		.2byte	0x1
 14631 1327 50       		.byte	0x50
 14632 1328 3E000000 		.4byte	.LVL335
 14633 132c 7E000000 		.4byte	.LVL343
 14634 1330 0100     		.2byte	0x1
 14635 1332 54       		.byte	0x54
 14636 1333 7E000000 		.4byte	.LVL343
 14637 1337 80000000 		.4byte	.LVL344
 14638 133b 0100     		.2byte	0x1
 14639 133d 50       		.byte	0x50
 14640 133e 80000000 		.4byte	.LVL344
 14641 1342 82000000 		.4byte	.LVL345
 14642 1346 0100     		.2byte	0x1
 14643 1348 54       		.byte	0x54
 14644 1349 82000000 		.4byte	.LVL345
 14645 134d 84000000 		.4byte	.LVL346
 14646 1351 0100     		.2byte	0x1
 14647 1353 50       		.byte	0x50
 14648 1354 84000000 		.4byte	.LVL346
 14649 1358 86000000 		.4byte	.LVL347
 14650 135c 0100     		.2byte	0x1
 14651 135e 54       		.byte	0x54
 14652 135f 86000000 		.4byte	.LVL347
 14653 1363 88000000 		.4byte	.LVL348
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 328


 14654 1367 0100     		.2byte	0x1
 14655 1369 50       		.byte	0x50
 14656 136a 88000000 		.4byte	.LVL348
 14657 136e 94000000 		.4byte	.LVL355
 14658 1372 0100     		.2byte	0x1
 14659 1374 54       		.byte	0x54
 14660 1375 94000000 		.4byte	.LVL355
 14661 1379 96000000 		.4byte	.LFE16
 14662 137d 0400     		.2byte	0x4
 14663 137f F3       		.byte	0xf3
 14664 1380 01       		.uleb128 0x1
 14665 1381 50       		.byte	0x50
 14666 1382 9F       		.byte	0x9f
 14667 1383 00000000 		.4byte	0
 14668 1387 00000000 		.4byte	0
 14669              	.LLST77:
 14670 138b 00000000 		.4byte	.LVL331
 14671 138f 0A000000 		.4byte	.LVL332
 14672 1393 0100     		.2byte	0x1
 14673 1395 51       		.byte	0x51
 14674 1396 0A000000 		.4byte	.LVL332
 14675 139a 3E000000 		.4byte	.LVL335
 14676 139e 0200     		.2byte	0x2
 14677 13a0 70       		.byte	0x70
 14678 13a1 06       		.sleb128 6
 14679 13a2 3E000000 		.4byte	.LVL335
 14680 13a6 58000000 		.4byte	.LVL338
 14681 13aa 0100     		.2byte	0x1
 14682 13ac 55       		.byte	0x55
 14683 13ad 5A000000 		.4byte	.LVL339
 14684 13b1 70000000 		.4byte	.LVL342
 14685 13b5 0100     		.2byte	0x1
 14686 13b7 55       		.byte	0x55
 14687 13b8 7E000000 		.4byte	.LVL343
 14688 13bc 80000000 		.4byte	.LVL344
 14689 13c0 0200     		.2byte	0x2
 14690 13c2 70       		.byte	0x70
 14691 13c3 06       		.sleb128 6
 14692 13c4 80000000 		.4byte	.LVL344
 14693 13c8 82000000 		.4byte	.LVL345
 14694 13cc 0200     		.2byte	0x2
 14695 13ce 74       		.byte	0x74
 14696 13cf 06       		.sleb128 6
 14697 13d0 82000000 		.4byte	.LVL345
 14698 13d4 84000000 		.4byte	.LVL346
 14699 13d8 0200     		.2byte	0x2
 14700 13da 70       		.byte	0x70
 14701 13db 06       		.sleb128 6
 14702 13dc 84000000 		.4byte	.LVL346
 14703 13e0 86000000 		.4byte	.LVL347
 14704 13e4 0200     		.2byte	0x2
 14705 13e6 74       		.byte	0x74
 14706 13e7 06       		.sleb128 6
 14707 13e8 86000000 		.4byte	.LVL347
 14708 13ec 88000000 		.4byte	.LVL348
 14709 13f0 0200     		.2byte	0x2
 14710 13f2 70       		.byte	0x70
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 329


 14711 13f3 06       		.sleb128 6
 14712 13f4 88000000 		.4byte	.LVL348
 14713 13f8 8A000000 		.4byte	.LVL349
 14714 13fc 0200     		.2byte	0x2
 14715 13fe 74       		.byte	0x74
 14716 13ff 06       		.sleb128 6
 14717 1400 8A000000 		.4byte	.LVL349
 14718 1404 94000000 		.4byte	.LVL354
 14719 1408 0100     		.2byte	0x1
 14720 140a 55       		.byte	0x55
 14721 140b 00000000 		.4byte	0
 14722 140f 00000000 		.4byte	0
 14723              	.LLST78:
 14724 1413 0A000000 		.4byte	.LVL332
 14725 1417 43000000 		.4byte	.LVL336-1
 14726 141b 0100     		.2byte	0x1
 14727 141d 51       		.byte	0x51
 14728 141e 46000000 		.4byte	.LVL337
 14729 1422 5A000000 		.4byte	.LVL339
 14730 1426 0100     		.2byte	0x1
 14731 1428 50       		.byte	0x50
 14732 1429 5A000000 		.4byte	.LVL339
 14733 142d 65000000 		.4byte	.LVL340-1
 14734 1431 0100     		.2byte	0x1
 14735 1433 51       		.byte	0x51
 14736 1434 7E000000 		.4byte	.LVL343
 14737 1438 8A000000 		.4byte	.LVL349
 14738 143c 0100     		.2byte	0x1
 14739 143e 51       		.byte	0x51
 14740 143f 8A000000 		.4byte	.LVL349
 14741 1443 8C000000 		.4byte	.LVL350
 14742 1447 0100     		.2byte	0x1
 14743 1449 50       		.byte	0x50
 14744 144a 8C000000 		.4byte	.LVL350
 14745 144e 8E000000 		.4byte	.LVL351
 14746 1452 0100     		.2byte	0x1
 14747 1454 51       		.byte	0x51
 14748 1455 8E000000 		.4byte	.LVL351
 14749 1459 90000000 		.4byte	.LVL352
 14750 145d 0100     		.2byte	0x1
 14751 145f 50       		.byte	0x50
 14752 1460 90000000 		.4byte	.LVL352
 14753 1464 92000000 		.4byte	.LVL353
 14754 1468 0100     		.2byte	0x1
 14755 146a 51       		.byte	0x51
 14756 146b 92000000 		.4byte	.LVL353
 14757 146f 94000000 		.4byte	.LVL354
 14758 1473 0100     		.2byte	0x1
 14759 1475 50       		.byte	0x50
 14760 1476 00000000 		.4byte	0
 14761 147a 00000000 		.4byte	0
 14762              	.LLST79:
 14763 147e 3C000000 		.4byte	.LVL334
 14764 1482 6C000000 		.4byte	.LVL341
 14765 1486 0100     		.2byte	0x1
 14766 1488 56       		.byte	0x56
 14767 1489 8A000000 		.4byte	.LVL349
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 330


 14768 148d 94000000 		.4byte	.LVL354
 14769 1491 0100     		.2byte	0x1
 14770 1493 56       		.byte	0x56
 14771 1494 00000000 		.4byte	0
 14772 1498 00000000 		.4byte	0
 14773              	.LLST80:
 14774 149c 00000000 		.4byte	.LVL356
 14775 14a0 09000000 		.4byte	.LVL357-1
 14776 14a4 0100     		.2byte	0x1
 14777 14a6 50       		.byte	0x50
 14778 14a7 09000000 		.4byte	.LVL357-1
 14779 14ab 26000000 		.4byte	.LVL361
 14780 14af 0100     		.2byte	0x1
 14781 14b1 54       		.byte	0x54
 14782 14b2 26000000 		.4byte	.LVL361
 14783 14b6 28000000 		.4byte	.LFE21
 14784 14ba 0400     		.2byte	0x4
 14785 14bc F3       		.byte	0xf3
 14786 14bd 01       		.uleb128 0x1
 14787 14be 50       		.byte	0x50
 14788 14bf 9F       		.byte	0x9f
 14789 14c0 00000000 		.4byte	0
 14790 14c4 00000000 		.4byte	0
 14791              	.LLST81:
 14792 14c8 0A000000 		.4byte	.LVL357
 14793 14cc 10000000 		.4byte	.LVL358
 14794 14d0 0100     		.2byte	0x1
 14795 14d2 50       		.byte	0x50
 14796 14d3 16000000 		.4byte	.LVL359
 14797 14d7 28000000 		.4byte	.LFE21
 14798 14db 0100     		.2byte	0x1
 14799 14dd 50       		.byte	0x50
 14800 14de 00000000 		.4byte	0
 14801 14e2 00000000 		.4byte	0
 14802              	.LLST82:
 14803 14e6 00000000 		.4byte	.LVL362
 14804 14ea 2D000000 		.4byte	.LVL366-1
 14805 14ee 0100     		.2byte	0x1
 14806 14f0 50       		.byte	0x50
 14807 14f1 2D000000 		.4byte	.LVL366-1
 14808 14f5 98000000 		.4byte	.LVL383
 14809 14f9 0100     		.2byte	0x1
 14810 14fb 55       		.byte	0x55
 14811 14fc 98000000 		.4byte	.LVL383
 14812 1500 A1000000 		.4byte	.LVL385-1
 14813 1504 0100     		.2byte	0x1
 14814 1506 50       		.byte	0x50
 14815 1507 A1000000 		.4byte	.LVL385-1
 14816 150b C0000000 		.4byte	.LVL389
 14817 150f 0100     		.2byte	0x1
 14818 1511 55       		.byte	0x55
 14819 1512 C0000000 		.4byte	.LVL389
 14820 1516 C9000000 		.4byte	.LVL391-1
 14821 151a 0100     		.2byte	0x1
 14822 151c 50       		.byte	0x50
 14823 151d C9000000 		.4byte	.LVL391-1
 14824 1521 F8000000 		.4byte	.LVL397
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 331


 14825 1525 0100     		.2byte	0x1
 14826 1527 55       		.byte	0x55
 14827 1528 F8000000 		.4byte	.LVL397
 14828 152c FA000000 		.4byte	.LVL398
 14829 1530 0100     		.2byte	0x1
 14830 1532 50       		.byte	0x50
 14831 1533 FA000000 		.4byte	.LVL398
 14832 1537 00010000 		.4byte	.LVL399
 14833 153b 0100     		.2byte	0x1
 14834 153d 55       		.byte	0x55
 14835 153e 00010000 		.4byte	.LVL399
 14836 1542 02010000 		.4byte	.LVL400
 14837 1546 0100     		.2byte	0x1
 14838 1548 50       		.byte	0x50
 14839 1549 02010000 		.4byte	.LVL400
 14840 154d 04010000 		.4byte	.LVL401
 14841 1551 0100     		.2byte	0x1
 14842 1553 55       		.byte	0x55
 14843 1554 04010000 		.4byte	.LVL401
 14844 1558 06010000 		.4byte	.LVL402
 14845 155c 0100     		.2byte	0x1
 14846 155e 50       		.byte	0x50
 14847 155f 06010000 		.4byte	.LVL402
 14848 1563 06010000 		.4byte	.LVL403
 14849 1567 0100     		.2byte	0x1
 14850 1569 55       		.byte	0x55
 14851 156a 06010000 		.4byte	.LVL403
 14852 156e 08010000 		.4byte	.LFE13
 14853 1572 0400     		.2byte	0x4
 14854 1574 F3       		.byte	0xf3
 14855 1575 01       		.uleb128 0x1
 14856 1576 50       		.byte	0x50
 14857 1577 9F       		.byte	0x9f
 14858 1578 00000000 		.4byte	0
 14859 157c 00000000 		.4byte	0
 14860              	.LLST83:
 14861 1580 00000000 		.4byte	.LVL362
 14862 1584 26000000 		.4byte	.LVL365
 14863 1588 0100     		.2byte	0x1
 14864 158a 51       		.byte	0x51
 14865 158b 26000000 		.4byte	.LVL365
 14866 158f 3A000000 		.4byte	.LVL368
 14867 1593 0100     		.2byte	0x1
 14868 1595 54       		.byte	0x54
 14869 1596 3A000000 		.4byte	.LVL368
 14870 159a 98000000 		.4byte	.LVL383
 14871 159e 0400     		.2byte	0x4
 14872 15a0 F3       		.byte	0xf3
 14873 15a1 01       		.uleb128 0x1
 14874 15a2 51       		.byte	0x51
 14875 15a3 9F       		.byte	0x9f
 14876 15a4 98000000 		.4byte	.LVL383
 14877 15a8 9A000000 		.4byte	.LVL384
 14878 15ac 0100     		.2byte	0x1
 14879 15ae 51       		.byte	0x51
 14880 15af 9A000000 		.4byte	.LVL384
 14881 15b3 A8000000 		.4byte	.LVL386
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 332


 14882 15b7 0100     		.2byte	0x1
 14883 15b9 54       		.byte	0x54
 14884 15ba A8000000 		.4byte	.LVL386
 14885 15be C0000000 		.4byte	.LVL389
 14886 15c2 0400     		.2byte	0x4
 14887 15c4 F3       		.byte	0xf3
 14888 15c5 01       		.uleb128 0x1
 14889 15c6 51       		.byte	0x51
 14890 15c7 9F       		.byte	0x9f
 14891 15c8 C0000000 		.4byte	.LVL389
 14892 15cc C2000000 		.4byte	.LVL390
 14893 15d0 0100     		.2byte	0x1
 14894 15d2 51       		.byte	0x51
 14895 15d3 C2000000 		.4byte	.LVL390
 14896 15d7 D0000000 		.4byte	.LVL392
 14897 15db 0100     		.2byte	0x1
 14898 15dd 54       		.byte	0x54
 14899 15de D0000000 		.4byte	.LVL392
 14900 15e2 F8000000 		.4byte	.LVL397
 14901 15e6 0400     		.2byte	0x4
 14902 15e8 F3       		.byte	0xf3
 14903 15e9 01       		.uleb128 0x1
 14904 15ea 51       		.byte	0x51
 14905 15eb 9F       		.byte	0x9f
 14906 15ec F8000000 		.4byte	.LVL397
 14907 15f0 FA000000 		.4byte	.LVL398
 14908 15f4 0100     		.2byte	0x1
 14909 15f6 51       		.byte	0x51
 14910 15f7 FA000000 		.4byte	.LVL398
 14911 15fb 00010000 		.4byte	.LVL399
 14912 15ff 0400     		.2byte	0x4
 14913 1601 F3       		.byte	0xf3
 14914 1602 01       		.uleb128 0x1
 14915 1603 51       		.byte	0x51
 14916 1604 9F       		.byte	0x9f
 14917 1605 00010000 		.4byte	.LVL399
 14918 1609 06010000 		.4byte	.LVL402
 14919 160d 0100     		.2byte	0x1
 14920 160f 51       		.byte	0x51
 14921 1610 06010000 		.4byte	.LVL402
 14922 1614 08010000 		.4byte	.LFE13
 14923 1618 0400     		.2byte	0x4
 14924 161a F3       		.byte	0xf3
 14925 161b 01       		.uleb128 0x1
 14926 161c 51       		.byte	0x51
 14927 161d 9F       		.byte	0x9f
 14928 161e 00000000 		.4byte	0
 14929 1622 00000000 		.4byte	0
 14930              	.LLST84:
 14931 1626 00000000 		.4byte	.LVL362
 14932 162a 2D000000 		.4byte	.LVL366-1
 14933 162e 0100     		.2byte	0x1
 14934 1630 52       		.byte	0x52
 14935 1631 2D000000 		.4byte	.LVL366-1
 14936 1635 7A000000 		.4byte	.LVL379
 14937 1639 0100     		.2byte	0x1
 14938 163b 56       		.byte	0x56
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 333


 14939 163c 7A000000 		.4byte	.LVL379
 14940 1640 7E000000 		.4byte	.LVL380
 14941 1644 0400     		.2byte	0x4
 14942 1646 F3       		.byte	0xf3
 14943 1647 01       		.uleb128 0x1
 14944 1648 52       		.byte	0x52
 14945 1649 9F       		.byte	0x9f
 14946 164a 7E000000 		.4byte	.LVL380
 14947 164e 8A000000 		.4byte	.LVL381
 14948 1652 0100     		.2byte	0x1
 14949 1654 56       		.byte	0x56
 14950 1655 8A000000 		.4byte	.LVL381
 14951 1659 98000000 		.4byte	.LVL383
 14952 165d 0400     		.2byte	0x4
 14953 165f F3       		.byte	0xf3
 14954 1660 01       		.uleb128 0x1
 14955 1661 52       		.byte	0x52
 14956 1662 9F       		.byte	0x9f
 14957 1663 98000000 		.4byte	.LVL383
 14958 1667 A1000000 		.4byte	.LVL385-1
 14959 166b 0100     		.2byte	0x1
 14960 166d 52       		.byte	0x52
 14961 166e A1000000 		.4byte	.LVL385-1
 14962 1672 BC000000 		.4byte	.LVL388
 14963 1676 0100     		.2byte	0x1
 14964 1678 56       		.byte	0x56
 14965 1679 BC000000 		.4byte	.LVL388
 14966 167d C0000000 		.4byte	.LVL389
 14967 1681 0400     		.2byte	0x4
 14968 1683 F3       		.byte	0xf3
 14969 1684 01       		.uleb128 0x1
 14970 1685 52       		.byte	0x52
 14971 1686 9F       		.byte	0x9f
 14972 1687 C0000000 		.4byte	.LVL389
 14973 168b C9000000 		.4byte	.LVL391-1
 14974 168f 0100     		.2byte	0x1
 14975 1691 52       		.byte	0x52
 14976 1692 C9000000 		.4byte	.LVL391-1
 14977 1696 F4000000 		.4byte	.LVL395
 14978 169a 0100     		.2byte	0x1
 14979 169c 56       		.byte	0x56
 14980 169d F4000000 		.4byte	.LVL395
 14981 16a1 F6000000 		.4byte	.LVL396
 14982 16a5 1000     		.2byte	0x10
 14983 16a7 73       		.byte	0x73
 14984 16a8 03       		.sleb128 3
 14985 16a9 94       		.byte	0x94
 14986 16aa 01       		.byte	0x1
 14987 16ab 08       		.byte	0x8
 14988 16ac FF       		.byte	0xff
 14989 16ad 1A       		.byte	0x1a
 14990 16ae 34       		.byte	0x34
 14991 16af 25       		.byte	0x25
 14992 16b0 4C       		.byte	0x4c
 14993 16b1 24       		.byte	0x24
 14994 16b2 F3       		.byte	0xf3
 14995 16b3 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 334


 14996 16b4 52       		.byte	0x52
 14997 16b5 21       		.byte	0x21
 14998 16b6 9F       		.byte	0x9f
 14999 16b7 F8000000 		.4byte	.LVL397
 15000 16bb FA000000 		.4byte	.LVL398
 15001 16bf 0100     		.2byte	0x1
 15002 16c1 52       		.byte	0x52
 15003 16c2 00010000 		.4byte	.LVL399
 15004 16c6 06010000 		.4byte	.LVL402
 15005 16ca 0100     		.2byte	0x1
 15006 16cc 52       		.byte	0x52
 15007 16cd 00000000 		.4byte	0
 15008 16d1 00000000 		.4byte	0
 15009              	.LLST85:
 15010 16d5 20000000 		.4byte	.LVL363
 15011 16d9 24000000 		.4byte	.LVL364
 15012 16dd 0100     		.2byte	0x1
 15013 16df 51       		.byte	0x51
 15014 16e0 24000000 		.4byte	.LVL364
 15015 16e4 72000000 		.4byte	.LVL377
 15016 16e8 0100     		.2byte	0x1
 15017 16ea 57       		.byte	0x57
 15018 16eb 72000000 		.4byte	.LVL377
 15019 16ef 98000000 		.4byte	.LVL383
 15020 16f3 0C00     		.2byte	0xc
 15021 16f5 F3       		.byte	0xf3
 15022 16f6 01       		.uleb128 0x1
 15023 16f7 51       		.byte	0x51
 15024 16f8 31       		.byte	0x31
 15025 16f9 25       		.byte	0x25
 15026 16fa F3       		.byte	0xf3
 15027 16fb 01       		.uleb128 0x1
 15028 16fc 51       		.byte	0x51
 15029 16fd 22       		.byte	0x22
 15030 16fe 23       		.byte	0x23
 15031 16ff 01       		.uleb128 0x1
 15032 1700 9F       		.byte	0x9f
 15033 1701 00000000 		.4byte	0
 15034 1705 00000000 		.4byte	0
 15035              	.LLST86:
 15036 1709 36000000 		.4byte	.LVL367
 15037 170d 40000000 		.4byte	.LVL369
 15038 1711 0800     		.2byte	0x8
 15039 1713 75       		.byte	0x75
 15040 1714 00       		.sleb128 0
 15041 1715 73       		.byte	0x73
 15042 1716 00       		.sleb128 0
 15043 1717 22       		.byte	0x22
 15044 1718 23       		.byte	0x23
 15045 1719 30       		.uleb128 0x30
 15046 171a 9F       		.byte	0x9f
 15047 171b 40000000 		.4byte	.LVL369
 15048 171f 4A000000 		.4byte	.LVL371
 15049 1723 0100     		.2byte	0x1
 15050 1725 52       		.byte	0x52
 15051 1726 4A000000 		.4byte	.LVL371
 15052 172a 56000000 		.4byte	.LVL374
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 335


 15053 172e 0800     		.2byte	0x8
 15054 1730 75       		.byte	0x75
 15055 1731 00       		.sleb128 0
 15056 1732 73       		.byte	0x73
 15057 1733 00       		.sleb128 0
 15058 1734 22       		.byte	0x22
 15059 1735 23       		.byte	0x23
 15060 1736 30       		.uleb128 0x30
 15061 1737 9F       		.byte	0x9f
 15062 1738 56000000 		.4byte	.LVL374
 15063 173c 5C000000 		.4byte	.LVL375
 15064 1740 0C00     		.2byte	0xc
 15065 1742 77       		.byte	0x77
 15066 1743 00       		.sleb128 0
 15067 1744 47       		.byte	0x47
 15068 1745 24       		.byte	0x24
 15069 1746 47       		.byte	0x47
 15070 1747 25       		.byte	0x25
 15071 1748 75       		.byte	0x75
 15072 1749 00       		.sleb128 0
 15073 174a 22       		.byte	0x22
 15074 174b 23       		.byte	0x23
 15075 174c 30       		.uleb128 0x30
 15076 174d 9F       		.byte	0x9f
 15077 174e 5C000000 		.4byte	.LVL375
 15078 1752 72000000 		.4byte	.LVL377
 15079 1756 0C00     		.2byte	0xc
 15080 1758 77       		.byte	0x77
 15081 1759 7F       		.sleb128 -1
 15082 175a 47       		.byte	0x47
 15083 175b 24       		.byte	0x24
 15084 175c 47       		.byte	0x47
 15085 175d 25       		.byte	0x25
 15086 175e 75       		.byte	0x75
 15087 175f 00       		.sleb128 0
 15088 1760 22       		.byte	0x22
 15089 1761 23       		.byte	0x23
 15090 1762 30       		.uleb128 0x30
 15091 1763 9F       		.byte	0x9f
 15092 1764 72000000 		.4byte	.LVL377
 15093 1768 74000000 		.4byte	.LVL378
 15094 176c 1300     		.2byte	0x13
 15095 176e F3       		.byte	0xf3
 15096 176f 01       		.uleb128 0x1
 15097 1770 51       		.byte	0x51
 15098 1771 31       		.byte	0x31
 15099 1772 25       		.byte	0x25
 15100 1773 F3       		.byte	0xf3
 15101 1774 01       		.uleb128 0x1
 15102 1775 51       		.byte	0x51
 15103 1776 22       		.byte	0x22
 15104 1777 47       		.byte	0x47
 15105 1778 24       		.byte	0x24
 15106 1779 47       		.byte	0x47
 15107 177a 25       		.byte	0x25
 15108 177b 75       		.byte	0x75
 15109 177c 00       		.sleb128 0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 336


 15110 177d 22       		.byte	0x22
 15111 177e 23       		.byte	0x23
 15112 177f 30       		.uleb128 0x30
 15113 1780 9F       		.byte	0x9f
 15114 1781 74000000 		.4byte	.LVL378
 15115 1785 92000000 		.4byte	.LVL382
 15116 1789 0800     		.2byte	0x8
 15117 178b 75       		.byte	0x75
 15118 178c 00       		.sleb128 0
 15119 178d 77       		.byte	0x77
 15120 178e 00       		.sleb128 0
 15121 178f 22       		.byte	0x22
 15122 1790 23       		.byte	0x23
 15123 1791 30       		.uleb128 0x30
 15124 1792 9F       		.byte	0x9f
 15125 1793 92000000 		.4byte	.LVL382
 15126 1797 98000000 		.4byte	.LVL383
 15127 179b 1500     		.2byte	0x15
 15128 179d F3       		.byte	0xf3
 15129 179e 01       		.uleb128 0x1
 15130 179f 51       		.byte	0x51
 15131 17a0 31       		.byte	0x31
 15132 17a1 25       		.byte	0x25
 15133 17a2 F3       		.byte	0xf3
 15134 17a3 01       		.uleb128 0x1
 15135 17a4 51       		.byte	0x51
 15136 17a5 22       		.byte	0x22
 15137 17a6 23       		.byte	0x23
 15138 17a7 01       		.uleb128 0x1
 15139 17a8 47       		.byte	0x47
 15140 17a9 24       		.byte	0x24
 15141 17aa 47       		.byte	0x47
 15142 17ab 25       		.byte	0x25
 15143 17ac 75       		.byte	0x75
 15144 17ad 00       		.sleb128 0
 15145 17ae 22       		.byte	0x22
 15146 17af 23       		.byte	0x23
 15147 17b0 30       		.uleb128 0x30
 15148 17b1 9F       		.byte	0x9f
 15149 17b2 B4000000 		.4byte	.LVL387
 15150 17b6 C0000000 		.4byte	.LVL389
 15151 17ba 0100     		.2byte	0x1
 15152 17bc 53       		.byte	0x53
 15153 17bd DC000000 		.4byte	.LVL393
 15154 17c1 F8000000 		.4byte	.LVL397
 15155 17c5 0100     		.2byte	0x1
 15156 17c7 53       		.byte	0x53
 15157 17c8 00000000 		.4byte	0
 15158 17cc 00000000 		.4byte	0
 15159              	.LLST87:
 15160 17d0 2E000000 		.4byte	.LVL366
 15161 17d4 42000000 		.4byte	.LVL370
 15162 17d8 0100     		.2byte	0x1
 15163 17da 50       		.byte	0x50
 15164 17db 52000000 		.4byte	.LVL372
 15165 17df 54000000 		.4byte	.LVL373
 15166 17e3 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 337


 15167 17e5 50       		.byte	0x50
 15168 17e6 6C000000 		.4byte	.LVL376
 15169 17ea 98000000 		.4byte	.LVL383
 15170 17ee 0100     		.2byte	0x1
 15171 17f0 50       		.byte	0x50
 15172 17f1 A2000000 		.4byte	.LVL385
 15173 17f5 C0000000 		.4byte	.LVL389
 15174 17f9 0100     		.2byte	0x1
 15175 17fb 50       		.byte	0x50
 15176 17fc CA000000 		.4byte	.LVL391
 15177 1800 F8000000 		.4byte	.LVL397
 15178 1804 0100     		.2byte	0x1
 15179 1806 50       		.byte	0x50
 15180 1807 FA000000 		.4byte	.LVL398
 15181 180b 00010000 		.4byte	.LVL399
 15182 180f 0100     		.2byte	0x1
 15183 1811 50       		.byte	0x50
 15184 1812 06010000 		.4byte	.LVL402
 15185 1816 08010000 		.4byte	.LFE13
 15186 181a 0100     		.2byte	0x1
 15187 181c 50       		.byte	0x50
 15188 181d 00000000 		.4byte	0
 15189 1821 00000000 		.4byte	0
 15190              	.LLST88:
 15191 1825 00000000 		.4byte	.LVL404
 15192 1829 21000000 		.4byte	.LVL408-1
 15193 182d 0100     		.2byte	0x1
 15194 182f 50       		.byte	0x50
 15195 1830 21000000 		.4byte	.LVL408-1
 15196 1834 30000000 		.4byte	.LVL409
 15197 1838 0100     		.2byte	0x1
 15198 183a 55       		.byte	0x55
 15199 183b 30000000 		.4byte	.LVL409
 15200 183f 36000000 		.4byte	.LVL412
 15201 1843 0100     		.2byte	0x1
 15202 1845 50       		.byte	0x50
 15203 1846 36000000 		.4byte	.LVL412
 15204 184a B0000000 		.4byte	.LVL433
 15205 184e 0100     		.2byte	0x1
 15206 1850 55       		.byte	0x55
 15207 1851 B0000000 		.4byte	.LVL433
 15208 1855 BC000000 		.4byte	.LFE15
 15209 1859 0400     		.2byte	0x4
 15210 185b F3       		.byte	0xf3
 15211 185c 01       		.uleb128 0x1
 15212 185d 50       		.byte	0x50
 15213 185e 9F       		.byte	0x9f
 15214 185f 00000000 		.4byte	0
 15215 1863 00000000 		.4byte	0
 15216              	.LLST89:
 15217 1867 00000000 		.4byte	.LVL404
 15218 186b 1E000000 		.4byte	.LVL407
 15219 186f 0100     		.2byte	0x1
 15220 1871 51       		.byte	0x51
 15221 1872 1E000000 		.4byte	.LVL407
 15222 1876 30000000 		.4byte	.LVL409
 15223 187a 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 338


 15224 187c 58       		.byte	0x58
 15225 187d 30000000 		.4byte	.LVL409
 15226 1881 36000000 		.4byte	.LVL412
 15227 1885 0100     		.2byte	0x1
 15228 1887 51       		.byte	0x51
 15229 1888 36000000 		.4byte	.LVL412
 15230 188c 76000000 		.4byte	.LVL420
 15231 1890 0100     		.2byte	0x1
 15232 1892 58       		.byte	0x58
 15233 1893 76000000 		.4byte	.LVL420
 15234 1897 7C000000 		.4byte	.LVL422
 15235 189b 0100     		.2byte	0x1
 15236 189d 52       		.byte	0x52
 15237 189e 7C000000 		.4byte	.LVL422
 15238 18a2 B0000000 		.4byte	.LVL434
 15239 18a6 0100     		.2byte	0x1
 15240 18a8 58       		.byte	0x58
 15241 18a9 B0000000 		.4byte	.LVL434
 15242 18ad BC000000 		.4byte	.LFE15
 15243 18b1 0400     		.2byte	0x4
 15244 18b3 F3       		.byte	0xf3
 15245 18b4 01       		.uleb128 0x1
 15246 18b5 51       		.byte	0x51
 15247 18b6 9F       		.byte	0x9f
 15248 18b7 00000000 		.4byte	0
 15249 18bb 00000000 		.4byte	0
 15250              	.LLST90:
 15251 18bf 22000000 		.4byte	.LVL408
 15252 18c3 30000000 		.4byte	.LVL409
 15253 18c7 0100     		.2byte	0x1
 15254 18c9 50       		.byte	0x50
 15255 18ca 50000000 		.4byte	.LVL417
 15256 18ce 64000000 		.4byte	.LVL418
 15257 18d2 0100     		.2byte	0x1
 15258 18d4 50       		.byte	0x50
 15259 18d5 A6000000 		.4byte	.LVL428
 15260 18d9 A8000000 		.4byte	.LVL429
 15261 18dd 0100     		.2byte	0x1
 15262 18df 50       		.byte	0x50
 15263 18e0 AE000000 		.4byte	.LVL431
 15264 18e4 B0000000 		.4byte	.LVL432
 15265 18e8 0100     		.2byte	0x1
 15266 18ea 50       		.byte	0x50
 15267 18eb 00000000 		.4byte	0
 15268 18ef 00000000 		.4byte	0
 15269              	.LLST91:
 15270 18f3 36000000 		.4byte	.LVL412
 15271 18f7 3A000000 		.4byte	.LVL413
 15272 18fb 0100     		.2byte	0x1
 15273 18fd 56       		.byte	0x56
 15274 18fe 3A000000 		.4byte	.LVL413
 15275 1902 42000000 		.4byte	.LVL415
 15276 1906 0100     		.2byte	0x1
 15277 1908 54       		.byte	0x54
 15278 1909 42000000 		.4byte	.LVL415
 15279 190d 48000000 		.4byte	.LVL416
 15280 1911 0200     		.2byte	0x2
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 339


 15281 1913 32       		.byte	0x32
 15282 1914 9F       		.byte	0x9f
 15283 1915 48000000 		.4byte	.LVL416
 15284 1919 9C000000 		.4byte	.LVL424
 15285 191d 0100     		.2byte	0x1
 15286 191f 54       		.byte	0x54
 15287 1920 A0000000 		.4byte	.LVL425
 15288 1924 A6000000 		.4byte	.LVL428
 15289 1928 0100     		.2byte	0x1
 15290 192a 54       		.byte	0x54
 15291 192b AA000000 		.4byte	.LVL430
 15292 192f AE000000 		.4byte	.LVL431
 15293 1933 0200     		.2byte	0x2
 15294 1935 32       		.byte	0x32
 15295 1936 9F       		.byte	0x9f
 15296 1937 AE000000 		.4byte	.LVL431
 15297 193b B0000000 		.4byte	.LVL432
 15298 193f 0100     		.2byte	0x1
 15299 1941 54       		.byte	0x54
 15300 1942 00000000 		.4byte	0
 15301 1946 00000000 		.4byte	0
 15302              	.LLST92:
 15303 194a 10000000 		.4byte	.LVL405
 15304 194e 1C000000 		.4byte	.LVL406
 15305 1952 0100     		.2byte	0x1
 15306 1954 56       		.byte	0x56
 15307 1955 30000000 		.4byte	.LVL409
 15308 1959 32000000 		.4byte	.LVL410
 15309 195d 0100     		.2byte	0x1
 15310 195f 56       		.byte	0x56
 15311 1960 32000000 		.4byte	.LVL410
 15312 1964 34000000 		.4byte	.LVL411
 15313 1968 0200     		.2byte	0x2
 15314 196a 70       		.byte	0x70
 15315 196b 0C       		.sleb128 12
 15316 196c 34000000 		.4byte	.LVL411
 15317 1970 A6000000 		.4byte	.LVL428
 15318 1974 0100     		.2byte	0x1
 15319 1976 56       		.byte	0x56
 15320 1977 AA000000 		.4byte	.LVL430
 15321 197b B0000000 		.4byte	.LVL432
 15322 197f 0100     		.2byte	0x1
 15323 1981 56       		.byte	0x56
 15324 1982 00000000 		.4byte	0
 15325 1986 00000000 		.4byte	0
 15326              	.LLST93:
 15327 198a 6C000000 		.4byte	.LVL419
 15328 198e 78000000 		.4byte	.LVL421
 15329 1992 0100     		.2byte	0x1
 15330 1994 50       		.byte	0x50
 15331 1995 80000000 		.4byte	.LVL423
 15332 1999 A4000000 		.4byte	.LVL427
 15333 199d 0100     		.2byte	0x1
 15334 199f 50       		.byte	0x50
 15335 19a0 00000000 		.4byte	0
 15336 19a4 00000000 		.4byte	0
 15337              	.LLST94:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 340


 15338 19a8 00000000 		.4byte	.LVL435
 15339 19ac 3C000000 		.4byte	.LVL438
 15340 19b0 0100     		.2byte	0x1
 15341 19b2 50       		.byte	0x50
 15342 19b3 3C000000 		.4byte	.LVL438
 15343 19b7 EE000000 		.4byte	.LVL457
 15344 19bb 0100     		.2byte	0x1
 15345 19bd 54       		.byte	0x54
 15346 19be EE000000 		.4byte	.LVL457
 15347 19c2 F0000000 		.4byte	.LVL458
 15348 19c6 0100     		.2byte	0x1
 15349 19c8 50       		.byte	0x50
 15350 19c9 F0000000 		.4byte	.LVL458
 15351 19cd F2000000 		.4byte	.LVL459
 15352 19d1 0100     		.2byte	0x1
 15353 19d3 54       		.byte	0x54
 15354 19d4 F2000000 		.4byte	.LVL459
 15355 19d8 F4000000 		.4byte	.LVL460
 15356 19dc 0100     		.2byte	0x1
 15357 19de 50       		.byte	0x50
 15358 19df F4000000 		.4byte	.LVL460
 15359 19e3 F6000000 		.4byte	.LVL461
 15360 19e7 0100     		.2byte	0x1
 15361 19e9 54       		.byte	0x54
 15362 19ea F6000000 		.4byte	.LVL461
 15363 19ee F8000000 		.4byte	.LVL462
 15364 19f2 0100     		.2byte	0x1
 15365 19f4 50       		.byte	0x50
 15366 19f5 F8000000 		.4byte	.LVL462
 15367 19f9 18010000 		.4byte	.LVL475
 15368 19fd 0100     		.2byte	0x1
 15369 19ff 54       		.byte	0x54
 15370 1a00 18010000 		.4byte	.LVL475
 15371 1a04 22010000 		.4byte	.LFE17
 15372 1a08 0400     		.2byte	0x4
 15373 1a0a F3       		.byte	0xf3
 15374 1a0b 01       		.uleb128 0x1
 15375 1a0c 50       		.byte	0x50
 15376 1a0d 9F       		.byte	0x9f
 15377 1a0e 00000000 		.4byte	0
 15378 1a12 00000000 		.4byte	0
 15379              	.LLST95:
 15380 1a16 00000000 		.4byte	.LVL435
 15381 1a1a 2A000000 		.4byte	.LVL437
 15382 1a1e 0100     		.2byte	0x1
 15383 1a20 51       		.byte	0x51
 15384 1a21 2A000000 		.4byte	.LVL437
 15385 1a25 92000000 		.4byte	.LVL447
 15386 1a29 0100     		.2byte	0x1
 15387 1a2b 56       		.byte	0x56
 15388 1a2c 92000000 		.4byte	.LVL447
 15389 1a30 EE000000 		.4byte	.LVL457
 15390 1a34 0400     		.2byte	0x4
 15391 1a36 F3       		.byte	0xf3
 15392 1a37 01       		.uleb128 0x1
 15393 1a38 51       		.byte	0x51
 15394 1a39 9F       		.byte	0x9f
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 341


 15395 1a3a EE000000 		.4byte	.LVL457
 15396 1a3e F6000000 		.4byte	.LVL461
 15397 1a42 0100     		.2byte	0x1
 15398 1a44 51       		.byte	0x51
 15399 1a45 F6000000 		.4byte	.LVL461
 15400 1a49 16010000 		.4byte	.LVL473
 15401 1a4d 0100     		.2byte	0x1
 15402 1a4f 56       		.byte	0x56
 15403 1a50 16010000 		.4byte	.LVL473
 15404 1a54 22010000 		.4byte	.LFE17
 15405 1a58 0400     		.2byte	0x4
 15406 1a5a F3       		.byte	0xf3
 15407 1a5b 01       		.uleb128 0x1
 15408 1a5c 51       		.byte	0x51
 15409 1a5d 9F       		.byte	0x9f
 15410 1a5e 00000000 		.4byte	0
 15411 1a62 00000000 		.4byte	0
 15412              	.LLST96:
 15413 1a66 4A000000 		.4byte	.LVL440
 15414 1a6a 56000000 		.4byte	.LVL441
 15415 1a6e 0100     		.2byte	0x1
 15416 1a70 50       		.byte	0x50
 15417 1a71 56000000 		.4byte	.LVL441
 15418 1a75 68000000 		.4byte	.LVL443
 15419 1a79 0100     		.2byte	0x1
 15420 1a7b 58       		.byte	0x58
 15421 1a7c 68000000 		.4byte	.LVL443
 15422 1a80 78000000 		.4byte	.LVL444
 15423 1a84 0100     		.2byte	0x1
 15424 1a86 50       		.byte	0x50
 15425 1a87 78000000 		.4byte	.LVL444
 15426 1a8b DE000000 		.4byte	.LVL456
 15427 1a8f 0100     		.2byte	0x1
 15428 1a91 58       		.byte	0x58
 15429 1a92 FA000000 		.4byte	.LVL463
 15430 1a96 FC000000 		.4byte	.LVL464
 15431 1a9a 0100     		.2byte	0x1
 15432 1a9c 50       		.byte	0x50
 15433 1a9d FC000000 		.4byte	.LVL464
 15434 1aa1 FE000000 		.4byte	.LVL465
 15435 1aa5 0100     		.2byte	0x1
 15436 1aa7 58       		.byte	0x58
 15437 1aa8 FE000000 		.4byte	.LVL465
 15438 1aac 00010000 		.4byte	.LVL466
 15439 1ab0 0100     		.2byte	0x1
 15440 1ab2 50       		.byte	0x50
 15441 1ab3 00010000 		.4byte	.LVL466
 15442 1ab7 06010000 		.4byte	.LVL467
 15443 1abb 0100     		.2byte	0x1
 15444 1abd 58       		.byte	0x58
 15445 1abe 06010000 		.4byte	.LVL467
 15446 1ac2 08010000 		.4byte	.LVL468
 15447 1ac6 0100     		.2byte	0x1
 15448 1ac8 50       		.byte	0x50
 15449 1ac9 08010000 		.4byte	.LVL468
 15450 1acd 0A010000 		.4byte	.LVL469
 15451 1ad1 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 342


 15452 1ad3 58       		.byte	0x58
 15453 1ad4 0A010000 		.4byte	.LVL469
 15454 1ad8 0C010000 		.4byte	.LVL470
 15455 1adc 0100     		.2byte	0x1
 15456 1ade 50       		.byte	0x50
 15457 1adf 0C010000 		.4byte	.LVL470
 15458 1ae3 0E010000 		.4byte	.LVL471
 15459 1ae7 0100     		.2byte	0x1
 15460 1ae9 58       		.byte	0x58
 15461 1aea 0E010000 		.4byte	.LVL471
 15462 1aee 10010000 		.4byte	.LVL472
 15463 1af2 0100     		.2byte	0x1
 15464 1af4 50       		.byte	0x50
 15465 1af5 10010000 		.4byte	.LVL472
 15466 1af9 18010000 		.4byte	.LVL474
 15467 1afd 0100     		.2byte	0x1
 15468 1aff 58       		.byte	0x58
 15469 1b00 00000000 		.4byte	0
 15470 1b04 00000000 		.4byte	0
 15471              	.LLST97:
 15472 1b08 14000000 		.4byte	.LVL436
 15473 1b0c 18010000 		.4byte	.LVL476
 15474 1b10 0100     		.2byte	0x1
 15475 1b12 55       		.byte	0x55
 15476 1b13 00000000 		.4byte	0
 15477 1b17 00000000 		.4byte	0
 15478              	.LLST98:
 15479 1b1b 9C000000 		.4byte	.LVL449
 15480 1b1f A6000000 		.4byte	.LVL450
 15481 1b23 0200     		.2byte	0x2
 15482 1b25 30       		.byte	0x30
 15483 1b26 9F       		.byte	0x9f
 15484 1b27 A6000000 		.4byte	.LVL450
 15485 1b2b C0000000 		.4byte	.LVL452
 15486 1b2f 0100     		.2byte	0x1
 15487 1b31 56       		.byte	0x56
 15488 1b32 C0000000 		.4byte	.LVL452
 15489 1b36 C2000000 		.4byte	.LVL453
 15490 1b3a 0300     		.2byte	0x3
 15491 1b3c 76       		.byte	0x76
 15492 1b3d 7F       		.sleb128 -1
 15493 1b3e 9F       		.byte	0x9f
 15494 1b3f C2000000 		.4byte	.LVL453
 15495 1b43 CE000000 		.4byte	.LVL454
 15496 1b47 0100     		.2byte	0x1
 15497 1b49 56       		.byte	0x56
 15498 1b4a 16010000 		.4byte	.LVL473
 15499 1b4e 18010000 		.4byte	.LVL474
 15500 1b52 0100     		.2byte	0x1
 15501 1b54 56       		.byte	0x56
 15502 1b55 00000000 		.4byte	0
 15503 1b59 00000000 		.4byte	0
 15504              	.LLST99:
 15505 1b5d 00000000 		.4byte	.LVL477
 15506 1b61 09000000 		.4byte	.LVL478-1
 15507 1b65 0100     		.2byte	0x1
 15508 1b67 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 343


 15509 1b68 09000000 		.4byte	.LVL478-1
 15510 1b6c 48000000 		.4byte	.LVL490
 15511 1b70 0100     		.2byte	0x1
 15512 1b72 54       		.byte	0x54
 15513 1b73 48000000 		.4byte	.LVL490
 15514 1b77 4A000000 		.4byte	.LFE18
 15515 1b7b 0400     		.2byte	0x4
 15516 1b7d F3       		.byte	0xf3
 15517 1b7e 01       		.uleb128 0x1
 15518 1b7f 50       		.byte	0x50
 15519 1b80 9F       		.byte	0x9f
 15520 1b81 00000000 		.4byte	0
 15521 1b85 00000000 		.4byte	0
 15522              	.LLST100:
 15523 1b89 0A000000 		.4byte	.LVL478
 15524 1b8d 10000000 		.4byte	.LVL479
 15525 1b91 0100     		.2byte	0x1
 15526 1b93 50       		.byte	0x50
 15527 1b94 1A000000 		.4byte	.LVL481
 15528 1b98 1E000000 		.4byte	.LVL482
 15529 1b9c 0100     		.2byte	0x1
 15530 1b9e 50       		.byte	0x50
 15531 1b9f 1E000000 		.4byte	.LVL482
 15532 1ba3 40000000 		.4byte	.LVL486
 15533 1ba7 0100     		.2byte	0x1
 15534 1ba9 55       		.byte	0x55
 15535 1baa 40000000 		.4byte	.LVL486
 15536 1bae 44000000 		.4byte	.LVL487
 15537 1bb2 0100     		.2byte	0x1
 15538 1bb4 50       		.byte	0x50
 15539 1bb5 44000000 		.4byte	.LVL487
 15540 1bb9 48000000 		.4byte	.LVL489
 15541 1bbd 0100     		.2byte	0x1
 15542 1bbf 55       		.byte	0x55
 15543 1bc0 00000000 		.4byte	0
 15544 1bc4 00000000 		.4byte	0
 15545              	.LLST101:
 15546 1bc8 20000000 		.4byte	.LVL483
 15547 1bcc 31000000 		.4byte	.LVL484-1
 15548 1bd0 0200     		.2byte	0x2
 15549 1bd2 70       		.byte	0x70
 15550 1bd3 00       		.sleb128 0
 15551 1bd4 44000000 		.4byte	.LVL487
 15552 1bd8 46000000 		.4byte	.LVL488
 15553 1bdc 0200     		.2byte	0x2
 15554 1bde 70       		.byte	0x70
 15555 1bdf 00       		.sleb128 0
 15556 1be0 00000000 		.4byte	0
 15557 1be4 00000000 		.4byte	0
 15558              	.LLST102:
 15559 1be8 1E000000 		.4byte	.LVL482
 15560 1bec 31000000 		.4byte	.LVL484-1
 15561 1bf0 0100     		.2byte	0x1
 15562 1bf2 50       		.byte	0x50
 15563 1bf3 44000000 		.4byte	.LVL487
 15564 1bf7 46000000 		.4byte	.LVL488
 15565 1bfb 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 344


 15566 1bfd 50       		.byte	0x50
 15567 1bfe 00000000 		.4byte	0
 15568 1c02 00000000 		.4byte	0
 15569              	.LLST103:
 15570 1c06 00000000 		.4byte	.LVL491
 15571 1c0a 24000000 		.4byte	.LVL494
 15572 1c0e 0100     		.2byte	0x1
 15573 1c10 50       		.byte	0x50
 15574 1c11 24000000 		.4byte	.LVL494
 15575 1c15 30000000 		.4byte	.LVL496
 15576 1c19 0100     		.2byte	0x1
 15577 1c1b 54       		.byte	0x54
 15578 1c1c 30000000 		.4byte	.LVL496
 15579 1c20 34000000 		.4byte	.LVL497
 15580 1c24 0100     		.2byte	0x1
 15581 1c26 50       		.byte	0x50
 15582 1c27 34000000 		.4byte	.LVL497
 15583 1c2b 86000000 		.4byte	.LVL513
 15584 1c2f 0100     		.2byte	0x1
 15585 1c31 54       		.byte	0x54
 15586 1c32 86000000 		.4byte	.LVL513
 15587 1c36 88000000 		.4byte	.LFE24
 15588 1c3a 0400     		.2byte	0x4
 15589 1c3c F3       		.byte	0xf3
 15590 1c3d 01       		.uleb128 0x1
 15591 1c3e 50       		.byte	0x50
 15592 1c3f 9F       		.byte	0x9f
 15593 1c40 00000000 		.4byte	0
 15594 1c44 00000000 		.4byte	0
 15595              	.LLST104:
 15596 1c48 00000000 		.4byte	.LVL491
 15597 1c4c 14000000 		.4byte	.LVL492
 15598 1c50 0100     		.2byte	0x1
 15599 1c52 51       		.byte	0x51
 15600 1c53 14000000 		.4byte	.LVL492
 15601 1c57 16000000 		.4byte	.LVL493
 15602 1c5b 0200     		.2byte	0x2
 15603 1c5d 91       		.byte	0x91
 15604 1c5e 6C       		.sleb128 -20
 15605 1c5f 16000000 		.4byte	.LVL493
 15606 1c63 88000000 		.4byte	.LFE24
 15607 1c67 0400     		.2byte	0x4
 15608 1c69 F3       		.byte	0xf3
 15609 1c6a 01       		.uleb128 0x1
 15610 1c6b 51       		.byte	0x51
 15611 1c6c 9F       		.byte	0x9f
 15612 1c6d 00000000 		.4byte	0
 15613 1c71 00000000 		.4byte	0
 15614              	.LLST105:
 15615 1c75 2A000000 		.4byte	.LVL495
 15616 1c79 30000000 		.4byte	.LVL496
 15617 1c7d 0100     		.2byte	0x1
 15618 1c7f 50       		.byte	0x50
 15619 1c80 3C000000 		.4byte	.LVL498
 15620 1c84 42000000 		.4byte	.LVL499
 15621 1c88 0100     		.2byte	0x1
 15622 1c8a 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 345


 15623 1c8b 46000000 		.4byte	.LVL500
 15624 1c8f 70000000 		.4byte	.LVL506
 15625 1c93 0100     		.2byte	0x1
 15626 1c95 50       		.byte	0x50
 15627 1c96 7E000000 		.4byte	.LVL509
 15628 1c9a 80000000 		.4byte	.LVL510
 15629 1c9e 0100     		.2byte	0x1
 15630 1ca0 50       		.byte	0x50
 15631 1ca1 82000000 		.4byte	.LVL511
 15632 1ca5 88000000 		.4byte	.LFE24
 15633 1ca9 0100     		.2byte	0x1
 15634 1cab 50       		.byte	0x50
 15635 1cac 00000000 		.4byte	0
 15636 1cb0 00000000 		.4byte	0
 15637              	.LLST106:
 15638 1cb4 5E000000 		.4byte	.LVL504
 15639 1cb8 76000000 		.4byte	.LVL507
 15640 1cbc 0100     		.2byte	0x1
 15641 1cbe 53       		.byte	0x53
 15642 1cbf 76000000 		.4byte	.LVL507
 15643 1cc3 7E000000 		.4byte	.LVL509
 15644 1cc7 0200     		.2byte	0x2
 15645 1cc9 74       		.byte	0x74
 15646 1cca 14       		.sleb128 20
 15647 1ccb 82000000 		.4byte	.LVL511
 15648 1ccf 84000000 		.4byte	.LVL512
 15649 1cd3 0100     		.2byte	0x1
 15650 1cd5 53       		.byte	0x53
 15651 1cd6 00000000 		.4byte	0
 15652 1cda 00000000 		.4byte	0
 15653              	.LLST107:
 15654 1cde 4A000000 		.4byte	.LVL501
 15655 1ce2 56000000 		.4byte	.LVL502
 15656 1ce6 0200     		.2byte	0x2
 15657 1ce8 72       		.byte	0x72
 15658 1ce9 0B       		.sleb128 11
 15659 1cea 56000000 		.4byte	.LVL502
 15660 1cee 58000000 		.4byte	.LVL503
 15661 1cf2 0500     		.2byte	0x5
 15662 1cf4 74       		.byte	0x74
 15663 1cf5 18       		.sleb128 24
 15664 1cf6 06       		.byte	0x6
 15665 1cf7 23       		.byte	0x23
 15666 1cf8 0B       		.uleb128 0xb
 15667 1cf9 58000000 		.4byte	.LVL503
 15668 1cfd 60000000 		.4byte	.LVL505
 15669 1d01 0200     		.2byte	0x2
 15670 1d03 72       		.byte	0x72
 15671 1d04 0B       		.sleb128 11
 15672 1d05 60000000 		.4byte	.LVL505
 15673 1d09 7C000000 		.4byte	.LVL508
 15674 1d0d 0500     		.2byte	0x5
 15675 1d0f 74       		.byte	0x74
 15676 1d10 18       		.sleb128 24
 15677 1d11 06       		.byte	0x6
 15678 1d12 23       		.byte	0x23
 15679 1d13 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 346


 15680 1d14 7E000000 		.4byte	.LVL509
 15681 1d18 84000000 		.4byte	.LVL512
 15682 1d1c 0500     		.2byte	0x5
 15683 1d1e 74       		.byte	0x74
 15684 1d1f 18       		.sleb128 24
 15685 1d20 06       		.byte	0x6
 15686 1d21 23       		.byte	0x23
 15687 1d22 0B       		.uleb128 0xb
 15688 1d23 00000000 		.4byte	0
 15689 1d27 00000000 		.4byte	0
 15690              	.LLST108:
 15691 1d2b 00000000 		.4byte	.LVL514
 15692 1d2f 09000000 		.4byte	.LVL515-1
 15693 1d33 0100     		.2byte	0x1
 15694 1d35 50       		.byte	0x50
 15695 1d36 09000000 		.4byte	.LVL515-1
 15696 1d3a 60000000 		.4byte	.LVL533
 15697 1d3e 0100     		.2byte	0x1
 15698 1d40 55       		.byte	0x55
 15699 1d41 60000000 		.4byte	.LVL533
 15700 1d45 62000000 		.4byte	.LFE20
 15701 1d49 0400     		.2byte	0x4
 15702 1d4b F3       		.byte	0xf3
 15703 1d4c 01       		.uleb128 0x1
 15704 1d4d 50       		.byte	0x50
 15705 1d4e 9F       		.byte	0x9f
 15706 1d4f 00000000 		.4byte	0
 15707 1d53 00000000 		.4byte	0
 15708              	.LLST109:
 15709 1d57 0C000000 		.4byte	.LVL516
 15710 1d5b 0E000000 		.4byte	.LVL517
 15711 1d5f 0100     		.2byte	0x1
 15712 1d61 50       		.byte	0x50
 15713 1d62 18000000 		.4byte	.LVL519
 15714 1d66 28000000 		.4byte	.LVL521
 15715 1d6a 0100     		.2byte	0x1
 15716 1d6c 50       		.byte	0x50
 15717 1d6d 28000000 		.4byte	.LVL521
 15718 1d71 30000000 		.4byte	.LVL523
 15719 1d75 0100     		.2byte	0x1
 15720 1d77 54       		.byte	0x54
 15721 1d78 30000000 		.4byte	.LVL523
 15722 1d7c 32000000 		.4byte	.LVL524
 15723 1d80 0100     		.2byte	0x1
 15724 1d82 50       		.byte	0x50
 15725 1d83 32000000 		.4byte	.LVL524
 15726 1d87 40000000 		.4byte	.LVL526
 15727 1d8b 0100     		.2byte	0x1
 15728 1d8d 54       		.byte	0x54
 15729 1d8e 40000000 		.4byte	.LVL526
 15730 1d92 46000000 		.4byte	.LVL528
 15731 1d96 0100     		.2byte	0x1
 15732 1d98 50       		.byte	0x50
 15733 1d99 46000000 		.4byte	.LVL528
 15734 1d9d 60000000 		.4byte	.LVL532
 15735 1da1 0100     		.2byte	0x1
 15736 1da3 54       		.byte	0x54
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 347


 15737 1da4 60000000 		.4byte	.LVL532
 15738 1da8 62000000 		.4byte	.LFE20
 15739 1dac 0100     		.2byte	0x1
 15740 1dae 50       		.byte	0x50
 15741 1daf 00000000 		.4byte	0
 15742 1db3 00000000 		.4byte	0
 15743              	.LLST110:
 15744 1db7 1E000000 		.4byte	.LVL520
 15745 1dbb 2D000000 		.4byte	.LVL522-1
 15746 1dbf 0200     		.2byte	0x2
 15747 1dc1 72       		.byte	0x72
 15748 1dc2 00       		.sleb128 0
 15749 1dc3 00000000 		.4byte	0
 15750 1dc7 00000000 		.4byte	0
 15751              	.LLST111:
 15752 1dcb 44000000 		.4byte	.LVL527
 15753 1dcf 5E000000 		.4byte	.LVL531
 15754 1dd3 0100     		.2byte	0x1
 15755 1dd5 56       		.byte	0x56
 15756 1dd6 00000000 		.4byte	0
 15757 1dda 00000000 		.4byte	0
 15758              	.LLST112:
 15759 1dde 00000000 		.4byte	.LVL534
 15760 1de2 06000000 		.4byte	.LVL536
 15761 1de6 0100     		.2byte	0x1
 15762 1de8 50       		.byte	0x50
 15763 1de9 06000000 		.4byte	.LVL536
 15764 1ded 48000000 		.4byte	.LVL548
 15765 1df1 0100     		.2byte	0x1
 15766 1df3 54       		.byte	0x54
 15767 1df4 48000000 		.4byte	.LVL548
 15768 1df8 4A000000 		.4byte	.LFE19
 15769 1dfc 0400     		.2byte	0x4
 15770 1dfe F3       		.byte	0xf3
 15771 1dff 01       		.uleb128 0x1
 15772 1e00 50       		.byte	0x50
 15773 1e01 9F       		.byte	0x9f
 15774 1e02 00000000 		.4byte	0
 15775 1e06 00000000 		.4byte	0
 15776              	.LLST113:
 15777 1e0a 04000000 		.4byte	.LVL535
 15778 1e0e 0A000000 		.4byte	.LVL537
 15779 1e12 0200     		.2byte	0x2
 15780 1e14 34       		.byte	0x34
 15781 1e15 9F       		.byte	0x9f
 15782 1e16 0A000000 		.4byte	.LVL537
 15783 1e1a 0C000000 		.4byte	.LVL538
 15784 1e1e 0100     		.2byte	0x1
 15785 1e20 50       		.byte	0x50
 15786 1e21 10000000 		.4byte	.LVL539
 15787 1e25 2C000000 		.4byte	.LVL542
 15788 1e29 0100     		.2byte	0x1
 15789 1e2b 50       		.byte	0x50
 15790 1e2c 32000000 		.4byte	.LVL544
 15791 1e30 4A000000 		.4byte	.LFE19
 15792 1e34 0100     		.2byte	0x1
 15793 1e36 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 348


 15794 1e37 00000000 		.4byte	0
 15795 1e3b 00000000 		.4byte	0
 15796              	.LLST114:
 15797 1e3f 18000000 		.4byte	.LVL541
 15798 1e43 2E000000 		.4byte	.LVL543
 15799 1e47 0200     		.2byte	0x2
 15800 1e49 71       		.byte	0x71
 15801 1e4a 00       		.sleb128 0
 15802 1e4b 2E000000 		.4byte	.LVL543
 15803 1e4f 31000000 		.4byte	.LVL544-1
 15804 1e53 0300     		.2byte	0x3
 15805 1e55 74       		.byte	0x74
 15806 1e56 14       		.sleb128 20
 15807 1e57 06       		.byte	0x6
 15808 1e58 3E000000 		.4byte	.LVL546
 15809 1e5c 40000000 		.4byte	.LVL547
 15810 1e60 0200     		.2byte	0x2
 15811 1e62 71       		.byte	0x71
 15812 1e63 00       		.sleb128 0
 15813 1e64 00000000 		.4byte	0
 15814 1e68 00000000 		.4byte	0
 15815              	.LLST115:
 15816 1e6c 16000000 		.4byte	.LVL540
 15817 1e70 2E000000 		.4byte	.LVL543
 15818 1e74 0100     		.2byte	0x1
 15819 1e76 51       		.byte	0x51
 15820 1e77 2E000000 		.4byte	.LVL543
 15821 1e7b 31000000 		.4byte	.LVL544-1
 15822 1e7f 0200     		.2byte	0x2
 15823 1e81 74       		.byte	0x74
 15824 1e82 14       		.sleb128 20
 15825 1e83 3E000000 		.4byte	.LVL546
 15826 1e87 40000000 		.4byte	.LVL547
 15827 1e8b 0100     		.2byte	0x1
 15828 1e8d 51       		.byte	0x51
 15829 1e8e 00000000 		.4byte	0
 15830 1e92 00000000 		.4byte	0
 15831              	.LLST116:
 15832 1e96 00000000 		.4byte	.LVL549
 15833 1e9a 1C000000 		.4byte	.LVL550
 15834 1e9e 0100     		.2byte	0x1
 15835 1ea0 50       		.byte	0x50
 15836 1ea1 1C000000 		.4byte	.LVL550
 15837 1ea5 56000000 		.4byte	.LVL558
 15838 1ea9 0100     		.2byte	0x1
 15839 1eab 54       		.byte	0x54
 15840 1eac 56000000 		.4byte	.LVL558
 15841 1eb0 5E000000 		.4byte	.LVL559
 15842 1eb4 0100     		.2byte	0x1
 15843 1eb6 50       		.byte	0x50
 15844 1eb7 5E000000 		.4byte	.LVL559
 15845 1ebb 66000000 		.4byte	.LVL563
 15846 1ebf 0100     		.2byte	0x1
 15847 1ec1 54       		.byte	0x54
 15848 1ec2 66000000 		.4byte	.LVL563
 15849 1ec6 6C000000 		.4byte	.LFE14
 15850 1eca 0400     		.2byte	0x4
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 349


 15851 1ecc F3       		.byte	0xf3
 15852 1ecd 01       		.uleb128 0x1
 15853 1ece 50       		.byte	0x50
 15854 1ecf 9F       		.byte	0x9f
 15855 1ed0 00000000 		.4byte	0
 15856 1ed4 00000000 		.4byte	0
 15857              	.LLST117:
 15858 1ed8 00000000 		.4byte	.LVL549
 15859 1edc 1C000000 		.4byte	.LVL550
 15860 1ee0 0100     		.2byte	0x1
 15861 1ee2 51       		.byte	0x51
 15862 1ee3 1C000000 		.4byte	.LVL550
 15863 1ee7 4C000000 		.4byte	.LVL556
 15864 1eeb 0100     		.2byte	0x1
 15865 1eed 55       		.byte	0x55
 15866 1eee 4C000000 		.4byte	.LVL556
 15867 1ef2 4E000000 		.4byte	.LVL557
 15868 1ef6 0100     		.2byte	0x1
 15869 1ef8 56       		.byte	0x56
 15870 1ef9 4E000000 		.4byte	.LVL557
 15871 1efd 56000000 		.4byte	.LVL558
 15872 1f01 0100     		.2byte	0x1
 15873 1f03 55       		.byte	0x55
 15874 1f04 56000000 		.4byte	.LVL558
 15875 1f08 5E000000 		.4byte	.LVL559
 15876 1f0c 0100     		.2byte	0x1
 15877 1f0e 51       		.byte	0x51
 15878 1f0f 5E000000 		.4byte	.LVL559
 15879 1f13 66000000 		.4byte	.LVL564
 15880 1f17 0100     		.2byte	0x1
 15881 1f19 55       		.byte	0x55
 15882 1f1a 00000000 		.4byte	0
 15883 1f1e 00000000 		.4byte	0
 15884              	.LLST118:
 15885 1f22 1C000000 		.4byte	.LVL550
 15886 1f26 3C000000 		.4byte	.LVL555
 15887 1f2a 0100     		.2byte	0x1
 15888 1f2c 57       		.byte	0x57
 15889 1f2d 3C000000 		.4byte	.LVL555
 15890 1f31 4E000000 		.4byte	.LVL557
 15891 1f35 0100     		.2byte	0x1
 15892 1f37 50       		.byte	0x50
 15893 1f38 4E000000 		.4byte	.LVL557
 15894 1f3c 56000000 		.4byte	.LVL558
 15895 1f40 0100     		.2byte	0x1
 15896 1f42 57       		.byte	0x57
 15897 1f43 5E000000 		.4byte	.LVL559
 15898 1f47 60000000 		.4byte	.LVL560
 15899 1f4b 0100     		.2byte	0x1
 15900 1f4d 57       		.byte	0x57
 15901 1f4e 62000000 		.4byte	.LVL561
 15902 1f52 66000000 		.4byte	.LVL565
 15903 1f56 0100     		.2byte	0x1
 15904 1f58 57       		.byte	0x57
 15905 1f59 66000000 		.4byte	.LVL565
 15906 1f5d 6C000000 		.4byte	.LFE14
 15907 1f61 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 350


 15908 1f63 50       		.byte	0x50
 15909 1f64 00000000 		.4byte	0
 15910 1f68 00000000 		.4byte	0
 15911              	.LLST119:
 15912 1f6c 26000000 		.4byte	.LVL552
 15913 1f70 32000000 		.4byte	.LVL553
 15914 1f74 0100     		.2byte	0x1
 15915 1f76 50       		.byte	0x50
 15916 1f77 32000000 		.4byte	.LVL553
 15917 1f7b 4E000000 		.4byte	.LVL557
 15918 1f7f 0100     		.2byte	0x1
 15919 1f81 56       		.byte	0x56
 15920 1f82 5E000000 		.4byte	.LVL559
 15921 1f86 64000000 		.4byte	.LVL562
 15922 1f8a 0100     		.2byte	0x1
 15923 1f8c 50       		.byte	0x50
 15924 1f8d 00000000 		.4byte	0
 15925 1f91 00000000 		.4byte	0
 15926              	.LLST120:
 15927 1f95 00000000 		.4byte	.LVL566
 15928 1f99 18000000 		.4byte	.LVL568
 15929 1f9d 0100     		.2byte	0x1
 15930 1f9f 50       		.byte	0x50
 15931 1fa0 18000000 		.4byte	.LVL568
 15932 1fa4 34000000 		.4byte	.LVL570
 15933 1fa8 0400     		.2byte	0x4
 15934 1faa F3       		.byte	0xf3
 15935 1fab 01       		.uleb128 0x1
 15936 1fac 50       		.byte	0x50
 15937 1fad 9F       		.byte	0x9f
 15938 1fae 34000000 		.4byte	.LVL570
 15939 1fb2 36000000 		.4byte	.LVL571
 15940 1fb6 0100     		.2byte	0x1
 15941 1fb8 50       		.byte	0x50
 15942 1fb9 36000000 		.4byte	.LVL571
 15943 1fbd 3C000000 		.4byte	.LFE28
 15944 1fc1 0400     		.2byte	0x4
 15945 1fc3 F3       		.byte	0xf3
 15946 1fc4 01       		.uleb128 0x1
 15947 1fc5 50       		.byte	0x50
 15948 1fc6 9F       		.byte	0x9f
 15949 1fc7 00000000 		.4byte	0
 15950 1fcb 00000000 		.4byte	0
 15951              	.LLST121:
 15952 1fcf 00000000 		.4byte	.LVL566
 15953 1fd3 1B000000 		.4byte	.LVL569-1
 15954 1fd7 0100     		.2byte	0x1
 15955 1fd9 51       		.byte	0x51
 15956 1fda 1B000000 		.4byte	.LVL569-1
 15957 1fde 34000000 		.4byte	.LVL570
 15958 1fe2 0100     		.2byte	0x1
 15959 1fe4 55       		.byte	0x55
 15960 1fe5 34000000 		.4byte	.LVL570
 15961 1fe9 36000000 		.4byte	.LVL571
 15962 1fed 0100     		.2byte	0x1
 15963 1fef 51       		.byte	0x51
 15964 1ff0 36000000 		.4byte	.LVL571
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 351


 15965 1ff4 36000000 		.4byte	.LVL572
 15966 1ff8 0100     		.2byte	0x1
 15967 1ffa 55       		.byte	0x55
 15968 1ffb 36000000 		.4byte	.LVL572
 15969 1fff 3C000000 		.4byte	.LFE28
 15970 2003 0400     		.2byte	0x4
 15971 2005 F3       		.byte	0xf3
 15972 2006 01       		.uleb128 0x1
 15973 2007 51       		.byte	0x51
 15974 2008 9F       		.byte	0x9f
 15975 2009 00000000 		.4byte	0
 15976 200d 00000000 		.4byte	0
 15977              	.LLST122:
 15978 2011 12000000 		.4byte	.LVL567
 15979 2015 34000000 		.4byte	.LVL570
 15980 2019 0100     		.2byte	0x1
 15981 201b 56       		.byte	0x56
 15982 201c 00000000 		.4byte	0
 15983 2020 00000000 		.4byte	0
 15984              	.LLST123:
 15985 2024 00000000 		.4byte	.LVL573
 15986 2028 20000000 		.4byte	.LVL575
 15987 202c 0100     		.2byte	0x1
 15988 202e 50       		.byte	0x50
 15989 202f 20000000 		.4byte	.LVL575
 15990 2033 94010000 		.4byte	.LVL615
 15991 2037 0100     		.2byte	0x1
 15992 2039 56       		.byte	0x56
 15993 203a 94010000 		.4byte	.LVL615
 15994 203e 9C010000 		.4byte	.LFE29
 15995 2042 0400     		.2byte	0x4
 15996 2044 F3       		.byte	0xf3
 15997 2045 01       		.uleb128 0x1
 15998 2046 50       		.byte	0x50
 15999 2047 9F       		.byte	0x9f
 16000 2048 00000000 		.4byte	0
 16001 204c 00000000 		.4byte	0
 16002              	.LLST124:
 16003 2050 00000000 		.4byte	.LVL573
 16004 2054 22000000 		.4byte	.LVL576
 16005 2058 0100     		.2byte	0x1
 16006 205a 51       		.byte	0x51
 16007 205b 22000000 		.4byte	.LVL576
 16008 205f 25000000 		.4byte	.LVL577-1
 16009 2063 0200     		.2byte	0x2
 16010 2065 70       		.byte	0x70
 16011 2066 00       		.sleb128 0
 16012 2067 25000000 		.4byte	.LVL577-1
 16013 206b 9C010000 		.4byte	.LFE29
 16014 206f 0300     		.2byte	0x3
 16015 2071 91       		.byte	0x91
 16016 2072 B47F     		.sleb128 -76
 16017 2074 00000000 		.4byte	0
 16018 2078 00000000 		.4byte	0
 16019              	.LLST125:
 16020 207c 00000000 		.4byte	.LVL573
 16021 2080 18000000 		.4byte	.LVL574
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 352


 16022 2084 0100     		.2byte	0x1
 16023 2086 52       		.byte	0x52
 16024 2087 18000000 		.4byte	.LVL574
 16025 208b 94010000 		.4byte	.LVL616
 16026 208f 0100     		.2byte	0x1
 16027 2091 57       		.byte	0x57
 16028 2092 00000000 		.4byte	0
 16029 2096 00000000 		.4byte	0
 16030              	.LLST126:
 16031 209a 28000000 		.4byte	.LVL578
 16032 209e 32000000 		.4byte	.LVL579
 16033 20a2 0100     		.2byte	0x1
 16034 20a4 50       		.byte	0x50
 16035 20a5 32000000 		.4byte	.LVL579
 16036 20a9 56000000 		.4byte	.LVL584
 16037 20ad 0100     		.2byte	0x1
 16038 20af 54       		.byte	0x54
 16039 20b0 56000000 		.4byte	.LVL584
 16040 20b4 58000000 		.4byte	.LVL585
 16041 20b8 0100     		.2byte	0x1
 16042 20ba 50       		.byte	0x50
 16043 20bb 58000000 		.4byte	.LVL585
 16044 20bf 7A000000 		.4byte	.LVL589
 16045 20c3 0100     		.2byte	0x1
 16046 20c5 54       		.byte	0x54
 16047 20c6 7C000000 		.4byte	.LVL590
 16048 20ca 98000000 		.4byte	.LVL594
 16049 20ce 0100     		.2byte	0x1
 16050 20d0 54       		.byte	0x54
 16051 20d1 9A000000 		.4byte	.LVL595
 16052 20d5 F4000000 		.4byte	.LVL602
 16053 20d9 0100     		.2byte	0x1
 16054 20db 54       		.byte	0x54
 16055 20dc F4000000 		.4byte	.LVL602
 16056 20e0 F8000000 		.4byte	.LVL603
 16057 20e4 0100     		.2byte	0x1
 16058 20e6 50       		.byte	0x50
 16059 20e7 F8000000 		.4byte	.LVL603
 16060 20eb 06010000 		.4byte	.LVL605
 16061 20ef 0100     		.2byte	0x1
 16062 20f1 54       		.byte	0x54
 16063 20f2 06010000 		.4byte	.LVL605
 16064 20f6 08010000 		.4byte	.LVL606
 16065 20fa 0100     		.2byte	0x1
 16066 20fc 50       		.byte	0x50
 16067 20fd 08010000 		.4byte	.LVL606
 16068 2101 20010000 		.4byte	.LVL607
 16069 2105 0100     		.2byte	0x1
 16070 2107 54       		.byte	0x54
 16071 2108 22010000 		.4byte	.LVL608
 16072 210c 94010000 		.4byte	.LVL613
 16073 2110 0100     		.2byte	0x1
 16074 2112 54       		.byte	0x54
 16075 2113 94010000 		.4byte	.LVL613
 16076 2117 9C010000 		.4byte	.LFE29
 16077 211b 0100     		.2byte	0x1
 16078 211d 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 353


 16079 211e 00000000 		.4byte	0
 16080 2122 00000000 		.4byte	0
 16081              	.LLST127:
 16082 2126 3C000000 		.4byte	.LVL582
 16083 212a 94010000 		.4byte	.LVL614
 16084 212e 0100     		.2byte	0x1
 16085 2130 55       		.byte	0x55
 16086 2131 00000000 		.4byte	0
 16087 2135 00000000 		.4byte	0
 16088              	.LLST128:
 16089 2139 A8000000 		.4byte	.LVL597
 16090 213d B4000000 		.4byte	.LVL598
 16091 2141 0100     		.2byte	0x1
 16092 2143 50       		.byte	0x50
 16093 2144 EE000000 		.4byte	.LVL600
 16094 2148 F1000000 		.4byte	.LVL601-1
 16095 214c 0100     		.2byte	0x1
 16096 214e 53       		.byte	0x53
 16097 214f F1000000 		.4byte	.LVL601-1
 16098 2153 08010000 		.4byte	.LVL606
 16099 2157 0100     		.2byte	0x1
 16100 2159 59       		.byte	0x59
 16101 215a 00000000 		.4byte	0
 16102 215e 00000000 		.4byte	0
 16103              	.LLST129:
 16104 2162 D8000000 		.4byte	.LVL599
 16105 2166 F1000000 		.4byte	.LVL601-1
 16106 216a 0100     		.2byte	0x1
 16107 216c 51       		.byte	0x51
 16108 216d F1000000 		.4byte	.LVL601-1
 16109 2171 08010000 		.4byte	.LVL606
 16110 2175 0100     		.2byte	0x1
 16111 2177 58       		.byte	0x58
 16112 2178 00000000 		.4byte	0
 16113 217c 00000000 		.4byte	0
 16114              	.LLST130:
 16115 2180 00000000 		.4byte	.LVL617
 16116 2184 1E000000 		.4byte	.LVL621
 16117 2188 0100     		.2byte	0x1
 16118 218a 50       		.byte	0x50
 16119 218b 1E000000 		.4byte	.LVL621
 16120 218f 94010000 		.4byte	.LVL664
 16121 2193 0100     		.2byte	0x1
 16122 2195 54       		.byte	0x54
 16123 2196 94010000 		.4byte	.LVL664
 16124 219a A0010000 		.4byte	.LFE30
 16125 219e 0400     		.2byte	0x4
 16126 21a0 F3       		.byte	0xf3
 16127 21a1 01       		.uleb128 0x1
 16128 21a2 50       		.byte	0x50
 16129 21a3 9F       		.byte	0x9f
 16130 21a4 00000000 		.4byte	0
 16131 21a8 00000000 		.4byte	0
 16132              	.LLST131:
 16133 21ac 00000000 		.4byte	.LVL617
 16134 21b0 1C000000 		.4byte	.LVL620
 16135 21b4 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 354


 16136 21b6 51       		.byte	0x51
 16137 21b7 1C000000 		.4byte	.LVL620
 16138 21bb 4C000000 		.4byte	.LVL627
 16139 21bf 0100     		.2byte	0x1
 16140 21c1 57       		.byte	0x57
 16141 21c2 4C000000 		.4byte	.LVL627
 16142 21c6 8C010000 		.4byte	.LVL661
 16143 21ca 0400     		.2byte	0x4
 16144 21cc F3       		.byte	0xf3
 16145 21cd 01       		.uleb128 0x1
 16146 21ce 51       		.byte	0x51
 16147 21cf 9F       		.byte	0x9f
 16148 21d0 8C010000 		.4byte	.LVL661
 16149 21d4 92010000 		.4byte	.LVL663
 16150 21d8 0100     		.2byte	0x1
 16151 21da 57       		.byte	0x57
 16152 21db 92010000 		.4byte	.LVL663
 16153 21df A0010000 		.4byte	.LFE30
 16154 21e3 0400     		.2byte	0x4
 16155 21e5 F3       		.byte	0xf3
 16156 21e6 01       		.uleb128 0x1
 16157 21e7 51       		.byte	0x51
 16158 21e8 9F       		.byte	0x9f
 16159 21e9 00000000 		.4byte	0
 16160 21ed 00000000 		.4byte	0
 16161              	.LLST132:
 16162 21f1 00000000 		.4byte	.LVL617
 16163 21f5 21000000 		.4byte	.LVL622-1
 16164 21f9 0100     		.2byte	0x1
 16165 21fb 52       		.byte	0x52
 16166 21fc 21000000 		.4byte	.LVL622-1
 16167 2200 4C000000 		.4byte	.LVL627
 16168 2204 0100     		.2byte	0x1
 16169 2206 58       		.byte	0x58
 16170 2207 4C000000 		.4byte	.LVL627
 16171 220b BA000000 		.4byte	.LVL641
 16172 220f 0100     		.2byte	0x1
 16173 2211 55       		.byte	0x55
 16174 2212 BA000000 		.4byte	.LVL641
 16175 2216 8C010000 		.4byte	.LVL661
 16176 221a 0200     		.2byte	0x2
 16177 221c 91       		.byte	0x91
 16178 221d 54       		.sleb128 -44
 16179 221e 8C010000 		.4byte	.LVL661
 16180 2222 92010000 		.4byte	.LVL663
 16181 2226 0100     		.2byte	0x1
 16182 2228 58       		.byte	0x58
 16183 2229 00000000 		.4byte	0
 16184 222d 00000000 		.4byte	0
 16185              	.LLST133:
 16186 2231 00000000 		.4byte	.LVL617
 16187 2235 18000000 		.4byte	.LVL619
 16188 2239 0100     		.2byte	0x1
 16189 223b 53       		.byte	0x53
 16190 223c 18000000 		.4byte	.LVL619
 16191 2240 94010000 		.4byte	.LVL665
 16192 2244 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 355


 16193 2246 56       		.byte	0x56
 16194 2247 94010000 		.4byte	.LVL665
 16195 224b A0010000 		.4byte	.LFE30
 16196 224f 0400     		.2byte	0x4
 16197 2251 F3       		.byte	0xf3
 16198 2252 01       		.uleb128 0x1
 16199 2253 53       		.byte	0x53
 16200 2254 9F       		.byte	0x9f
 16201 2255 00000000 		.4byte	0
 16202 2259 00000000 		.4byte	0
 16203              	.LLST134:
 16204 225d 22000000 		.4byte	.LVL622
 16205 2261 38000000 		.4byte	.LVL623
 16206 2265 0100     		.2byte	0x1
 16207 2267 50       		.byte	0x50
 16208 2268 8C010000 		.4byte	.LVL661
 16209 226c 8E010000 		.4byte	.LVL662
 16210 2270 0100     		.2byte	0x1
 16211 2272 50       		.byte	0x50
 16212 2273 00000000 		.4byte	0
 16213 2277 00000000 		.4byte	0
 16214              	.LLST135:
 16215 227b 68000000 		.4byte	.LVL629
 16216 227f 6A000000 		.4byte	.LVL630
 16217 2283 0100     		.2byte	0x1
 16218 2285 50       		.byte	0x50
 16219 2286 70000000 		.4byte	.LVL631
 16220 228a 80000000 		.4byte	.LVL632
 16221 228e 0100     		.2byte	0x1
 16222 2290 50       		.byte	0x50
 16223 2291 82000000 		.4byte	.LVL633
 16224 2295 92000000 		.4byte	.LVL634
 16225 2299 0100     		.2byte	0x1
 16226 229b 50       		.byte	0x50
 16227 229c 94000000 		.4byte	.LVL635
 16228 22a0 96000000 		.4byte	.LVL636
 16229 22a4 0100     		.2byte	0x1
 16230 22a6 50       		.byte	0x50
 16231 22a7 00000000 		.4byte	0
 16232 22ab 00000000 		.4byte	0
 16233              	.LLST136:
 16234 22af A2000000 		.4byte	.LVL637
 16235 22b3 B2000000 		.4byte	.LVL638
 16236 22b7 0100     		.2byte	0x1
 16237 22b9 50       		.byte	0x50
 16238 22ba B4000000 		.4byte	.LVL639
 16239 22be B8000000 		.4byte	.LVL640
 16240 22c2 0100     		.2byte	0x1
 16241 22c4 50       		.byte	0x50
 16242 22c5 B8000000 		.4byte	.LVL640
 16243 22c9 08010000 		.4byte	.LVL648
 16244 22cd 0100     		.2byte	0x1
 16245 22cf 5B       		.byte	0x5b
 16246 22d0 08010000 		.4byte	.LVL648
 16247 22d4 10010000 		.4byte	.LVL649
 16248 22d8 0100     		.2byte	0x1
 16249 22da 52       		.byte	0x52
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 356


 16250 22db 10010000 		.4byte	.LVL649
 16251 22df 22010000 		.4byte	.LVL654
 16252 22e3 0100     		.2byte	0x1
 16253 22e5 5B       		.byte	0x5b
 16254 22e6 00000000 		.4byte	0
 16255 22ea 00000000 		.4byte	0
 16256              	.LLST137:
 16257 22ee 40000000 		.4byte	.LVL624
 16258 22f2 48000000 		.4byte	.LVL625
 16259 22f6 0100     		.2byte	0x1
 16260 22f8 55       		.byte	0x55
 16261 22f9 48000000 		.4byte	.LVL625
 16262 22fd 4A000000 		.4byte	.LVL626
 16263 2301 0200     		.2byte	0x2
 16264 2303 91       		.byte	0x91
 16265 2304 54       		.sleb128 -44
 16266 2305 4A000000 		.4byte	.LVL626
 16267 2309 4C000000 		.4byte	.LVL627
 16268 230d 0700     		.2byte	0x7
 16269 230f 74       		.byte	0x74
 16270 2310 0C       		.sleb128 12
 16271 2311 06       		.byte	0x6
 16272 2312 70       		.byte	0x70
 16273 2313 00       		.sleb128 0
 16274 2314 1C       		.byte	0x1c
 16275 2315 9F       		.byte	0x9f
 16276 2316 00000000 		.4byte	0
 16277 231a 00000000 		.4byte	0
 16278              	.LLST138:
 16279 231e 1C010000 		.4byte	.LVL651
 16280 2322 1E010000 		.4byte	.LVL652
 16281 2326 0100     		.2byte	0x1
 16282 2328 53       		.byte	0x53
 16283 2329 30010000 		.4byte	.LVL655
 16284 232d 38010000 		.4byte	.LVL656
 16285 2331 0100     		.2byte	0x1
 16286 2333 53       		.byte	0x53
 16287 2334 38010000 		.4byte	.LVL656
 16288 2338 80010000 		.4byte	.LVL660
 16289 233c 0100     		.2byte	0x1
 16290 233e 59       		.byte	0x59
 16291 233f 00000000 		.4byte	0
 16292 2343 00000000 		.4byte	0
 16293              	.LLST139:
 16294 2347 BE000000 		.4byte	.LVL642
 16295 234b D2000000 		.4byte	.LVL644
 16296 234f 0100     		.2byte	0x1
 16297 2351 55       		.byte	0x55
 16298 2352 D2000000 		.4byte	.LVL644
 16299 2356 E8000000 		.4byte	.LVL647
 16300 235a 0100     		.2byte	0x1
 16301 235c 59       		.byte	0x59
 16302 235d E8000000 		.4byte	.LVL647
 16303 2361 20010000 		.4byte	.LVL653
 16304 2365 0100     		.2byte	0x1
 16305 2367 55       		.byte	0x55
 16306 2368 20010000 		.4byte	.LVL653
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 357


 16307 236c 22010000 		.4byte	.LVL654
 16308 2370 0100     		.2byte	0x1
 16309 2372 59       		.byte	0x59
 16310 2373 00000000 		.4byte	0
 16311 2377 00000000 		.4byte	0
 16312              	.LLST140:
 16313 237b 60000000 		.4byte	.LVL628
 16314 237f 6F000000 		.4byte	.LVL631-1
 16315 2383 0100     		.2byte	0x1
 16316 2385 52       		.byte	0x52
 16317 2386 6F000000 		.4byte	.LVL631-1
 16318 238a CE000000 		.4byte	.LVL643
 16319 238e 0100     		.2byte	0x1
 16320 2390 58       		.byte	0x58
 16321 2391 CE000000 		.4byte	.LVL643
 16322 2395 D6000000 		.4byte	.LVL645
 16323 2399 0100     		.2byte	0x1
 16324 239b 50       		.byte	0x50
 16325 239c D6000000 		.4byte	.LVL645
 16326 23a0 22010000 		.4byte	.LVL654
 16327 23a4 0100     		.2byte	0x1
 16328 23a6 58       		.byte	0x58
 16329 23a7 00000000 		.4byte	0
 16330 23ab 00000000 		.4byte	0
 16331              	.LLST141:
 16332 23af 16000000 		.4byte	.LVL618
 16333 23b3 1C000000 		.4byte	.LVL620
 16334 23b7 0100     		.2byte	0x1
 16335 23b9 51       		.byte	0x51
 16336 23ba 1C000000 		.4byte	.LVL620
 16337 23be 94010000 		.4byte	.LVL666
 16338 23c2 0100     		.2byte	0x1
 16339 23c4 57       		.byte	0x57
 16340 23c5 00000000 		.4byte	0
 16341 23c9 00000000 		.4byte	0
 16342              	.LLST142:
 16343 23cd 00000000 		.4byte	.LVL667
 16344 23d1 1E000000 		.4byte	.LVL671
 16345 23d5 0100     		.2byte	0x1
 16346 23d7 50       		.byte	0x50
 16347 23d8 1E000000 		.4byte	.LVL671
 16348 23dc 06020000 		.4byte	.LVL718
 16349 23e0 0100     		.2byte	0x1
 16350 23e2 54       		.byte	0x54
 16351 23e3 06020000 		.4byte	.LVL718
 16352 23e7 12020000 		.4byte	.LFE31
 16353 23eb 0400     		.2byte	0x4
 16354 23ed F3       		.byte	0xf3
 16355 23ee 01       		.uleb128 0x1
 16356 23ef 50       		.byte	0x50
 16357 23f0 9F       		.byte	0x9f
 16358 23f1 00000000 		.4byte	0
 16359 23f5 00000000 		.4byte	0
 16360              	.LLST143:
 16361 23f9 00000000 		.4byte	.LVL667
 16362 23fd 1C000000 		.4byte	.LVL670
 16363 2401 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 358


 16364 2403 51       		.byte	0x51
 16365 2404 1C000000 		.4byte	.LVL670
 16366 2408 46000000 		.4byte	.LVL674
 16367 240c 0200     		.2byte	0x2
 16368 240e 91       		.byte	0x91
 16369 240f 54       		.sleb128 -44
 16370 2410 46000000 		.4byte	.LVL674
 16371 2414 FE010000 		.4byte	.LVL714
 16372 2418 0400     		.2byte	0x4
 16373 241a F3       		.byte	0xf3
 16374 241b 01       		.uleb128 0x1
 16375 241c 51       		.byte	0x51
 16376 241d 9F       		.byte	0x9f
 16377 241e FE010000 		.4byte	.LVL714
 16378 2422 04020000 		.4byte	.LVL717
 16379 2426 0200     		.2byte	0x2
 16380 2428 91       		.byte	0x91
 16381 2429 54       		.sleb128 -44
 16382 242a 04020000 		.4byte	.LVL717
 16383 242e 12020000 		.4byte	.LFE31
 16384 2432 0400     		.2byte	0x4
 16385 2434 F3       		.byte	0xf3
 16386 2435 01       		.uleb128 0x1
 16387 2436 51       		.byte	0x51
 16388 2437 9F       		.byte	0x9f
 16389 2438 00000000 		.4byte	0
 16390 243c 00000000 		.4byte	0
 16391              	.LLST144:
 16392 2440 00000000 		.4byte	.LVL667
 16393 2444 21000000 		.4byte	.LVL672-1
 16394 2448 0100     		.2byte	0x1
 16395 244a 52       		.byte	0x52
 16396 244b 21000000 		.4byte	.LVL672-1
 16397 244f 44000000 		.4byte	.LVL673
 16398 2453 0100     		.2byte	0x1
 16399 2455 55       		.byte	0x55
 16400 2456 44000000 		.4byte	.LVL673
 16401 245a 46000000 		.4byte	.LVL674
 16402 245e 0400     		.2byte	0x4
 16403 2460 F3       		.byte	0xf3
 16404 2461 01       		.uleb128 0x1
 16405 2462 52       		.byte	0x52
 16406 2463 9F       		.byte	0x9f
 16407 2464 46000000 		.4byte	.LVL674
 16408 2468 06020000 		.4byte	.LVL719
 16409 246c 0100     		.2byte	0x1
 16410 246e 55       		.byte	0x55
 16411 246f 00000000 		.4byte	0
 16412 2473 00000000 		.4byte	0
 16413              	.LLST145:
 16414 2477 00000000 		.4byte	.LVL667
 16415 247b 18000000 		.4byte	.LVL669
 16416 247f 0100     		.2byte	0x1
 16417 2481 53       		.byte	0x53
 16418 2482 18000000 		.4byte	.LVL669
 16419 2486 06020000 		.4byte	.LVL720
 16420 248a 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 359


 16421 248c 56       		.byte	0x56
 16422 248d 06020000 		.4byte	.LVL720
 16423 2491 12020000 		.4byte	.LFE31
 16424 2495 0400     		.2byte	0x4
 16425 2497 F3       		.byte	0xf3
 16426 2498 01       		.uleb128 0x1
 16427 2499 53       		.byte	0x53
 16428 249a 9F       		.byte	0x9f
 16429 249b 00000000 		.4byte	0
 16430 249f 00000000 		.4byte	0
 16431              	.LLST146:
 16432 24a3 22000000 		.4byte	.LVL672
 16433 24a7 46000000 		.4byte	.LVL674
 16434 24ab 0100     		.2byte	0x1
 16435 24ad 50       		.byte	0x50
 16436 24ae FE010000 		.4byte	.LVL714
 16437 24b2 00020000 		.4byte	.LVL715
 16438 24b6 0100     		.2byte	0x1
 16439 24b8 50       		.byte	0x50
 16440 24b9 02020000 		.4byte	.LVL716
 16441 24bd 04020000 		.4byte	.LVL717
 16442 24c1 0100     		.2byte	0x1
 16443 24c3 50       		.byte	0x50
 16444 24c4 00000000 		.4byte	0
 16445 24c8 00000000 		.4byte	0
 16446              	.LLST147:
 16447 24cc 64000000 		.4byte	.LVL676
 16448 24d0 6D000000 		.4byte	.LVL677-1
 16449 24d4 0100     		.2byte	0x1
 16450 24d6 53       		.byte	0x53
 16451 24d7 70000000 		.4byte	.LVL678
 16452 24db 74000000 		.4byte	.LVL679
 16453 24df 0100     		.2byte	0x1
 16454 24e1 50       		.byte	0x50
 16455 24e2 7C000000 		.4byte	.LVL681
 16456 24e6 8A000000 		.4byte	.LVL682
 16457 24ea 0100     		.2byte	0x1
 16458 24ec 53       		.byte	0x53
 16459 24ed 94000000 		.4byte	.LVL683
 16460 24f1 9C000000 		.4byte	.LVL684
 16461 24f5 0100     		.2byte	0x1
 16462 24f7 53       		.byte	0x53
 16463 24f8 A6000000 		.4byte	.LVL685
 16464 24fc A8000000 		.4byte	.LVL686
 16465 2500 0100     		.2byte	0x1
 16466 2502 53       		.byte	0x53
 16467 2503 00000000 		.4byte	0
 16468 2507 00000000 		.4byte	0
 16469              	.LLST148:
 16470 250b D6000000 		.4byte	.LVL688
 16471 250f E6000000 		.4byte	.LVL689
 16472 2513 0100     		.2byte	0x1
 16473 2515 50       		.byte	0x50
 16474 2516 E8000000 		.4byte	.LVL690
 16475 251a EC000000 		.4byte	.LVL691
 16476 251e 0100     		.2byte	0x1
 16477 2520 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 360


 16478 2521 EC000000 		.4byte	.LVL691
 16479 2525 34010000 		.4byte	.LVL699
 16480 2529 0100     		.2byte	0x1
 16481 252b 5B       		.byte	0x5b
 16482 252c 34010000 		.4byte	.LVL699
 16483 2530 3E010000 		.4byte	.LVL701
 16484 2534 0100     		.2byte	0x1
 16485 2536 52       		.byte	0x52
 16486 2537 3E010000 		.4byte	.LVL701
 16487 253b 7E010000 		.4byte	.LVL707
 16488 253f 0100     		.2byte	0x1
 16489 2541 5B       		.byte	0x5b
 16490 2542 00000000 		.4byte	0
 16491 2546 00000000 		.4byte	0
 16492              	.LLST149:
 16493 254a 50010000 		.4byte	.LVL703
 16494 254e 52010000 		.4byte	.LVL704
 16495 2552 0100     		.2byte	0x1
 16496 2554 52       		.byte	0x52
 16497 2555 8C010000 		.4byte	.LVL708
 16498 2559 92010000 		.4byte	.LVL709
 16499 255d 0100     		.2byte	0x1
 16500 255f 53       		.byte	0x53
 16501 2560 92010000 		.4byte	.LVL709
 16502 2564 E2010000 		.4byte	.LVL713
 16503 2568 0100     		.2byte	0x1
 16504 256a 58       		.byte	0x58
 16505 256b 00000000 		.4byte	0
 16506 256f 00000000 		.4byte	0
 16507              	.LLST150:
 16508 2573 F0000000 		.4byte	.LVL692
 16509 2577 FC000000 		.4byte	.LVL693
 16510 257b 0100     		.2byte	0x1
 16511 257d 53       		.byte	0x53
 16512 257e FC000000 		.4byte	.LVL693
 16513 2582 1A010000 		.4byte	.LVL698
 16514 2586 0100     		.2byte	0x1
 16515 2588 58       		.byte	0x58
 16516 2589 1A010000 		.4byte	.LVL698
 16517 258d 3A010000 		.4byte	.LVL700
 16518 2591 0100     		.2byte	0x1
 16519 2593 57       		.byte	0x57
 16520 2594 3A010000 		.4byte	.LVL700
 16521 2598 50010000 		.4byte	.LVL703
 16522 259c 0100     		.2byte	0x1
 16523 259e 58       		.byte	0x58
 16524 259f 52010000 		.4byte	.LVL704
 16525 25a3 54010000 		.4byte	.LVL705
 16526 25a7 0100     		.2byte	0x1
 16527 25a9 53       		.byte	0x53
 16528 25aa 54010000 		.4byte	.LVL705
 16529 25ae 7E010000 		.4byte	.LVL707
 16530 25b2 0100     		.2byte	0x1
 16531 25b4 58       		.byte	0x58
 16532 25b5 00000000 		.4byte	0
 16533 25b9 00000000 		.4byte	0
 16534              	.LLST151:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 361


 16535 25bd 16000000 		.4byte	.LVL668
 16536 25c1 1C000000 		.4byte	.LVL670
 16537 25c5 0100     		.2byte	0x1
 16538 25c7 51       		.byte	0x51
 16539 25c8 1C000000 		.4byte	.LVL670
 16540 25cc CE010000 		.4byte	.LVL712
 16541 25d0 0200     		.2byte	0x2
 16542 25d2 91       		.byte	0x91
 16543 25d3 54       		.sleb128 -44
 16544 25d4 CE010000 		.4byte	.LVL712
 16545 25d8 E2010000 		.4byte	.LVL713
 16546 25dc 0100     		.2byte	0x1
 16547 25de 57       		.byte	0x57
 16548 25df E2010000 		.4byte	.LVL713
 16549 25e3 12020000 		.4byte	.LFE31
 16550 25e7 0200     		.2byte	0x2
 16551 25e9 91       		.byte	0x91
 16552 25ea 54       		.sleb128 -44
 16553 25eb 00000000 		.4byte	0
 16554 25ef 00000000 		.4byte	0
 16555              	.LLST152:
 16556 25f3 5C000000 		.4byte	.LVL675
 16557 25f7 6D000000 		.4byte	.LVL677-1
 16558 25fb 0100     		.2byte	0x1
 16559 25fd 52       		.byte	0x52
 16560 25fe 6D000000 		.4byte	.LVL677-1
 16561 2602 74000000 		.4byte	.LVL679
 16562 2606 0100     		.2byte	0x1
 16563 2608 59       		.byte	0x59
 16564 2609 74000000 		.4byte	.LVL679
 16565 260d 79000000 		.4byte	.LVL680-1
 16566 2611 0100     		.2byte	0x1
 16567 2613 52       		.byte	0x52
 16568 2614 79000000 		.4byte	.LVL680-1
 16569 2618 00010000 		.4byte	.LVL694
 16570 261c 0100     		.2byte	0x1
 16571 261e 59       		.byte	0x59
 16572 261f 00010000 		.4byte	.LVL694
 16573 2623 10010000 		.4byte	.LVL696
 16574 2627 0100     		.2byte	0x1
 16575 2629 57       		.byte	0x57
 16576 262a 10010000 		.4byte	.LVL696
 16577 262e 7E010000 		.4byte	.LVL707
 16578 2632 0100     		.2byte	0x1
 16579 2634 59       		.byte	0x59
 16580 2635 00000000 		.4byte	0
 16581 2639 00000000 		.4byte	0
 16582              	.LLST153:
 16583 263d 00000000 		.4byte	.LVL721
 16584 2641 08000000 		.4byte	.LVL722
 16585 2645 0100     		.2byte	0x1
 16586 2647 50       		.byte	0x50
 16587 2648 08000000 		.4byte	.LVL722
 16588 264c 78000000 		.4byte	.LVL730
 16589 2650 0100     		.2byte	0x1
 16590 2652 54       		.byte	0x54
 16591 2653 78000000 		.4byte	.LVL730
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 362


 16592 2657 7A000000 		.4byte	.LFE32
 16593 265b 0400     		.2byte	0x4
 16594 265d F3       		.byte	0xf3
 16595 265e 01       		.uleb128 0x1
 16596 265f 50       		.byte	0x50
 16597 2660 9F       		.byte	0x9f
 16598 2661 00000000 		.4byte	0
 16599 2665 00000000 		.4byte	0
 16600              	.LLST154:
 16601 2669 0C000000 		.4byte	.LVL723
 16602 266d 18000000 		.4byte	.LVL724
 16603 2671 0100     		.2byte	0x1
 16604 2673 50       		.byte	0x50
 16605 2674 1E000000 		.4byte	.LVL725
 16606 2678 55000000 		.4byte	.LVL727-1
 16607 267c 0100     		.2byte	0x1
 16608 267e 50       		.byte	0x50
 16609 267f 78000000 		.4byte	.LVL729
 16610 2683 7A000000 		.4byte	.LFE32
 16611 2687 0100     		.2byte	0x1
 16612 2689 50       		.byte	0x50
 16613 268a 00000000 		.4byte	0
 16614 268e 00000000 		.4byte	0
 16615              	.LLST155:
 16616 2692 56000000 		.4byte	.LVL727
 16617 2696 62000000 		.4byte	.LVL728
 16618 269a 0100     		.2byte	0x1
 16619 269c 50       		.byte	0x50
 16620 269d 00000000 		.4byte	0
 16621 26a1 00000000 		.4byte	0
 16622              	.LLST156:
 16623 26a5 24000000 		.4byte	.LVL726
 16624 26a9 78000000 		.4byte	.LVL729
 16625 26ad 0100     		.2byte	0x1
 16626 26af 55       		.byte	0x55
 16627 26b0 00000000 		.4byte	0
 16628 26b4 00000000 		.4byte	0
 16629              	.LLST157:
 16630 26b8 00000000 		.4byte	.LVL731
 16631 26bc 07000000 		.4byte	.LVL732-1
 16632 26c0 0100     		.2byte	0x1
 16633 26c2 50       		.byte	0x50
 16634 26c3 07000000 		.4byte	.LVL732-1
 16635 26c7 1A000000 		.4byte	.LVL735
 16636 26cb 0100     		.2byte	0x1
 16637 26cd 54       		.byte	0x54
 16638 26ce 1A000000 		.4byte	.LVL735
 16639 26d2 1C000000 		.4byte	.LFE33
 16640 26d6 0400     		.2byte	0x4
 16641 26d8 F3       		.byte	0xf3
 16642 26d9 01       		.uleb128 0x1
 16643 26da 50       		.byte	0x50
 16644 26db 9F       		.byte	0x9f
 16645 26dc 00000000 		.4byte	0
 16646 26e0 00000000 		.4byte	0
 16647              	.LLST158:
 16648 26e4 08000000 		.4byte	.LVL732
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 363


 16649 26e8 0E000000 		.4byte	.LVL733
 16650 26ec 0100     		.2byte	0x1
 16651 26ee 50       		.byte	0x50
 16652 26ef 12000000 		.4byte	.LVL734
 16653 26f3 1C000000 		.4byte	.LFE33
 16654 26f7 0100     		.2byte	0x1
 16655 26f9 50       		.byte	0x50
 16656 26fa 00000000 		.4byte	0
 16657 26fe 00000000 		.4byte	0
 16658              	.LLST159:
 16659 2702 00000000 		.4byte	.LVL736
 16660 2706 12000000 		.4byte	.LVL738
 16661 270a 0100     		.2byte	0x1
 16662 270c 50       		.byte	0x50
 16663 270d 12000000 		.4byte	.LVL738
 16664 2711 66010000 		.4byte	.LVL785
 16665 2715 0100     		.2byte	0x1
 16666 2717 54       		.byte	0x54
 16667 2718 66010000 		.4byte	.LVL785
 16668 271c 70010000 		.4byte	.LFE34
 16669 2720 0400     		.2byte	0x4
 16670 2722 F3       		.byte	0xf3
 16671 2723 01       		.uleb128 0x1
 16672 2724 50       		.byte	0x50
 16673 2725 9F       		.byte	0x9f
 16674 2726 00000000 		.4byte	0
 16675 272a 00000000 		.4byte	0
 16676              	.LLST160:
 16677 272e 00000000 		.4byte	.LVL736
 16678 2732 10000000 		.4byte	.LVL737
 16679 2736 0100     		.2byte	0x1
 16680 2738 51       		.byte	0x51
 16681 2739 10000000 		.4byte	.LVL737
 16682 273d B0000000 		.4byte	.LVL759
 16683 2741 0100     		.2byte	0x1
 16684 2743 55       		.byte	0x55
 16685 2744 B2000000 		.4byte	.LVL760
 16686 2748 36010000 		.4byte	.LVL777
 16687 274c 0100     		.2byte	0x1
 16688 274e 55       		.byte	0x55
 16689 274f 3A010000 		.4byte	.LVL779
 16690 2753 3C010000 		.4byte	.LVL780
 16691 2757 0100     		.2byte	0x1
 16692 2759 55       		.byte	0x55
 16693 275a 3E010000 		.4byte	.LVL781
 16694 275e 40010000 		.4byte	.LVL782
 16695 2762 0100     		.2byte	0x1
 16696 2764 55       		.byte	0x55
 16697 2765 62010000 		.4byte	.LVL783
 16698 2769 66010000 		.4byte	.LVL784
 16699 276d 0100     		.2byte	0x1
 16700 276f 55       		.byte	0x55
 16701 2770 00000000 		.4byte	0
 16702 2774 00000000 		.4byte	0
 16703              	.LLST161:
 16704 2778 18000000 		.4byte	.LVL740
 16705 277c 4C000000 		.4byte	.LVL744
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 364


 16706 2780 0100     		.2byte	0x1
 16707 2782 50       		.byte	0x50
 16708 2783 4C000000 		.4byte	.LVL744
 16709 2787 3A010000 		.4byte	.LVL779
 16710 278b 0100     		.2byte	0x1
 16711 278d 57       		.byte	0x57
 16712 278e 3A010000 		.4byte	.LVL779
 16713 2792 3E010000 		.4byte	.LVL781
 16714 2796 0100     		.2byte	0x1
 16715 2798 50       		.byte	0x50
 16716 2799 3E010000 		.4byte	.LVL781
 16717 279d 62010000 		.4byte	.LVL783
 16718 27a1 0100     		.2byte	0x1
 16719 27a3 57       		.byte	0x57
 16720 27a4 62010000 		.4byte	.LVL783
 16721 27a8 66010000 		.4byte	.LVL784
 16722 27ac 0100     		.2byte	0x1
 16723 27ae 50       		.byte	0x50
 16724 27af 66010000 		.4byte	.LVL784
 16725 27b3 66010000 		.4byte	.LVL786
 16726 27b7 0100     		.2byte	0x1
 16727 27b9 57       		.byte	0x57
 16728 27ba 00000000 		.4byte	0
 16729 27be 00000000 		.4byte	0
 16730              	.LLST162:
 16731 27c2 72000000 		.4byte	.LVL749
 16732 27c6 74000000 		.4byte	.LVL750
 16733 27ca 0100     		.2byte	0x1
 16734 27cc 51       		.byte	0x51
 16735 27cd 76000000 		.4byte	.LVL751
 16736 27d1 7F000000 		.4byte	.LVL752-1
 16737 27d5 0100     		.2byte	0x1
 16738 27d7 51       		.byte	0x51
 16739 27d8 82000000 		.4byte	.LVL753
 16740 27dc 92000000 		.4byte	.LVL754
 16741 27e0 0100     		.2byte	0x1
 16742 27e2 50       		.byte	0x50
 16743 27e3 92000000 		.4byte	.LVL754
 16744 27e7 94000000 		.4byte	.LVL755
 16745 27eb 0100     		.2byte	0x1
 16746 27ed 51       		.byte	0x51
 16747 27ee 94000000 		.4byte	.LVL755
 16748 27f2 A4000000 		.4byte	.LVL756
 16749 27f6 0100     		.2byte	0x1
 16750 27f8 50       		.byte	0x50
 16751 27f9 A4000000 		.4byte	.LVL756
 16752 27fd A6000000 		.4byte	.LVL757
 16753 2801 0100     		.2byte	0x1
 16754 2803 51       		.byte	0x51
 16755 2804 A6000000 		.4byte	.LVL757
 16756 2808 A8000000 		.4byte	.LVL758
 16757 280c 0100     		.2byte	0x1
 16758 280e 50       		.byte	0x50
 16759 280f A8000000 		.4byte	.LVL758
 16760 2813 BF000000 		.4byte	.LVL761-1
 16761 2817 0100     		.2byte	0x1
 16762 2819 51       		.byte	0x51
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 365


 16763 281a C2000000 		.4byte	.LVL762
 16764 281e C6000000 		.4byte	.LVL763
 16765 2822 0100     		.2byte	0x1
 16766 2824 50       		.byte	0x50
 16767 2825 C6000000 		.4byte	.LVL763
 16768 2829 CB000000 		.4byte	.LVL764-1
 16769 282d 0100     		.2byte	0x1
 16770 282f 51       		.byte	0x51
 16771 2830 CE000000 		.4byte	.LVL765
 16772 2834 DE000000 		.4byte	.LVL766
 16773 2838 0100     		.2byte	0x1
 16774 283a 50       		.byte	0x50
 16775 283b DE000000 		.4byte	.LVL766
 16776 283f E0000000 		.4byte	.LVL767
 16777 2843 0100     		.2byte	0x1
 16778 2845 51       		.byte	0x51
 16779 2846 E0000000 		.4byte	.LVL767
 16780 284a F8000000 		.4byte	.LVL768
 16781 284e 0100     		.2byte	0x1
 16782 2850 50       		.byte	0x50
 16783 2851 F8000000 		.4byte	.LVL768
 16784 2855 FA000000 		.4byte	.LVL769
 16785 2859 0100     		.2byte	0x1
 16786 285b 51       		.byte	0x51
 16787 285c FA000000 		.4byte	.LVL769
 16788 2860 06010000 		.4byte	.LVL771
 16789 2864 0100     		.2byte	0x1
 16790 2866 50       		.byte	0x50
 16791 2867 06010000 		.4byte	.LVL771
 16792 286b 10010000 		.4byte	.LVL772
 16793 286f 0100     		.2byte	0x1
 16794 2871 51       		.byte	0x51
 16795 2872 10010000 		.4byte	.LVL772
 16796 2876 12010000 		.4byte	.LVL773
 16797 287a 0100     		.2byte	0x1
 16798 287c 50       		.byte	0x50
 16799 287d 12010000 		.4byte	.LVL773
 16800 2881 21010000 		.4byte	.LVL774-1
 16801 2885 0100     		.2byte	0x1
 16802 2887 51       		.byte	0x51
 16803 2888 3E010000 		.4byte	.LVL781
 16804 288c 40010000 		.4byte	.LVL782
 16805 2890 0100     		.2byte	0x1
 16806 2892 51       		.byte	0x51
 16807 2893 00000000 		.4byte	0
 16808 2897 00000000 		.4byte	0
 16809              	.LLST163:
 16810 289b 46000000 		.4byte	.LVL743
 16811 289f 3A010000 		.4byte	.LVL779
 16812 28a3 0100     		.2byte	0x1
 16813 28a5 56       		.byte	0x56
 16814 28a6 3E010000 		.4byte	.LVL781
 16815 28aa 40010000 		.4byte	.LVL782
 16816 28ae 0100     		.2byte	0x1
 16817 28b0 56       		.byte	0x56
 16818 28b1 00000000 		.4byte	0
 16819 28b5 00000000 		.4byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 366


 16820              	.LLST164:
 16821 28b9 36000000 		.4byte	.LVL742
 16822 28bd 22010000 		.4byte	.LVL774
 16823 28c1 0200     		.2byte	0x2
 16824 28c3 30       		.byte	0x30
 16825 28c4 9F       		.byte	0x9f
 16826 28c5 22010000 		.4byte	.LVL774
 16827 28c9 32010000 		.4byte	.LVL775
 16828 28cd 0100     		.2byte	0x1
 16829 28cf 50       		.byte	0x50
 16830 28d0 34010000 		.4byte	.LVL776
 16831 28d4 38010000 		.4byte	.LVL778
 16832 28d8 0100     		.2byte	0x1
 16833 28da 50       		.byte	0x50
 16834 28db 38010000 		.4byte	.LVL778
 16835 28df 3A010000 		.4byte	.LVL779
 16836 28e3 0100     		.2byte	0x1
 16837 28e5 55       		.byte	0x55
 16838 28e6 3A010000 		.4byte	.LVL779
 16839 28ea 40010000 		.4byte	.LVL782
 16840 28ee 0200     		.2byte	0x2
 16841 28f0 30       		.byte	0x30
 16842 28f1 9F       		.byte	0x9f
 16843 28f2 40010000 		.4byte	.LVL782
 16844 28f6 62010000 		.4byte	.LVL783
 16845 28fa 0100     		.2byte	0x1
 16846 28fc 55       		.byte	0x55
 16847 28fd 00000000 		.4byte	0
 16848 2901 00000000 		.4byte	0
 16849              	.LLST165:
 16850 2905 36000000 		.4byte	.LVL742
 16851 2909 51000000 		.4byte	.LVL745-1
 16852 290d 0100     		.2byte	0x1
 16853 290f 52       		.byte	0x52
 16854 2910 51000000 		.4byte	.LVL745-1
 16855 2914 5A000000 		.4byte	.LVL746
 16856 2918 0100     		.2byte	0x1
 16857 291a 58       		.byte	0x58
 16858 291b 5A000000 		.4byte	.LVL746
 16859 291f 74000000 		.4byte	.LVL750
 16860 2923 0300     		.2byte	0x3
 16861 2925 78       		.byte	0x78
 16862 2926 01       		.sleb128 1
 16863 2927 9F       		.byte	0x9f
 16864 2928 3A010000 		.4byte	.LVL779
 16865 292c 3E010000 		.4byte	.LVL781
 16866 2930 0100     		.2byte	0x1
 16867 2932 52       		.byte	0x52
 16868 2933 00000000 		.4byte	0
 16869 2937 00000000 		.4byte	0
 16870              	.LLST166:
 16871 293b 00000000 		.4byte	.LVL787
 16872 293f 0A000000 		.4byte	.LVL788
 16873 2943 0100     		.2byte	0x1
 16874 2945 50       		.byte	0x50
 16875 2946 0A000000 		.4byte	.LVL788
 16876 294a 68000000 		.4byte	.LVL797
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 367


 16877 294e 0100     		.2byte	0x1
 16878 2950 54       		.byte	0x54
 16879 2951 68000000 		.4byte	.LVL797
 16880 2955 6A000000 		.4byte	.LFE35
 16881 2959 0400     		.2byte	0x4
 16882 295b F3       		.byte	0xf3
 16883 295c 01       		.uleb128 0x1
 16884 295d 50       		.byte	0x50
 16885 295e 9F       		.byte	0x9f
 16886 295f 00000000 		.4byte	0
 16887 2963 00000000 		.4byte	0
 16888              	.LLST167:
 16889 2967 00000000 		.4byte	.LVL787
 16890 296b 0C000000 		.4byte	.LVL789
 16891 296f 0100     		.2byte	0x1
 16892 2971 51       		.byte	0x51
 16893 2972 0C000000 		.4byte	.LVL789
 16894 2976 11000000 		.4byte	.LVL790-1
 16895 297a 0200     		.2byte	0x2
 16896 297c 70       		.byte	0x70
 16897 297d 00       		.sleb128 0
 16898 297e 11000000 		.4byte	.LVL790-1
 16899 2982 6A000000 		.4byte	.LFE35
 16900 2986 0200     		.2byte	0x2
 16901 2988 91       		.byte	0x91
 16902 2989 5C       		.sleb128 -36
 16903 298a 00000000 		.4byte	0
 16904 298e 00000000 		.4byte	0
 16905              	.LLST168:
 16906 2992 12000000 		.4byte	.LVL790
 16907 2996 1C000000 		.4byte	.LVL791
 16908 299a 0100     		.2byte	0x1
 16909 299c 50       		.byte	0x50
 16910 299d 22000000 		.4byte	.LVL792
 16911 29a1 5A000000 		.4byte	.LVL794
 16912 29a5 0100     		.2byte	0x1
 16913 29a7 50       		.byte	0x50
 16914 29a8 60000000 		.4byte	.LVL795
 16915 29ac 6A000000 		.4byte	.LFE35
 16916 29b0 0100     		.2byte	0x1
 16917 29b2 50       		.byte	0x50
 16918 29b3 00000000 		.4byte	0
 16919 29b7 00000000 		.4byte	0
 16920              	.LLST169:
 16921 29bb 00000000 		.4byte	.LVL798
 16922 29bf 0C000000 		.4byte	.LVL800
 16923 29c3 0100     		.2byte	0x1
 16924 29c5 50       		.byte	0x50
 16925 29c6 0C000000 		.4byte	.LVL800
 16926 29ca 5C000000 		.4byte	.LVL815
 16927 29ce 0100     		.2byte	0x1
 16928 29d0 54       		.byte	0x54
 16929 29d1 5C000000 		.4byte	.LVL815
 16930 29d5 5E000000 		.4byte	.LFE36
 16931 29d9 0400     		.2byte	0x4
 16932 29db F3       		.byte	0xf3
 16933 29dc 01       		.uleb128 0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 368


 16934 29dd 50       		.byte	0x50
 16935 29de 9F       		.byte	0x9f
 16936 29df 00000000 		.4byte	0
 16937 29e3 00000000 		.4byte	0
 16938              	.LLST170:
 16939 29e7 00000000 		.4byte	.LVL798
 16940 29eb 0A000000 		.4byte	.LVL799
 16941 29ef 0100     		.2byte	0x1
 16942 29f1 51       		.byte	0x51
 16943 29f2 0A000000 		.4byte	.LVL799
 16944 29f6 5C000000 		.4byte	.LVL816
 16945 29fa 0100     		.2byte	0x1
 16946 29fc 57       		.byte	0x57
 16947 29fd 5C000000 		.4byte	.LVL816
 16948 2a01 5E000000 		.4byte	.LFE36
 16949 2a05 0400     		.2byte	0x4
 16950 2a07 F3       		.byte	0xf3
 16951 2a08 01       		.uleb128 0x1
 16952 2a09 51       		.byte	0x51
 16953 2a0a 9F       		.byte	0x9f
 16954 2a0b 00000000 		.4byte	0
 16955 2a0f 00000000 		.4byte	0
 16956              	.LLST171:
 16957 2a13 12000000 		.4byte	.LVL802
 16958 2a17 1A000000 		.4byte	.LVL803
 16959 2a1b 0100     		.2byte	0x1
 16960 2a1d 50       		.byte	0x50
 16961 2a1e 1A000000 		.4byte	.LVL803
 16962 2a22 20000000 		.4byte	.LVL804
 16963 2a26 0100     		.2byte	0x1
 16964 2a28 56       		.byte	0x56
 16965 2a29 20000000 		.4byte	.LVL804
 16966 2a2d 28000000 		.4byte	.LVL805
 16967 2a31 0100     		.2byte	0x1
 16968 2a33 50       		.byte	0x50
 16969 2a34 28000000 		.4byte	.LVL805
 16970 2a38 2E000000 		.4byte	.LVL807
 16971 2a3c 0100     		.2byte	0x1
 16972 2a3e 56       		.byte	0x56
 16973 2a3f 2E000000 		.4byte	.LVL807
 16974 2a43 36000000 		.4byte	.LVL808
 16975 2a47 0100     		.2byte	0x1
 16976 2a49 50       		.byte	0x50
 16977 2a4a 36000000 		.4byte	.LVL808
 16978 2a4e 38000000 		.4byte	.LVL809
 16979 2a52 0200     		.2byte	0x2
 16980 2a54 30       		.byte	0x30
 16981 2a55 9F       		.byte	0x9f
 16982 2a56 38000000 		.4byte	.LVL809
 16983 2a5a 4C000000 		.4byte	.LVL811
 16984 2a5e 0100     		.2byte	0x1
 16985 2a60 55       		.byte	0x55
 16986 2a61 4C000000 		.4byte	.LVL811
 16987 2a65 54000000 		.4byte	.LVL812
 16988 2a69 0100     		.2byte	0x1
 16989 2a6b 50       		.byte	0x50
 16990 2a6c 54000000 		.4byte	.LVL812
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 369


 16991 2a70 58000000 		.4byte	.LVL813
 16992 2a74 0200     		.2byte	0x2
 16993 2a76 30       		.byte	0x30
 16994 2a77 9F       		.byte	0x9f
 16995 2a78 58000000 		.4byte	.LVL813
 16996 2a7c 5A000000 		.4byte	.LVL814
 16997 2a80 0100     		.2byte	0x1
 16998 2a82 55       		.byte	0x55
 16999 2a83 5A000000 		.4byte	.LVL814
 17000 2a87 5E000000 		.4byte	.LFE36
 17001 2a8b 0100     		.2byte	0x1
 17002 2a8d 50       		.byte	0x50
 17003 2a8e 00000000 		.4byte	0
 17004 2a92 00000000 		.4byte	0
 17005              	.LLST172:
 17006 2a96 00000000 		.4byte	.LVL817
 17007 2a9a 0A000000 		.4byte	.LVL818
 17008 2a9e 0100     		.2byte	0x1
 17009 2aa0 50       		.byte	0x50
 17010 2aa1 0A000000 		.4byte	.LVL818
 17011 2aa5 11000000 		.4byte	.LVL820-1
 17012 2aa9 0200     		.2byte	0x2
 17013 2aab 70       		.byte	0x70
 17014 2aac 00       		.sleb128 0
 17015 2aad 11000000 		.4byte	.LVL820-1
 17016 2ab1 3E000000 		.4byte	.LFE37
 17017 2ab5 0200     		.2byte	0x2
 17018 2ab7 91       		.byte	0x91
 17019 2ab8 44       		.sleb128 -60
 17020 2ab9 00000000 		.4byte	0
 17021 2abd 00000000 		.4byte	0
 17022              	.LLST173:
 17023 2ac1 00000000 		.4byte	.LVL817
 17024 2ac5 0C000000 		.4byte	.LVL819
 17025 2ac9 0100     		.2byte	0x1
 17026 2acb 51       		.byte	0x51
 17027 2acc 0C000000 		.4byte	.LVL819
 17028 2ad0 3C000000 		.4byte	.LVL830
 17029 2ad4 0100     		.2byte	0x1
 17030 2ad6 55       		.byte	0x55
 17031 2ad7 3C000000 		.4byte	.LVL830
 17032 2adb 3E000000 		.4byte	.LFE37
 17033 2adf 0400     		.2byte	0x4
 17034 2ae1 F3       		.byte	0xf3
 17035 2ae2 01       		.uleb128 0x1
 17036 2ae3 51       		.byte	0x51
 17037 2ae4 9F       		.byte	0x9f
 17038 2ae5 00000000 		.4byte	0
 17039 2ae9 00000000 		.4byte	0
 17040              	.LLST174:
 17041 2aed 14000000 		.4byte	.LVL821
 17042 2af1 1C000000 		.4byte	.LVL822
 17043 2af5 0100     		.2byte	0x1
 17044 2af7 50       		.byte	0x50
 17045 2af8 1C000000 		.4byte	.LVL822
 17046 2afc 24000000 		.4byte	.LVL824
 17047 2b00 0100     		.2byte	0x1
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 370


 17048 2b02 54       		.byte	0x54
 17049 2b03 24000000 		.4byte	.LVL824
 17050 2b07 2E000000 		.4byte	.LVL825
 17051 2b0b 0100     		.2byte	0x1
 17052 2b0d 50       		.byte	0x50
 17053 2b0e 2E000000 		.4byte	.LVL825
 17054 2b12 36000000 		.4byte	.LVL827
 17055 2b16 0100     		.2byte	0x1
 17056 2b18 54       		.byte	0x54
 17057 2b19 36000000 		.4byte	.LVL827
 17058 2b1d 38000000 		.4byte	.LVL828
 17059 2b21 0100     		.2byte	0x1
 17060 2b23 50       		.byte	0x50
 17061 2b24 38000000 		.4byte	.LVL828
 17062 2b28 3C000000 		.4byte	.LVL829
 17063 2b2c 0100     		.2byte	0x1
 17064 2b2e 54       		.byte	0x54
 17065 2b2f 3C000000 		.4byte	.LVL829
 17066 2b33 3E000000 		.4byte	.LFE37
 17067 2b37 0100     		.2byte	0x1
 17068 2b39 50       		.byte	0x50
 17069 2b3a 00000000 		.4byte	0
 17070 2b3e 00000000 		.4byte	0
 17071              	.LLST175:
 17072 2b42 00000000 		.4byte	.LVL831
 17073 2b46 16000000 		.4byte	.LVL832
 17074 2b4a 0100     		.2byte	0x1
 17075 2b4c 50       		.byte	0x50
 17076 2b4d 16000000 		.4byte	.LVL832
 17077 2b51 1D000000 		.4byte	.LVL835-1
 17078 2b55 0200     		.2byte	0x2
 17079 2b57 70       		.byte	0x70
 17080 2b58 00       		.sleb128 0
 17081 2b59 1D000000 		.4byte	.LVL835-1
 17082 2b5d 00010000 		.4byte	.LFE38
 17083 2b61 0200     		.2byte	0x2
 17084 2b63 91       		.byte	0x91
 17085 2b64 54       		.sleb128 -44
 17086 2b65 00000000 		.4byte	0
 17087 2b69 00000000 		.4byte	0
 17088              	.LLST176:
 17089 2b6d 00000000 		.4byte	.LVL831
 17090 2b71 18000000 		.4byte	.LVL833
 17091 2b75 0100     		.2byte	0x1
 17092 2b77 51       		.byte	0x51
 17093 2b78 18000000 		.4byte	.LVL833
 17094 2b7c F4000000 		.4byte	.LVL876
 17095 2b80 0100     		.2byte	0x1
 17096 2b82 5A       		.byte	0x5a
 17097 2b83 F4000000 		.4byte	.LVL876
 17098 2b87 00010000 		.4byte	.LFE38
 17099 2b8b 0400     		.2byte	0x4
 17100 2b8d F3       		.byte	0xf3
 17101 2b8e 01       		.uleb128 0x1
 17102 2b8f 51       		.byte	0x51
 17103 2b90 9F       		.byte	0x9f
 17104 2b91 00000000 		.4byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 371


 17105 2b95 00000000 		.4byte	0
 17106              	.LLST177:
 17107 2b99 00000000 		.4byte	.LVL831
 17108 2b9d 1A000000 		.4byte	.LVL834
 17109 2ba1 0100     		.2byte	0x1
 17110 2ba3 52       		.byte	0x52
 17111 2ba4 1A000000 		.4byte	.LVL834
 17112 2ba8 1D000000 		.4byte	.LVL835-1
 17113 2bac 0100     		.2byte	0x1
 17114 2bae 51       		.byte	0x51
 17115 2baf 1D000000 		.4byte	.LVL835-1
 17116 2bb3 F4000000 		.4byte	.LVL874
 17117 2bb7 0100     		.2byte	0x1
 17118 2bb9 55       		.byte	0x55
 17119 2bba F4000000 		.4byte	.LVL874
 17120 2bbe 00010000 		.4byte	.LFE38
 17121 2bc2 0400     		.2byte	0x4
 17122 2bc4 F3       		.byte	0xf3
 17123 2bc5 01       		.uleb128 0x1
 17124 2bc6 52       		.byte	0x52
 17125 2bc7 9F       		.byte	0x9f
 17126 2bc8 00000000 		.4byte	0
 17127 2bcc 00000000 		.4byte	0
 17128              	.LLST178:
 17129 2bd0 20000000 		.4byte	.LVL836
 17130 2bd4 30000000 		.4byte	.LVL837
 17131 2bd8 0100     		.2byte	0x1
 17132 2bda 50       		.byte	0x50
 17133 2bdb 30000000 		.4byte	.LVL837
 17134 2bdf 34000000 		.4byte	.LVL838
 17135 2be3 0100     		.2byte	0x1
 17136 2be5 57       		.byte	0x57
 17137 2be6 34000000 		.4byte	.LVL838
 17138 2bea 40000000 		.4byte	.LVL840
 17139 2bee 0100     		.2byte	0x1
 17140 2bf0 50       		.byte	0x50
 17141 2bf1 40000000 		.4byte	.LVL840
 17142 2bf5 62000000 		.4byte	.LVL844
 17143 2bf9 0100     		.2byte	0x1
 17144 2bfb 57       		.byte	0x57
 17145 2bfc 62000000 		.4byte	.LVL844
 17146 2c00 6E000000 		.4byte	.LVL848
 17147 2c04 0100     		.2byte	0x1
 17148 2c06 50       		.byte	0x50
 17149 2c07 6E000000 		.4byte	.LVL848
 17150 2c0b 88000000 		.4byte	.LVL853
 17151 2c0f 0100     		.2byte	0x1
 17152 2c11 57       		.byte	0x57
 17153 2c12 88000000 		.4byte	.LVL853
 17154 2c16 94000000 		.4byte	.LVL855
 17155 2c1a 0100     		.2byte	0x1
 17156 2c1c 50       		.byte	0x50
 17157 2c1d 94000000 		.4byte	.LVL855
 17158 2c21 D8000000 		.4byte	.LVL868
 17159 2c25 0100     		.2byte	0x1
 17160 2c27 57       		.byte	0x57
 17161 2c28 DA000000 		.4byte	.LVL869
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 372


 17162 2c2c F4000000 		.4byte	.LVL875
 17163 2c30 0100     		.2byte	0x1
 17164 2c32 57       		.byte	0x57
 17165 2c33 F4000000 		.4byte	.LVL875
 17166 2c37 00010000 		.4byte	.LFE38
 17167 2c3b 0100     		.2byte	0x1
 17168 2c3d 50       		.byte	0x50
 17169 2c3e 00000000 		.4byte	0
 17170 2c42 00000000 		.4byte	0
 17171              	.LLST179:
 17172 2c46 38000000 		.4byte	.LVL839
 17173 2c4a 40000000 		.4byte	.LVL840
 17174 2c4e 0200     		.2byte	0x2
 17175 2c50 30       		.byte	0x30
 17176 2c51 9F       		.byte	0x9f
 17177 2c52 40000000 		.4byte	.LVL840
 17178 2c56 62000000 		.4byte	.LVL844
 17179 2c5a 0100     		.2byte	0x1
 17180 2c5c 56       		.byte	0x56
 17181 2c5d 62000000 		.4byte	.LVL844
 17182 2c61 72000000 		.4byte	.LVL849
 17183 2c65 0200     		.2byte	0x2
 17184 2c67 30       		.byte	0x30
 17185 2c68 9F       		.byte	0x9f
 17186 2c69 72000000 		.4byte	.LVL849
 17187 2c6d F0000000 		.4byte	.LVL873
 17188 2c71 0100     		.2byte	0x1
 17189 2c73 56       		.byte	0x56
 17190 2c74 00000000 		.4byte	0
 17191 2c78 00000000 		.4byte	0
 17192              	.LLST180:
 17193 2c7c 40000000 		.4byte	.LVL840
 17194 2c80 F0000000 		.4byte	.LVL873
 17195 2c84 0100     		.2byte	0x1
 17196 2c86 54       		.byte	0x54
 17197 2c87 00000000 		.4byte	0
 17198 2c8b 00000000 		.4byte	0
 17199              	.LLST181:
 17200 2c8f 66000000 		.4byte	.LVL846
 17201 2c93 68000000 		.4byte	.LVL847
 17202 2c97 0100     		.2byte	0x1
 17203 2c99 53       		.byte	0x53
 17204 2c9a 68000000 		.4byte	.LVL847
 17205 2c9e 7E000000 		.4byte	.LVL851
 17206 2ca2 0200     		.2byte	0x2
 17207 2ca4 7D       		.byte	0x7d
 17208 2ca5 00       		.sleb128 0
 17209 2ca6 7E000000 		.4byte	.LVL851
 17210 2caa 94000000 		.4byte	.LVL855
 17211 2cae 0100     		.2byte	0x1
 17212 2cb0 59       		.byte	0x59
 17213 2cb1 94000000 		.4byte	.LVL855
 17214 2cb5 D6000000 		.4byte	.LVL867
 17215 2cb9 0200     		.2byte	0x2
 17216 2cbb 7D       		.byte	0x7d
 17217 2cbc 00       		.sleb128 0
 17218 2cbd 00000000 		.4byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 373


 17219 2cc1 00000000 		.4byte	0
 17220              	.LLST182:
 17221 2cc5 48000000 		.4byte	.LVL841
 17222 2cc9 62000000 		.4byte	.LVL844
 17223 2ccd 0100     		.2byte	0x1
 17224 2ccf 50       		.byte	0x50
 17225 2cd0 D6000000 		.4byte	.LVL867
 17226 2cd4 DC000000 		.4byte	.LVL870
 17227 2cd8 0100     		.2byte	0x1
 17228 2cda 50       		.byte	0x50
 17229 2cdb 00000000 		.4byte	0
 17230 2cdf 00000000 		.4byte	0
 17231              	.LLST183:
 17232 2ce3 66000000 		.4byte	.LVL846
 17233 2ce7 72000000 		.4byte	.LVL849
 17234 2ceb 0200     		.2byte	0x2
 17235 2ced 30       		.byte	0x30
 17236 2cee 9F       		.byte	0x9f
 17237 2cef 72000000 		.4byte	.LVL849
 17238 2cf3 85000000 		.4byte	.LVL852-1
 17239 2cf7 0100     		.2byte	0x1
 17240 2cf9 52       		.byte	0x52
 17241 2cfa 8E000000 		.4byte	.LVL854
 17242 2cfe 94000000 		.4byte	.LVL855
 17243 2d02 0400     		.2byte	0x4
 17244 2d04 0A       		.byte	0xa
 17245 2d05 0002     		.2byte	0x200
 17246 2d07 9F       		.byte	0x9f
 17247 2d08 94000000 		.4byte	.LVL855
 17248 2d0c D6000000 		.4byte	.LVL867
 17249 2d10 0100     		.2byte	0x1
 17250 2d12 52       		.byte	0x52
 17251 2d13 00000000 		.4byte	0
 17252 2d17 00000000 		.4byte	0
 17253              	.LLST184:
 17254 2d1b 38000000 		.4byte	.LVL839
 17255 2d1f 40000000 		.4byte	.LVL840
 17256 2d23 0200     		.2byte	0x2
 17257 2d25 73       		.byte	0x73
 17258 2d26 00       		.sleb128 0
 17259 2d27 40000000 		.4byte	.LVL840
 17260 2d2b 62000000 		.4byte	.LVL844
 17261 2d2f 0100     		.2byte	0x1
 17262 2d31 58       		.byte	0x58
 17263 2d32 62000000 		.4byte	.LVL844
 17264 2d36 64000000 		.4byte	.LVL845
 17265 2d3a 0200     		.2byte	0x2
 17266 2d3c 73       		.byte	0x73
 17267 2d3d 00       		.sleb128 0
 17268 2d3e 64000000 		.4byte	.LVL845
 17269 2d42 72000000 		.4byte	.LVL849
 17270 2d46 0300     		.2byte	0x3
 17271 2d48 75       		.byte	0x75
 17272 2d49 00       		.sleb128 0
 17273 2d4a 06       		.byte	0x6
 17274 2d4b 72000000 		.4byte	.LVL849
 17275 2d4f 9A000000 		.4byte	.LVL856
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 374


 17276 2d53 0100     		.2byte	0x1
 17277 2d55 58       		.byte	0x58
 17278 2d56 9A000000 		.4byte	.LVL856
 17279 2d5a 9C000000 		.4byte	.LVL857
 17280 2d5e 0100     		.2byte	0x1
 17281 2d60 50       		.byte	0x50
 17282 2d61 9C000000 		.4byte	.LVL857
 17283 2d65 AC000000 		.4byte	.LVL861
 17284 2d69 0100     		.2byte	0x1
 17285 2d6b 58       		.byte	0x58
 17286 2d6c AC000000 		.4byte	.LVL861
 17287 2d70 AE000000 		.4byte	.LVL862
 17288 2d74 0100     		.2byte	0x1
 17289 2d76 50       		.byte	0x50
 17290 2d77 AE000000 		.4byte	.LVL862
 17291 2d7b E6000000 		.4byte	.LVL871
 17292 2d7f 0100     		.2byte	0x1
 17293 2d81 58       		.byte	0x58
 17294 2d82 E6000000 		.4byte	.LVL871
 17295 2d86 EA000000 		.4byte	.LVL872
 17296 2d8a 0100     		.2byte	0x1
 17297 2d8c 52       		.byte	0x52
 17298 2d8d EA000000 		.4byte	.LVL872
 17299 2d91 F0000000 		.4byte	.LVL873
 17300 2d95 0100     		.2byte	0x1
 17301 2d97 58       		.byte	0x58
 17302 2d98 00000000 		.4byte	0
 17303 2d9c 00000000 		.4byte	0
 17304              	.LLST185:
 17305 2da0 66000000 		.4byte	.LVL846
 17306 2da4 72000000 		.4byte	.LVL849
 17307 2da8 0200     		.2byte	0x2
 17308 2daa 30       		.byte	0x30
 17309 2dab 9F       		.byte	0x9f
 17310 2dac 72000000 		.4byte	.LVL849
 17311 2db0 78000000 		.4byte	.LVL850
 17312 2db4 0100     		.2byte	0x1
 17313 2db6 53       		.byte	0x53
 17314 2db7 8E000000 		.4byte	.LVL854
 17315 2dbb D6000000 		.4byte	.LVL867
 17316 2dbf 0100     		.2byte	0x1
 17317 2dc1 53       		.byte	0x53
 17318 2dc2 00000000 		.4byte	0
 17319 2dc6 00000000 		.4byte	0
 17320              	.LLST186:
 17321 2dca 00000000 		.4byte	.LVL877
 17322 2dce 08000000 		.4byte	.LVL878
 17323 2dd2 0100     		.2byte	0x1
 17324 2dd4 50       		.byte	0x50
 17325 2dd5 08000000 		.4byte	.LVL878
 17326 2dd9 96000000 		.4byte	.LVL896
 17327 2ddd 0100     		.2byte	0x1
 17328 2ddf 54       		.byte	0x54
 17329 2de0 96000000 		.4byte	.LVL896
 17330 2de4 9C000000 		.4byte	.LFE39
 17331 2de8 0400     		.2byte	0x4
 17332 2dea F3       		.byte	0xf3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 375


 17333 2deb 01       		.uleb128 0x1
 17334 2dec 50       		.byte	0x50
 17335 2ded 9F       		.byte	0x9f
 17336 2dee 00000000 		.4byte	0
 17337 2df2 00000000 		.4byte	0
 17338              	.LLST187:
 17339 2df6 0E000000 		.4byte	.LVL880
 17340 2dfa 24000000 		.4byte	.LVL881
 17341 2dfe 0100     		.2byte	0x1
 17342 2e00 50       		.byte	0x50
 17343 2e01 24000000 		.4byte	.LVL881
 17344 2e05 48000000 		.4byte	.LVL883
 17345 2e09 0100     		.2byte	0x1
 17346 2e0b 55       		.byte	0x55
 17347 2e0c 48000000 		.4byte	.LVL883
 17348 2e10 4E000000 		.4byte	.LVL884
 17349 2e14 0100     		.2byte	0x1
 17350 2e16 50       		.byte	0x50
 17351 2e17 4E000000 		.4byte	.LVL884
 17352 2e1b 58000000 		.4byte	.LVL886
 17353 2e1f 0100     		.2byte	0x1
 17354 2e21 55       		.byte	0x55
 17355 2e22 58000000 		.4byte	.LVL886
 17356 2e26 5E000000 		.4byte	.LVL887
 17357 2e2a 0200     		.2byte	0x2
 17358 2e2c 30       		.byte	0x30
 17359 2e2d 9F       		.byte	0x9f
 17360 2e2e 5E000000 		.4byte	.LVL887
 17361 2e32 7A000000 		.4byte	.LVL891
 17362 2e36 0100     		.2byte	0x1
 17363 2e38 55       		.byte	0x55
 17364 2e39 7A000000 		.4byte	.LVL891
 17365 2e3d 7E000000 		.4byte	.LVL892
 17366 2e41 0100     		.2byte	0x1
 17367 2e43 50       		.byte	0x50
 17368 2e44 7E000000 		.4byte	.LVL892
 17369 2e48 96000000 		.4byte	.LVL897
 17370 2e4c 0100     		.2byte	0x1
 17371 2e4e 55       		.byte	0x55
 17372 2e4f 96000000 		.4byte	.LVL897
 17373 2e53 9C000000 		.4byte	.LFE39
 17374 2e57 0100     		.2byte	0x1
 17375 2e59 50       		.byte	0x50
 17376 2e5a 00000000 		.4byte	0
 17377 2e5e 00000000 		.4byte	0
 17378              	.LLST188:
 17379 2e62 58000000 		.4byte	.LVL886
 17380 2e66 6A000000 		.4byte	.LVL889
 17381 2e6a 0100     		.2byte	0x1
 17382 2e6c 50       		.byte	0x50
 17383 2e6d 6A000000 		.4byte	.LVL889
 17384 2e71 86000000 		.4byte	.LVL894
 17385 2e75 0100     		.2byte	0x1
 17386 2e77 56       		.byte	0x56
 17387 2e78 00000000 		.4byte	0
 17388 2e7c 00000000 		.4byte	0
 17389              	.LLST189:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 376


 17390 2e80 00000000 		.4byte	.LVL898
 17391 2e84 08000000 		.4byte	.LVL899
 17392 2e88 0100     		.2byte	0x1
 17393 2e8a 50       		.byte	0x50
 17394 2e8b 08000000 		.4byte	.LVL899
 17395 2e8f 0F000000 		.4byte	.LVL900-1
 17396 2e93 0200     		.2byte	0x2
 17397 2e95 70       		.byte	0x70
 17398 2e96 00       		.sleb128 0
 17399 2e97 0F000000 		.4byte	.LVL900-1
 17400 2e9b C6000000 		.4byte	.LFE40
 17401 2e9f 0300     		.2byte	0x3
 17402 2ea1 91       		.byte	0x91
 17403 2ea2 A47F     		.sleb128 -92
 17404 2ea4 00000000 		.4byte	0
 17405 2ea8 00000000 		.4byte	0
 17406              	.LLST190:
 17407 2eac 12000000 		.4byte	.LVL901
 17408 2eb0 1A000000 		.4byte	.LVL902
 17409 2eb4 0100     		.2byte	0x1
 17410 2eb6 50       		.byte	0x50
 17411 2eb7 1A000000 		.4byte	.LVL902
 17412 2ebb 22000000 		.4byte	.LVL904
 17413 2ebf 0100     		.2byte	0x1
 17414 2ec1 54       		.byte	0x54
 17415 2ec2 22000000 		.4byte	.LVL904
 17416 2ec6 26000000 		.4byte	.LVL905
 17417 2eca 0100     		.2byte	0x1
 17418 2ecc 50       		.byte	0x50
 17419 2ecd 26000000 		.4byte	.LVL905
 17420 2ed1 42000000 		.4byte	.LVL909
 17421 2ed5 0100     		.2byte	0x1
 17422 2ed7 54       		.byte	0x54
 17423 2ed8 44000000 		.4byte	.LVL910
 17424 2edc 80000000 		.4byte	.LVL916
 17425 2ee0 0100     		.2byte	0x1
 17426 2ee2 54       		.byte	0x54
 17427 2ee3 80000000 		.4byte	.LVL916
 17428 2ee7 84000000 		.4byte	.LVL917
 17429 2eeb 0100     		.2byte	0x1
 17430 2eed 50       		.byte	0x50
 17431 2eee 84000000 		.4byte	.LVL917
 17432 2ef2 88000000 		.4byte	.LVL918
 17433 2ef6 0100     		.2byte	0x1
 17434 2ef8 54       		.byte	0x54
 17435 2ef9 88000000 		.4byte	.LVL918
 17436 2efd 96000000 		.4byte	.LVL920
 17437 2f01 0100     		.2byte	0x1
 17438 2f03 50       		.byte	0x50
 17439 2f04 96000000 		.4byte	.LVL920
 17440 2f08 A4000000 		.4byte	.LVL923
 17441 2f0c 0100     		.2byte	0x1
 17442 2f0e 54       		.byte	0x54
 17443 2f0f A4000000 		.4byte	.LVL923
 17444 2f13 AC000000 		.4byte	.LVL924
 17445 2f17 0100     		.2byte	0x1
 17446 2f19 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 377


 17447 2f1a AC000000 		.4byte	.LVL924
 17448 2f1e C4000000 		.4byte	.LVL929
 17449 2f22 0100     		.2byte	0x1
 17450 2f24 54       		.byte	0x54
 17451 2f25 C4000000 		.4byte	.LVL929
 17452 2f29 C6000000 		.4byte	.LFE40
 17453 2f2d 0100     		.2byte	0x1
 17454 2f2f 50       		.byte	0x50
 17455 2f30 00000000 		.4byte	0
 17456 2f34 00000000 		.4byte	0
 17457              	.LLST191:
 17458 2f38 34000000 		.4byte	.LVL908
 17459 2f3c 62000000 		.4byte	.LVL913
 17460 2f40 0100     		.2byte	0x1
 17461 2f42 53       		.byte	0x53
 17462 2f43 62000000 		.4byte	.LVL913
 17463 2f47 73000000 		.4byte	.LVL914-1
 17464 2f4b 0200     		.2byte	0x2
 17465 2f4d 91       		.byte	0x91
 17466 2f4e 68       		.sleb128 -24
 17467 2f4f 96000000 		.4byte	.LVL920
 17468 2f53 98000000 		.4byte	.LVL921
 17469 2f57 0200     		.2byte	0x2
 17470 2f59 91       		.byte	0x91
 17471 2f5a 68       		.sleb128 -24
 17472 2f5b 00000000 		.4byte	0
 17473 2f5f 00000000 		.4byte	0
 17474              	.LLST192:
 17475 2f63 5C000000 		.4byte	.LVL912
 17476 2f67 C0000000 		.4byte	.LVL928
 17477 2f6b 0100     		.2byte	0x1
 17478 2f6d 55       		.byte	0x55
 17479 2f6e 00000000 		.4byte	0
 17480 2f72 00000000 		.4byte	0
 17481              	.LLST193:
 17482 2f76 00000000 		.4byte	.LVL930
 17483 2f7a 13000000 		.4byte	.LVL931-1
 17484 2f7e 0100     		.2byte	0x1
 17485 2f80 50       		.byte	0x50
 17486 2f81 13000000 		.4byte	.LVL931-1
 17487 2f85 18000000 		.4byte	.LVL933
 17488 2f89 0300     		.2byte	0x3
 17489 2f8b 91       		.byte	0x91
 17490 2f8c AC7F     		.sleb128 -84
 17491 2f8e 18000000 		.4byte	.LVL933
 17492 2f92 1F000000 		.4byte	.LVL934-1
 17493 2f96 0200     		.2byte	0x2
 17494 2f98 70       		.byte	0x70
 17495 2f99 00       		.sleb128 0
 17496 2f9a 1F000000 		.4byte	.LVL934-1
 17497 2f9e A6010000 		.4byte	.LFE41
 17498 2fa2 0300     		.2byte	0x3
 17499 2fa4 91       		.byte	0x91
 17500 2fa5 AC7F     		.sleb128 -84
 17501 2fa7 00000000 		.4byte	0
 17502 2fab 00000000 		.4byte	0
 17503              	.LLST194:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 378


 17504 2faf 22000000 		.4byte	.LVL935
 17505 2fb3 2C000000 		.4byte	.LVL936
 17506 2fb7 0100     		.2byte	0x1
 17507 2fb9 50       		.byte	0x50
 17508 2fba 2C000000 		.4byte	.LVL936
 17509 2fbe 32000000 		.4byte	.LVL937
 17510 2fc2 0100     		.2byte	0x1
 17511 2fc4 54       		.byte	0x54
 17512 2fc5 32000000 		.4byte	.LVL937
 17513 2fc9 40000000 		.4byte	.LVL939
 17514 2fcd 0100     		.2byte	0x1
 17515 2fcf 50       		.byte	0x50
 17516 2fd0 48000000 		.4byte	.LVL941
 17517 2fd4 4E000000 		.4byte	.LVL942
 17518 2fd8 0200     		.2byte	0x2
 17519 2fda 30       		.byte	0x30
 17520 2fdb 9F       		.byte	0x9f
 17521 2fdc 4E000000 		.4byte	.LVL942
 17522 2fe0 2E010000 		.4byte	.LVL964
 17523 2fe4 0100     		.2byte	0x1
 17524 2fe6 54       		.byte	0x54
 17525 2fe7 2E010000 		.4byte	.LVL964
 17526 2feb 32010000 		.4byte	.LVL965
 17527 2fef 0100     		.2byte	0x1
 17528 2ff1 50       		.byte	0x50
 17529 2ff2 32010000 		.4byte	.LVL965
 17530 2ff6 92010000 		.4byte	.LVL978
 17531 2ffa 0100     		.2byte	0x1
 17532 2ffc 54       		.byte	0x54
 17533 2ffd 92010000 		.4byte	.LVL978
 17534 3001 96010000 		.4byte	.LVL980
 17535 3005 0100     		.2byte	0x1
 17536 3007 50       		.byte	0x50
 17537 3008 96010000 		.4byte	.LVL980
 17538 300c 9A010000 		.4byte	.LVL981
 17539 3010 0100     		.2byte	0x1
 17540 3012 54       		.byte	0x54
 17541 3013 9A010000 		.4byte	.LVL981
 17542 3017 A6010000 		.4byte	.LFE41
 17543 301b 0100     		.2byte	0x1
 17544 301d 50       		.byte	0x50
 17545 301e 00000000 		.4byte	0
 17546 3022 00000000 		.4byte	0
 17547              	.LLST195:
 17548 3026 82000000 		.4byte	.LVL951
 17549 302a 8D000000 		.4byte	.LVL953-1
 17550 302e 0100     		.2byte	0x1
 17551 3030 53       		.byte	0x53
 17552 3031 8D000000 		.4byte	.LVL953-1
 17553 3035 46010000 		.4byte	.LVL970
 17554 3039 0100     		.2byte	0x1
 17555 303b 5A       		.byte	0x5a
 17556 303c 62010000 		.4byte	.LVL974
 17557 3040 8A010000 		.4byte	.LVL976
 17558 3044 0100     		.2byte	0x1
 17559 3046 53       		.byte	0x53
 17560 3047 00000000 		.4byte	0
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 379


 17561 304b 00000000 		.4byte	0
 17562              	.LLST196:
 17563 304f 14010000 		.4byte	.LVL959
 17564 3053 16010000 		.4byte	.LVL960
 17565 3057 0200     		.2byte	0x2
 17566 3059 72       		.byte	0x72
 17567 305a 02       		.sleb128 2
 17568 305b 16010000 		.4byte	.LVL960
 17569 305f 1A010000 		.4byte	.LVL961
 17570 3063 0600     		.2byte	0x6
 17571 3065 91       		.byte	0x91
 17572 3066 BC7F     		.sleb128 -68
 17573 3068 06       		.byte	0x6
 17574 3069 23       		.byte	0x23
 17575 306a 02       		.uleb128 0x2
 17576 306b 1A010000 		.4byte	.LVL961
 17577 306f 3E010000 		.4byte	.LVL967
 17578 3073 0100     		.2byte	0x1
 17579 3075 56       		.byte	0x56
 17580 3076 3E010000 		.4byte	.LVL967
 17581 307a 40010000 		.4byte	.LVL968
 17582 307e 0300     		.2byte	0x3
 17583 3080 76       		.byte	0x76
 17584 3081 01       		.sleb128 1
 17585 3082 9F       		.byte	0x9f
 17586 3083 40010000 		.4byte	.LVL968
 17587 3087 46010000 		.4byte	.LVL970
 17588 308b 0100     		.2byte	0x1
 17589 308d 56       		.byte	0x56
 17590 308e 00000000 		.4byte	0
 17591 3092 00000000 		.4byte	0
 17592              	.LLST197:
 17593 3096 7C000000 		.4byte	.LVL950
 17594 309a 84000000 		.4byte	.LVL952
 17595 309e 0100     		.2byte	0x1
 17596 30a0 50       		.byte	0x50
 17597 30a1 84000000 		.4byte	.LVL952
 17598 30a5 20010000 		.4byte	.LVL962
 17599 30a9 0100     		.2byte	0x1
 17600 30ab 57       		.byte	0x57
 17601 30ac 20010000 		.4byte	.LVL962
 17602 30b0 2B010000 		.4byte	.LVL963-1
 17603 30b4 0100     		.2byte	0x1
 17604 30b6 53       		.byte	0x53
 17605 30b7 2B010000 		.4byte	.LVL963-1
 17606 30bb 42010000 		.4byte	.LVL969
 17607 30bf 0100     		.2byte	0x1
 17608 30c1 59       		.byte	0x59
 17609 30c2 42010000 		.4byte	.LVL969
 17610 30c6 46010000 		.4byte	.LVL970
 17611 30ca 0100     		.2byte	0x1
 17612 30cc 57       		.byte	0x57
 17613 30cd 00000000 		.4byte	0
 17614 30d1 00000000 		.4byte	0
 17615              	.LLST198:
 17616 30d5 48000000 		.4byte	.LVL941
 17617 30d9 64000000 		.4byte	.LVL945
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 380


 17618 30dd 0100     		.2byte	0x1
 17619 30df 50       		.byte	0x50
 17620 30e0 64000000 		.4byte	.LVL945
 17621 30e4 66000000 		.4byte	.LVL946
 17622 30e8 0100     		.2byte	0x1
 17623 30ea 51       		.byte	0x51
 17624 30eb 66000000 		.4byte	.LVL946
 17625 30ef 94010000 		.4byte	.LVL979
 17626 30f3 0100     		.2byte	0x1
 17627 30f5 58       		.byte	0x58
 17628 30f6 00000000 		.4byte	0
 17629 30fa 00000000 		.4byte	0
 17630              	.LLST199:
 17631 30fe EC000000 		.4byte	.LVL956
 17632 3102 08010000 		.4byte	.LVL958
 17633 3106 0100     		.2byte	0x1
 17634 3108 53       		.byte	0x53
 17635 3109 00000000 		.4byte	0
 17636 310d 00000000 		.4byte	0
 17637              	.LLST200:
 17638 3111 16000000 		.4byte	.LVL932
 17639 3115 18000000 		.4byte	.LVL933
 17640 3119 0100     		.2byte	0x1
 17641 311b 50       		.byte	0x50
 17642 311c 18000000 		.4byte	.LVL933
 17643 3120 72010000 		.4byte	.LVL975
 17644 3124 0100     		.2byte	0x1
 17645 3126 55       		.byte	0x55
 17646 3127 94010000 		.4byte	.LVL979
 17647 312b 96010000 		.4byte	.LVL980
 17648 312f 0100     		.2byte	0x1
 17649 3131 55       		.byte	0x55
 17650 3132 00000000 		.4byte	0
 17651 3136 00000000 		.4byte	0
 17652              	.LLST201:
 17653 313a 00000000 		.4byte	.LVL982
 17654 313e 0C000000 		.4byte	.LVL983
 17655 3142 0100     		.2byte	0x1
 17656 3144 50       		.byte	0x50
 17657 3145 0C000000 		.4byte	.LVL983
 17658 3149 13000000 		.4byte	.LVL986-1
 17659 314d 0200     		.2byte	0x2
 17660 314f 70       		.byte	0x70
 17661 3150 00       		.sleb128 0
 17662 3151 13000000 		.4byte	.LVL986-1
 17663 3155 4E000000 		.4byte	.LFE42
 17664 3159 0200     		.2byte	0x2
 17665 315b 91       		.byte	0x91
 17666 315c 44       		.sleb128 -60
 17667 315d 00000000 		.4byte	0
 17668 3161 00000000 		.4byte	0
 17669              	.LLST202:
 17670 3165 00000000 		.4byte	.LVL982
 17671 3169 0E000000 		.4byte	.LVL984
 17672 316d 0100     		.2byte	0x1
 17673 316f 51       		.byte	0x51
 17674 3170 0E000000 		.4byte	.LVL984
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 381


 17675 3174 4E000000 		.4byte	.LFE42
 17676 3178 0400     		.2byte	0x4
 17677 317a F3       		.byte	0xf3
 17678 317b 01       		.uleb128 0x1
 17679 317c 51       		.byte	0x51
 17680 317d 9F       		.byte	0x9f
 17681 317e 00000000 		.4byte	0
 17682 3182 00000000 		.4byte	0
 17683              	.LLST203:
 17684 3186 00000000 		.4byte	.LVL982
 17685 318a 10000000 		.4byte	.LVL985
 17686 318e 0100     		.2byte	0x1
 17687 3190 52       		.byte	0x52
 17688 3191 10000000 		.4byte	.LVL985
 17689 3195 32000000 		.4byte	.LVL990
 17690 3199 0400     		.2byte	0x4
 17691 319b F3       		.byte	0xf3
 17692 319c 01       		.uleb128 0x1
 17693 319d 52       		.byte	0x52
 17694 319e 9F       		.byte	0x9f
 17695 319f 32000000 		.4byte	.LVL990
 17696 31a3 48000000 		.4byte	.LVL994
 17697 31a7 0100     		.2byte	0x1
 17698 31a9 55       		.byte	0x55
 17699 31aa 48000000 		.4byte	.LVL994
 17700 31ae 4A000000 		.4byte	.LVL995
 17701 31b2 0400     		.2byte	0x4
 17702 31b4 F3       		.byte	0xf3
 17703 31b5 01       		.uleb128 0x1
 17704 31b6 52       		.byte	0x52
 17705 31b7 9F       		.byte	0x9f
 17706 31b8 00000000 		.4byte	0
 17707 31bc 00000000 		.4byte	0
 17708              	.LLST204:
 17709 31c0 14000000 		.4byte	.LVL986
 17710 31c4 1E000000 		.4byte	.LVL987
 17711 31c8 0100     		.2byte	0x1
 17712 31ca 50       		.byte	0x50
 17713 31cb 24000000 		.4byte	.LVL988
 17714 31cf 3E000000 		.4byte	.LVL991
 17715 31d3 0100     		.2byte	0x1
 17716 31d5 50       		.byte	0x50
 17717 31d6 46000000 		.4byte	.LVL993
 17718 31da 4E000000 		.4byte	.LFE42
 17719 31de 0100     		.2byte	0x1
 17720 31e0 50       		.byte	0x50
 17721 31e1 00000000 		.4byte	0
 17722 31e5 00000000 		.4byte	0
 17723              	.LLST205:
 17724 31e9 2A000000 		.4byte	.LVL989
 17725 31ed 40000000 		.4byte	.LVL992
 17726 31f1 0100     		.2byte	0x1
 17727 31f3 53       		.byte	0x53
 17728 31f4 48000000 		.4byte	.LVL994
 17729 31f8 4A000000 		.4byte	.LVL995
 17730 31fc 0100     		.2byte	0x1
 17731 31fe 53       		.byte	0x53
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 382


 17732 31ff 00000000 		.4byte	0
 17733 3203 00000000 		.4byte	0
 17734              	.LLST206:
 17735 3207 00000000 		.4byte	.LVL996
 17736 320b 0A000000 		.4byte	.LVL997
 17737 320f 0100     		.2byte	0x1
 17738 3211 50       		.byte	0x50
 17739 3212 0A000000 		.4byte	.LVL997
 17740 3216 11000000 		.4byte	.LVL999-1
 17741 321a 0200     		.2byte	0x2
 17742 321c 70       		.byte	0x70
 17743 321d 00       		.sleb128 0
 17744 321e 11000000 		.4byte	.LVL999-1
 17745 3222 52000000 		.4byte	.LFE43
 17746 3226 0200     		.2byte	0x2
 17747 3228 91       		.byte	0x91
 17748 3229 4C       		.sleb128 -52
 17749 322a 00000000 		.4byte	0
 17750 322e 00000000 		.4byte	0
 17751              	.LLST207:
 17752 3232 00000000 		.4byte	.LVL996
 17753 3236 0C000000 		.4byte	.LVL998
 17754 323a 0100     		.2byte	0x1
 17755 323c 51       		.byte	0x51
 17756 323d 0C000000 		.4byte	.LVL998
 17757 3241 50000000 		.4byte	.LVL1008
 17758 3245 0100     		.2byte	0x1
 17759 3247 54       		.byte	0x54
 17760 3248 50000000 		.4byte	.LVL1008
 17761 324c 52000000 		.4byte	.LFE43
 17762 3250 0400     		.2byte	0x4
 17763 3252 F3       		.byte	0xf3
 17764 3253 01       		.uleb128 0x1
 17765 3254 51       		.byte	0x51
 17766 3255 9F       		.byte	0x9f
 17767 3256 00000000 		.4byte	0
 17768 325a 00000000 		.4byte	0
 17769              	.LLST208:
 17770 325e 12000000 		.4byte	.LVL999
 17771 3262 1C000000 		.4byte	.LVL1000
 17772 3266 0100     		.2byte	0x1
 17773 3268 50       		.byte	0x50
 17774 3269 22000000 		.4byte	.LVL1001
 17775 326d 42000000 		.4byte	.LVL1003
 17776 3271 0100     		.2byte	0x1
 17777 3273 50       		.byte	0x50
 17778 3274 4A000000 		.4byte	.LVL1005
 17779 3278 52000000 		.4byte	.LFE43
 17780 327c 0100     		.2byte	0x1
 17781 327e 50       		.byte	0x50
 17782 327f 00000000 		.4byte	0
 17783 3283 00000000 		.4byte	0
 17784              	.LLST209:
 17785 3287 28000000 		.4byte	.LVL1002
 17786 328b 44000000 		.4byte	.LVL1004
 17787 328f 0100     		.2byte	0x1
 17788 3291 53       		.byte	0x53
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 383


 17789 3292 4C000000 		.4byte	.LVL1006
 17790 3296 4E000000 		.4byte	.LVL1007
 17791 329a 0100     		.2byte	0x1
 17792 329c 53       		.byte	0x53
 17793 329d 00000000 		.4byte	0
 17794 32a1 00000000 		.4byte	0
 17795              	.LLST210:
 17796 32a5 00000000 		.4byte	.LVL1009
 17797 32a9 0A000000 		.4byte	.LVL1010
 17798 32ad 0100     		.2byte	0x1
 17799 32af 50       		.byte	0x50
 17800 32b0 0A000000 		.4byte	.LVL1010
 17801 32b4 11000000 		.4byte	.LVL1012-1
 17802 32b8 0200     		.2byte	0x2
 17803 32ba 70       		.byte	0x70
 17804 32bb 00       		.sleb128 0
 17805 32bc 11000000 		.4byte	.LVL1012-1
 17806 32c0 24010000 		.4byte	.LFE44
 17807 32c4 0300     		.2byte	0x3
 17808 32c6 91       		.byte	0x91
 17809 32c7 8C7F     		.sleb128 -116
 17810 32c9 00000000 		.4byte	0
 17811 32cd 00000000 		.4byte	0
 17812              	.LLST211:
 17813 32d1 00000000 		.4byte	.LVL1009
 17814 32d5 0C000000 		.4byte	.LVL1011
 17815 32d9 0100     		.2byte	0x1
 17816 32db 51       		.byte	0x51
 17817 32dc 0C000000 		.4byte	.LVL1011
 17818 32e0 72000000 		.4byte	.LVL1027
 17819 32e4 0100     		.2byte	0x1
 17820 32e6 55       		.byte	0x55
 17821 32e7 72000000 		.4byte	.LVL1027
 17822 32eb 1C010000 		.4byte	.LVL1047
 17823 32ef 0400     		.2byte	0x4
 17824 32f1 F3       		.byte	0xf3
 17825 32f2 01       		.uleb128 0x1
 17826 32f3 51       		.byte	0x51
 17827 32f4 9F       		.byte	0x9f
 17828 32f5 1C010000 		.4byte	.LVL1047
 17829 32f9 1E010000 		.4byte	.LVL1048
 17830 32fd 0100     		.2byte	0x1
 17831 32ff 55       		.byte	0x55
 17832 3300 1E010000 		.4byte	.LVL1048
 17833 3304 24010000 		.4byte	.LFE44
 17834 3308 0400     		.2byte	0x4
 17835 330a F3       		.byte	0xf3
 17836 330b 01       		.uleb128 0x1
 17837 330c 51       		.byte	0x51
 17838 330d 9F       		.byte	0x9f
 17839 330e 00000000 		.4byte	0
 17840 3312 00000000 		.4byte	0
 17841              	.LLST212:
 17842 3316 14000000 		.4byte	.LVL1013
 17843 331a 22000000 		.4byte	.LVL1014
 17844 331e 0100     		.2byte	0x1
 17845 3320 50       		.byte	0x50
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 384


 17846 3321 22000000 		.4byte	.LVL1014
 17847 3325 2A000000 		.4byte	.LVL1016
 17848 3329 0100     		.2byte	0x1
 17849 332b 54       		.byte	0x54
 17850 332c 2A000000 		.4byte	.LVL1016
 17851 3330 2E000000 		.4byte	.LVL1017
 17852 3334 0100     		.2byte	0x1
 17853 3336 50       		.byte	0x50
 17854 3337 2E000000 		.4byte	.LVL1017
 17855 333b 5E000000 		.4byte	.LVL1023
 17856 333f 0100     		.2byte	0x1
 17857 3341 54       		.byte	0x54
 17858 3342 5E000000 		.4byte	.LVL1023
 17859 3346 62000000 		.4byte	.LVL1024
 17860 334a 0100     		.2byte	0x1
 17861 334c 50       		.byte	0x50
 17862 334d 62000000 		.4byte	.LVL1024
 17863 3351 6E000000 		.4byte	.LVL1026
 17864 3355 0100     		.2byte	0x1
 17865 3357 54       		.byte	0x54
 17866 3358 6E000000 		.4byte	.LVL1026
 17867 335c 74000000 		.4byte	.LVL1028
 17868 3360 0100     		.2byte	0x1
 17869 3362 50       		.byte	0x50
 17870 3363 74000000 		.4byte	.LVL1028
 17871 3367 A0000000 		.4byte	.LVL1030
 17872 336b 0100     		.2byte	0x1
 17873 336d 54       		.byte	0x54
 17874 336e C6000000 		.4byte	.LVL1035
 17875 3372 EC000000 		.4byte	.LVL1038
 17876 3376 0100     		.2byte	0x1
 17877 3378 50       		.byte	0x50
 17878 3379 EC000000 		.4byte	.LVL1038
 17879 337d 02010000 		.4byte	.LVL1040
 17880 3381 0100     		.2byte	0x1
 17881 3383 54       		.byte	0x54
 17882 3384 04010000 		.4byte	.LVL1041
 17883 3388 10010000 		.4byte	.LVL1043
 17884 338c 0100     		.2byte	0x1
 17885 338e 54       		.byte	0x54
 17886 338f 10010000 		.4byte	.LVL1043
 17887 3393 14010000 		.4byte	.LVL1044
 17888 3397 0100     		.2byte	0x1
 17889 3399 50       		.byte	0x50
 17890 339a 14010000 		.4byte	.LVL1044
 17891 339e 1A010000 		.4byte	.LVL1046
 17892 33a2 0100     		.2byte	0x1
 17893 33a4 54       		.byte	0x54
 17894 33a5 1A010000 		.4byte	.LVL1046
 17895 33a9 1C010000 		.4byte	.LVL1047
 17896 33ad 0100     		.2byte	0x1
 17897 33af 50       		.byte	0x50
 17898 33b0 1C010000 		.4byte	.LVL1047
 17899 33b4 22010000 		.4byte	.LVL1049
 17900 33b8 0100     		.2byte	0x1
 17901 33ba 54       		.byte	0x54
 17902 33bb 22010000 		.4byte	.LVL1049
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 385


 17903 33bf 24010000 		.4byte	.LFE44
 17904 33c3 0100     		.2byte	0x1
 17905 33c5 50       		.byte	0x50
 17906 33c6 00000000 		.4byte	0
 17907 33ca 00000000 		.4byte	0
 17908              	.LLST213:
 17909 33ce 72000000 		.4byte	.LVL1027
 17910 33d2 C8000000 		.4byte	.LVL1036
 17911 33d6 0100     		.2byte	0x1
 17912 33d8 55       		.byte	0x55
 17913 33d9 C8000000 		.4byte	.LVL1036
 17914 33dd 02010000 		.4byte	.LVL1040
 17915 33e1 0400     		.2byte	0x4
 17916 33e3 73       		.byte	0x73
 17917 33e4 D000     		.sleb128 80
 17918 33e6 9F       		.byte	0x9f
 17919 33e7 02010000 		.4byte	.LVL1040
 17920 33eb 04010000 		.4byte	.LVL1041
 17921 33ef 0100     		.2byte	0x1
 17922 33f1 55       		.byte	0x55
 17923 33f2 00000000 		.4byte	0
 17924 33f6 00000000 		.4byte	0
 17925              	.LLST214:
 17926 33fa BC000000 		.4byte	.LVL1032
 17927 33fe C0000000 		.4byte	.LVL1033
 17928 3402 0100     		.2byte	0x1
 17929 3404 50       		.byte	0x50
 17930 3405 C0000000 		.4byte	.LVL1033
 17931 3409 C3000000 		.4byte	.LVL1034-1
 17932 340d 0100     		.2byte	0x1
 17933 340f 51       		.byte	0x51
 17934 3410 E6000000 		.4byte	.LVL1037
 17935 3414 F2000000 		.4byte	.LVL1039
 17936 3418 0100     		.2byte	0x1
 17937 341a 52       		.byte	0x52
 17938 341b 02010000 		.4byte	.LVL1040
 17939 341f 04010000 		.4byte	.LVL1041
 17940 3423 0100     		.2byte	0x1
 17941 3425 50       		.byte	0x50
 17942 3426 00000000 		.4byte	0
 17943 342a 00000000 		.4byte	0
 17944              		.section	.debug_aranges,"",%progbits
 17945 0000 7C010000 		.4byte	0x17c
 17946 0004 0200     		.2byte	0x2
 17947 0006 00000000 		.4byte	.Ldebug_info0
 17948 000a 04       		.byte	0x4
 17949 000b 00       		.byte	0
 17950 000c 0000     		.2byte	0
 17951 000e 0000     		.2byte	0
 17952 0010 00000000 		.4byte	.LFB0
 17953 0014 14000000 		.4byte	.LFE0-.LFB0
 17954 0018 00000000 		.4byte	.LFB1
 17955 001c 12000000 		.4byte	.LFE1-.LFB1
 17956 0020 00000000 		.4byte	.LFB2
 17957 0024 24000000 		.4byte	.LFE2-.LFB2
 17958 0028 00000000 		.4byte	.LFB3
 17959 002c 12000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 386


 17960 0030 00000000 		.4byte	.LFB4
 17961 0034 8C000000 		.4byte	.LFE4-.LFB4
 17962 0038 00000000 		.4byte	.LFB5
 17963 003c 28000000 		.4byte	.LFE5-.LFB5
 17964 0040 00000000 		.4byte	.LFB6
 17965 0044 C8000000 		.4byte	.LFE6-.LFB6
 17966 0048 00000000 		.4byte	.LFB7
 17967 004c 50000000 		.4byte	.LFE7-.LFB7
 17968 0050 00000000 		.4byte	.LFB8
 17969 0054 2C000000 		.4byte	.LFE8-.LFB8
 17970 0058 00000000 		.4byte	.LFB22
 17971 005c 28010000 		.4byte	.LFE22-.LFB22
 17972 0060 00000000 		.4byte	.LFB23
 17973 0064 7E000000 		.4byte	.LFE23-.LFB23
 17974 0068 00000000 		.4byte	.LFB9
 17975 006c 82000000 		.4byte	.LFE9-.LFB9
 17976 0070 00000000 		.4byte	.LFB25
 17977 0074 98000000 		.4byte	.LFE25-.LFB25
 17978 0078 00000000 		.4byte	.LFB27
 17979 007c 30000000 		.4byte	.LFE27-.LFB27
 17980 0080 00000000 		.4byte	.LFB26
 17981 0084 B4030000 		.4byte	.LFE26-.LFB26
 17982 0088 00000000 		.4byte	.LFB10
 17983 008c E8000000 		.4byte	.LFE10-.LFB10
 17984 0090 00000000 		.4byte	.LFB11
 17985 0094 18000000 		.4byte	.LFE11-.LFB11
 17986 0098 00000000 		.4byte	.LFB12
 17987 009c F2000000 		.4byte	.LFE12-.LFB12
 17988 00a0 00000000 		.4byte	.LFB16
 17989 00a4 96000000 		.4byte	.LFE16-.LFB16
 17990 00a8 00000000 		.4byte	.LFB21
 17991 00ac 28000000 		.4byte	.LFE21-.LFB21
 17992 00b0 00000000 		.4byte	.LFB13
 17993 00b4 08010000 		.4byte	.LFE13-.LFB13
 17994 00b8 00000000 		.4byte	.LFB15
 17995 00bc BC000000 		.4byte	.LFE15-.LFB15
 17996 00c0 00000000 		.4byte	.LFB17
 17997 00c4 22010000 		.4byte	.LFE17-.LFB17
 17998 00c8 00000000 		.4byte	.LFB18
 17999 00cc 4A000000 		.4byte	.LFE18-.LFB18
 18000 00d0 00000000 		.4byte	.LFB24
 18001 00d4 88000000 		.4byte	.LFE24-.LFB24
 18002 00d8 00000000 		.4byte	.LFB20
 18003 00dc 62000000 		.4byte	.LFE20-.LFB20
 18004 00e0 00000000 		.4byte	.LFB19
 18005 00e4 4A000000 		.4byte	.LFE19-.LFB19
 18006 00e8 00000000 		.4byte	.LFB14
 18007 00ec 6C000000 		.4byte	.LFE14-.LFB14
 18008 00f0 00000000 		.4byte	.LFB28
 18009 00f4 3C000000 		.4byte	.LFE28-.LFB28
 18010 00f8 00000000 		.4byte	.LFB29
 18011 00fc 9C010000 		.4byte	.LFE29-.LFB29
 18012 0100 00000000 		.4byte	.LFB30
 18013 0104 A0010000 		.4byte	.LFE30-.LFB30
 18014 0108 00000000 		.4byte	.LFB31
 18015 010c 12020000 		.4byte	.LFE31-.LFB31
 18016 0110 00000000 		.4byte	.LFB32
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 387


 18017 0114 7A000000 		.4byte	.LFE32-.LFB32
 18018 0118 00000000 		.4byte	.LFB33
 18019 011c 1C000000 		.4byte	.LFE33-.LFB33
 18020 0120 00000000 		.4byte	.LFB34
 18021 0124 70010000 		.4byte	.LFE34-.LFB34
 18022 0128 00000000 		.4byte	.LFB35
 18023 012c 6A000000 		.4byte	.LFE35-.LFB35
 18024 0130 00000000 		.4byte	.LFB36
 18025 0134 5E000000 		.4byte	.LFE36-.LFB36
 18026 0138 00000000 		.4byte	.LFB37
 18027 013c 3E000000 		.4byte	.LFE37-.LFB37
 18028 0140 00000000 		.4byte	.LFB38
 18029 0144 00010000 		.4byte	.LFE38-.LFB38
 18030 0148 00000000 		.4byte	.LFB39
 18031 014c 9C000000 		.4byte	.LFE39-.LFB39
 18032 0150 00000000 		.4byte	.LFB40
 18033 0154 C6000000 		.4byte	.LFE40-.LFB40
 18034 0158 00000000 		.4byte	.LFB41
 18035 015c A6010000 		.4byte	.LFE41-.LFB41
 18036 0160 00000000 		.4byte	.LFB42
 18037 0164 4E000000 		.4byte	.LFE42-.LFB42
 18038 0168 00000000 		.4byte	.LFB43
 18039 016c 52000000 		.4byte	.LFE43-.LFB43
 18040 0170 00000000 		.4byte	.LFB44
 18041 0174 24010000 		.4byte	.LFE44-.LFB44
 18042 0178 00000000 		.4byte	0
 18043 017c 00000000 		.4byte	0
 18044              		.section	.debug_ranges,"",%progbits
 18045              	.Ldebug_ranges0:
 18046 0000 5C000000 		.4byte	.LBB3
 18047 0004 D0000000 		.4byte	.LBE3
 18048 0008 02010000 		.4byte	.LBB4
 18049 000c 18010000 		.4byte	.LBE4
 18050 0010 00000000 		.4byte	0
 18051 0014 00000000 		.4byte	0
 18052 0018 00000000 		.4byte	.LFB0
 18053 001c 14000000 		.4byte	.LFE0
 18054 0020 00000000 		.4byte	.LFB1
 18055 0024 12000000 		.4byte	.LFE1
 18056 0028 00000000 		.4byte	.LFB2
 18057 002c 24000000 		.4byte	.LFE2
 18058 0030 00000000 		.4byte	.LFB3
 18059 0034 12000000 		.4byte	.LFE3
 18060 0038 00000000 		.4byte	.LFB4
 18061 003c 8C000000 		.4byte	.LFE4
 18062 0040 00000000 		.4byte	.LFB5
 18063 0044 28000000 		.4byte	.LFE5
 18064 0048 00000000 		.4byte	.LFB6
 18065 004c C8000000 		.4byte	.LFE6
 18066 0050 00000000 		.4byte	.LFB7
 18067 0054 50000000 		.4byte	.LFE7
 18068 0058 00000000 		.4byte	.LFB8
 18069 005c 2C000000 		.4byte	.LFE8
 18070 0060 00000000 		.4byte	.LFB22
 18071 0064 28010000 		.4byte	.LFE22
 18072 0068 00000000 		.4byte	.LFB23
 18073 006c 7E000000 		.4byte	.LFE23
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 388


 18074 0070 00000000 		.4byte	.LFB9
 18075 0074 82000000 		.4byte	.LFE9
 18076 0078 00000000 		.4byte	.LFB25
 18077 007c 98000000 		.4byte	.LFE25
 18078 0080 00000000 		.4byte	.LFB27
 18079 0084 30000000 		.4byte	.LFE27
 18080 0088 00000000 		.4byte	.LFB26
 18081 008c B4030000 		.4byte	.LFE26
 18082 0090 00000000 		.4byte	.LFB10
 18083 0094 E8000000 		.4byte	.LFE10
 18084 0098 00000000 		.4byte	.LFB11
 18085 009c 18000000 		.4byte	.LFE11
 18086 00a0 00000000 		.4byte	.LFB12
 18087 00a4 F2000000 		.4byte	.LFE12
 18088 00a8 00000000 		.4byte	.LFB16
 18089 00ac 96000000 		.4byte	.LFE16
 18090 00b0 00000000 		.4byte	.LFB21
 18091 00b4 28000000 		.4byte	.LFE21
 18092 00b8 00000000 		.4byte	.LFB13
 18093 00bc 08010000 		.4byte	.LFE13
 18094 00c0 00000000 		.4byte	.LFB15
 18095 00c4 BC000000 		.4byte	.LFE15
 18096 00c8 00000000 		.4byte	.LFB17
 18097 00cc 22010000 		.4byte	.LFE17
 18098 00d0 00000000 		.4byte	.LFB18
 18099 00d4 4A000000 		.4byte	.LFE18
 18100 00d8 00000000 		.4byte	.LFB24
 18101 00dc 88000000 		.4byte	.LFE24
 18102 00e0 00000000 		.4byte	.LFB20
 18103 00e4 62000000 		.4byte	.LFE20
 18104 00e8 00000000 		.4byte	.LFB19
 18105 00ec 4A000000 		.4byte	.LFE19
 18106 00f0 00000000 		.4byte	.LFB14
 18107 00f4 6C000000 		.4byte	.LFE14
 18108 00f8 00000000 		.4byte	.LFB28
 18109 00fc 3C000000 		.4byte	.LFE28
 18110 0100 00000000 		.4byte	.LFB29
 18111 0104 9C010000 		.4byte	.LFE29
 18112 0108 00000000 		.4byte	.LFB30
 18113 010c A0010000 		.4byte	.LFE30
 18114 0110 00000000 		.4byte	.LFB31
 18115 0114 12020000 		.4byte	.LFE31
 18116 0118 00000000 		.4byte	.LFB32
 18117 011c 7A000000 		.4byte	.LFE32
 18118 0120 00000000 		.4byte	.LFB33
 18119 0124 1C000000 		.4byte	.LFE33
 18120 0128 00000000 		.4byte	.LFB34
 18121 012c 70010000 		.4byte	.LFE34
 18122 0130 00000000 		.4byte	.LFB35
 18123 0134 6A000000 		.4byte	.LFE35
 18124 0138 00000000 		.4byte	.LFB36
 18125 013c 5E000000 		.4byte	.LFE36
 18126 0140 00000000 		.4byte	.LFB37
 18127 0144 3E000000 		.4byte	.LFE37
 18128 0148 00000000 		.4byte	.LFB38
 18129 014c 00010000 		.4byte	.LFE38
 18130 0150 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 389


 18131 0154 9C000000 		.4byte	.LFE39
 18132 0158 00000000 		.4byte	.LFB40
 18133 015c C6000000 		.4byte	.LFE40
 18134 0160 00000000 		.4byte	.LFB41
 18135 0164 A6010000 		.4byte	.LFE41
 18136 0168 00000000 		.4byte	.LFB42
 18137 016c 4E000000 		.4byte	.LFE42
 18138 0170 00000000 		.4byte	.LFB43
 18139 0174 52000000 		.4byte	.LFE43
 18140 0178 00000000 		.4byte	.LFB44
 18141 017c 24010000 		.4byte	.LFE44
 18142 0180 00000000 		.4byte	0
 18143 0184 00000000 		.4byte	0
 18144              		.section	.debug_line,"",%progbits
 18145              	.Ldebug_line0:
 18146 0000 F50B0000 		.section	.debug_str,"MS",%progbits,1
 18146      02002D01 
 18146      00000201 
 18146      FB0E0D00 
 18146      01010101 
 18147              	.LASF57:
 18148 0000 46525F4E 		.ascii	"FR_NOT_READY\000"
 18148      4F545F52 
 18148      45414459 
 18148      00
 18149              	.LASF78:
 18150 000d 5245535F 		.ascii	"RES_WRPRT\000"
 18150      57525052 
 18150      5400
 18151              	.LASF150:
 18152 0017 64636C73 		.ascii	"dclst\000"
 18152      7400
 18153              	.LASF153:
 18154 001d 76616C75 		.ascii	"value\000"
 18154      6500
 18155              	.LASF72:
 18156 0023 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 18156      4F4F5F4D 
 18156      414E595F 
 18156      4F50454E 
 18156      5F46494C 
 18157              	.LASF117:
 18158 003a 7075745F 		.ascii	"put_fat\000"
 18158      66617400 
 18159              	.LASF21:
 18160 0042 66735F74 		.ascii	"fs_type\000"
 18160      79706500 
 18161              	.LASF133:
 18162 004a 63736563 		.ascii	"csect\000"
 18162      7400
 18163              	.LASF86:
 18164 0050 63686B5F 		.ascii	"chk_chr\000"
 18164      63687200 
 18165              	.LASF3:
 18166 0058 5F5F7569 		.ascii	"__uint8_t\000"
 18166      6E74385F 
 18166      7400
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 390


 18167              	.LASF129:
 18168 0062 665F7265 		.ascii	"f_read\000"
 18168      616400
 18169              	.LASF79:
 18170 0069 5245535F 		.ascii	"RES_NOTRDY\000"
 18170      4E4F5452 
 18170      445900
 18171              	.LASF26:
 18172 0074 6E5F726F 		.ascii	"n_rootdir\000"
 18172      6F746469 
 18172      7200
 18173              	.LASF46:
 18174 007e 6C6F636B 		.ascii	"lockid\000"
 18174      696400
 18175              	.LASF93:
 18176 0085 70617468 		.ascii	"path\000"
 18176      00
 18177              	.LASF134:
 18178 008a 72627566 		.ascii	"rbuff\000"
 18178      6600
 18179              	.LASF167:
 18180 0090 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 18180      4320342E 
 18180      382E3420 
 18180      32303134 
 18180      30353236 
 18181 00c3 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 18181      20726576 
 18181      6973696F 
 18181      6E203231 
 18181      31333538 
 18182 00f6 67202D66 		.ascii	"g -ffunction-sections\000"
 18182      66756E63 
 18182      74696F6E 
 18182      2D736563 
 18182      74696F6E 
 18183              	.LASF10:
 18184 010c 6C6F6E67 		.ascii	"long long unsigned int\000"
 18184      206C6F6E 
 18184      6720756E 
 18184      7369676E 
 18184      65642069 
 18185              	.LASF89:
 18186 0123 696E635F 		.ascii	"inc_lock\000"
 18186      6C6F636B 
 18186      00
 18187              	.LASF87:
 18188 012c 63686B5F 		.ascii	"chk_lock\000"
 18188      6C6F636B 
 18188      00
 18189              	.LASF155:
 18190 0135 665F7574 		.ascii	"f_utime\000"
 18190      696D6500 
 18191              	.LASF48:
 18192 013d 73656374 		.ascii	"sect\000"
 18192      00
 18193              	.LASF94:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 391


 18194 0142 65786376 		.ascii	"excvt\000"
 18194      7400
 18195              	.LASF63:
 18196 0148 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
 18196      4E56414C 
 18196      49445F4F 
 18196      424A4543 
 18196      5400
 18197              	.LASF105:
 18198 015a 66617369 		.ascii	"fasize\000"
 18198      7A6500
 18199              	.LASF27:
 18200 0161 6C617374 		.ascii	"last_clust\000"
 18200      5F636C75 
 18200      737400
 18201              	.LASF44:
 18202 016c 6469725F 		.ascii	"dir_sect\000"
 18202      73656374 
 18202      00
 18203              	.LASF157:
 18204 0175 70617468 		.ascii	"path_old\000"
 18204      5F6F6C64 
 18204      00
 18205              	.LASF33:
 18206 017e 64697262 		.ascii	"dirbase\000"
 18206      61736500 
 18207              	.LASF9:
 18208 0186 6C6F6E67 		.ascii	"long long int\000"
 18208      206C6F6E 
 18208      6720696E 
 18208      7400
 18209              	.LASF0:
 18210 0194 7369676E 		.ascii	"signed char\000"
 18210      65642063 
 18210      68617200 
 18211              	.LASF91:
 18212 01a0 636C6561 		.ascii	"clear_lock\000"
 18212      725F6C6F 
 18212      636B00
 18213              	.LASF130:
 18214 01ab 62756666 		.ascii	"buff\000"
 18214      00
 18215              	.LASF73:
 18216 01b0 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 18216      4E56414C 
 18216      49445F50 
 18216      4152414D 
 18216      45544552 
 18217              	.LASF31:
 18218 01c5 6673697A 		.ascii	"fsize\000"
 18218      6500
 18219              	.LASF30:
 18220 01cb 6E5F6661 		.ascii	"n_fatent\000"
 18220      74656E74 
 18220      00
 18221              	.LASF6:
 18222 01d4 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 392


 18222      20696E74 
 18222      00
 18223              	.LASF116:
 18224 01dd 6469725F 		.ascii	"dir_remove\000"
 18224      72656D6F 
 18224      766500
 18225              	.LASF80:
 18226 01e8 5245535F 		.ascii	"RES_PARERR\000"
 18226      50415245 
 18226      525200
 18227              	.LASF23:
 18228 01f3 6E5F6661 		.ascii	"n_fats\000"
 18228      747300
 18229              	.LASF88:
 18230 01fa 656E715F 		.ascii	"enq_lock\000"
 18230      6C6F636B 
 18230      00
 18231              	.LASF159:
 18232 0203 46617446 		.ascii	"FatFs\000"
 18232      7300
 18233              	.LASF67:
 18234 0209 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 18234      4F5F4649 
 18234      4C455359 
 18234      5354454D 
 18234      00
 18235              	.LASF13:
 18236 021a 75696E74 		.ascii	"uint16_t\000"
 18236      31365F74 
 18236      00
 18237              	.LASF118:
 18238 0223 63726561 		.ascii	"create_chain\000"
 18238      74655F63 
 18238      6861696E 
 18238      00
 18239              	.LASF71:
 18240 0230 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 18240      4F545F45 
 18240      4E4F5547 
 18240      485F434F 
 18240      524500
 18241              	.LASF62:
 18242 0243 46525F45 		.ascii	"FR_EXIST\000"
 18242      58495354 
 18242      00
 18243              	.LASF32:
 18244 024c 66617462 		.ascii	"fatbase\000"
 18244      61736500 
 18245              	.LASF18:
 18246 0254 44574F52 		.ascii	"DWORD\000"
 18246      4400
 18247              	.LASF135:
 18248 025a 665F7772 		.ascii	"f_write\000"
 18248      69746500 
 18249              	.LASF121:
 18250 0262 6469725F 		.ascii	"dir_find\000"
 18250      66696E64 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 393


 18250      00
 18251              	.LASF145:
 18252 026b 665F7374 		.ascii	"f_stat\000"
 18252      617400
 18253              	.LASF7:
 18254 0272 5F5F7569 		.ascii	"__uint32_t\000"
 18254      6E743332 
 18254      5F7400
 18255              	.LASF22:
 18256 027d 6373697A 		.ascii	"csize\000"
 18256      6500
 18257              	.LASF165:
 18258 0283 6469736B 		.ascii	"disk_initialize\000"
 18258      5F696E69 
 18258      7469616C 
 18258      697A6500 
 18259              	.LASF82:
 18260 0293 46494C45 		.ascii	"FILESEM\000"
 18260      53454D00 
 18261              	.LASF16:
 18262 029b 42595445 		.ascii	"BYTE\000"
 18262      00
 18263              	.LASF45:
 18264 02a0 6469725F 		.ascii	"dir_ptr\000"
 18264      70747200 
 18265              	.LASF120:
 18266 02a8 73747265 		.ascii	"stretch\000"
 18266      74636800 
 18267              	.LASF11:
 18268 02b0 756E7369 		.ascii	"unsigned int\000"
 18268      676E6564 
 18268      20696E74 
 18268      00
 18269              	.LASF15:
 18270 02bd 55494E54 		.ascii	"UINT\000"
 18270      00
 18271              	.LASF50:
 18272 02c2 6674696D 		.ascii	"ftime\000"
 18272      6500
 18273              	.LASF8:
 18274 02c8 6C6F6E67 		.ascii	"long unsigned int\000"
 18274      20756E73 
 18274      69676E65 
 18274      6420696E 
 18274      7400
 18275              	.LASF164:
 18276 02da 6469736B 		.ascii	"disk_status\000"
 18276      5F737461 
 18276      74757300 
 18277              	.LASF139:
 18278 02e6 665F636C 		.ascii	"f_close\000"
 18278      6F736500 
 18279              	.LASF104:
 18280 02ee 62736563 		.ascii	"bsect\000"
 18280      7400
 18281              	.LASF107:
 18282 02f4 73797365 		.ascii	"sysect\000"
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 394


 18282      637400
 18283              	.LASF5:
 18284 02fb 73686F72 		.ascii	"short unsigned int\000"
 18284      7420756E 
 18284      7369676E 
 18284      65642069 
 18284      6E7400
 18285              	.LASF34:
 18286 030e 64617461 		.ascii	"database\000"
 18286      62617365 
 18286      00
 18287              	.LASF156:
 18288 0317 665F7265 		.ascii	"f_rename\000"
 18288      6E616D65 
 18288      00
 18289              	.LASF112:
 18290 0320 636C7374 		.ascii	"clst\000"
 18290      00
 18291              	.LASF56:
 18292 0325 46525F49 		.ascii	"FR_INT_ERR\000"
 18292      4E545F45 
 18292      525200
 18293              	.LASF140:
 18294 0330 665F6C73 		.ascii	"f_lseek\000"
 18294      65656B00 
 18295              	.LASF55:
 18296 0338 46525F44 		.ascii	"FR_DISK_ERR\000"
 18296      49534B5F 
 18296      45525200 
 18297              	.LASF35:
 18298 0344 77696E73 		.ascii	"winsect\000"
 18298      65637400 
 18299              	.LASF85:
 18300 034c 6D656D5F 		.ascii	"mem_cmp\000"
 18300      636D7000 
 18301              	.LASF97:
 18302 0354 73656374 		.ascii	"sector\000"
 18302      6F7200
 18303              	.LASF109:
 18304 035b 737A6266 		.ascii	"szbfat\000"
 18304      617400
 18305              	.LASF119:
 18306 0362 6469725F 		.ascii	"dir_next\000"
 18306      6E657874 
 18306      00
 18307              	.LASF52:
 18308 036b 666E616D 		.ascii	"fname\000"
 18308      6500
 18309              	.LASF142:
 18310 0371 69667074 		.ascii	"ifptr\000"
 18310      7200
 18311              	.LASF64:
 18312 0377 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 18312      52495445 
 18312      5F50524F 
 18312      54454354 
 18312      454400
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 395


 18313              	.LASF166:
 18314 038a 6469736B 		.ascii	"disk_ioctl\000"
 18314      5F696F63 
 18314      746C00
 18315              	.LASF37:
 18316 0395 46415446 		.ascii	"FATFS\000"
 18316      5300
 18317              	.LASF151:
 18318 039b 665F6D6B 		.ascii	"f_mkdir\000"
 18318      64697200 
 18319              	.LASF49:
 18320 03a3 66646174 		.ascii	"fdate\000"
 18320      6500
 18321              	.LASF138:
 18322 03a9 665F7379 		.ascii	"f_sync\000"
 18322      6E6300
 18323              	.LASF136:
 18324 03b0 77636E74 		.ascii	"wcnt\000"
 18324      00
 18325              	.LASF40:
 18326 03b5 66707472 		.ascii	"fptr\000"
 18326      00
 18327              	.LASF113:
 18328 03ba 636C7573 		.ascii	"clust2sect\000"
 18328      74327365 
 18328      637400
 18329              	.LASF158:
 18330 03c5 70617468 		.ascii	"path_new\000"
 18330      5F6E6577 
 18330      00
 18331              	.LASF84:
 18332 03ce 6D656D5F 		.ascii	"mem_set\000"
 18332      73657400 
 18333              	.LASF36:
 18334 03d6 73697A65 		.ascii	"sizetype\000"
 18334      74797065 
 18334      00
 18335              	.LASF95:
 18336 03df 6765745F 		.ascii	"get_fileinfo\000"
 18336      66696C65 
 18336      696E666F 
 18336      00
 18337              	.LASF101:
 18338 03ec 63686B5F 		.ascii	"chk_mounted\000"
 18338      6D6F756E 
 18338      74656400 
 18339              	.LASF108:
 18340 03f8 6E636C73 		.ascii	"nclst\000"
 18340      7400
 18341              	.LASF69:
 18342 03fe 46525F54 		.ascii	"FR_TIMEOUT\000"
 18342      494D454F 
 18342      555400
 18343              	.LASF17:
 18344 0409 574F5244 		.ascii	"WORD\000"
 18344      00
 18345              	.LASF41:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 396


 18346 040e 73636C75 		.ascii	"sclust\000"
 18346      737400
 18347              	.LASF76:
 18348 0415 5245535F 		.ascii	"RES_OK\000"
 18348      4F4B00
 18349              	.LASF28:
 18350 041c 66726565 		.ascii	"free_clust\000"
 18350      5F636C75 
 18350      737400
 18351              	.LASF58:
 18352 0427 46525F4E 		.ascii	"FR_NO_FILE\000"
 18352      4F5F4649 
 18352      4C4500
 18353              	.LASF147:
 18354 0432 66617466 		.ascii	"fatfs\000"
 18354      7300
 18355              	.LASF19:
 18356 0438 54434841 		.ascii	"TCHAR\000"
 18356      5200
 18357              	.LASF66:
 18358 043e 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 18358      4F545F45 
 18358      4E41424C 
 18358      454400
 18359              	.LASF170:
 18360 044d 6765745F 		.ascii	"get_fattime\000"
 18360      66617474 
 18360      696D6500 
 18361              	.LASF81:
 18362 0459 44524553 		.ascii	"DRESULT\000"
 18362      554C5400 
 18363              	.LASF146:
 18364 0461 665F6765 		.ascii	"f_getfree\000"
 18364      74667265 
 18364      6500
 18365              	.LASF126:
 18366 046b 665F6D6F 		.ascii	"f_mount\000"
 18366      756E7400 
 18367              	.LASF114:
 18368 0473 6765745F 		.ascii	"get_fat\000"
 18368      66617400 
 18369              	.LASF99:
 18370 047b 63686563 		.ascii	"check_fs\000"
 18370      6B5F6673 
 18370      00
 18371              	.LASF43:
 18372 0484 64736563 		.ascii	"dsect\000"
 18372      7400
 18373              	.LASF1:
 18374 048a 756E7369 		.ascii	"unsigned char\000"
 18374      676E6564 
 18374      20636861 
 18374      7200
 18375              	.LASF149:
 18376 0498 665F756E 		.ascii	"f_unlink\000"
 18376      6C696E6B 
 18376      00
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 397


 18377              	.LASF152:
 18378 04a1 665F6368 		.ascii	"f_chmod\000"
 18378      6D6F6400 
 18379              	.LASF137:
 18380 04a9 77627566 		.ascii	"wbuff\000"
 18380      6600
 18381              	.LASF2:
 18382 04af 73686F72 		.ascii	"short int\000"
 18382      7420696E 
 18382      7400
 18383              	.LASF38:
 18384 04b9 666C6167 		.ascii	"flag\000"
 18384      00
 18385              	.LASF122:
 18386 04be 666F6C6C 		.ascii	"follow_path\000"
 18386      6F775F70 
 18386      61746800 
 18387              	.LASF65:
 18388 04ca 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 18388      4E56414C 
 18388      49445F44 
 18388      52495645 
 18388      00
 18389              	.LASF61:
 18390 04db 46525F44 		.ascii	"FR_DENIED\000"
 18390      454E4945 
 18390      4400
 18391              	.LASF100:
 18392 04e5 76616C69 		.ascii	"validate\000"
 18392      64617465 
 18392      00
 18393              	.LASF123:
 18394 04ee 6469725F 		.ascii	"dir_register\000"
 18394      72656769 
 18394      73746572 
 18394      00
 18395              	.LASF68:
 18396 04fb 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 18396      4B46535F 
 18396      41424F52 
 18396      54454400 
 18397              	.LASF144:
 18398 050b 665F7265 		.ascii	"f_readdir\000"
 18398      61646469 
 18398      7200
 18399              	.LASF70:
 18400 0515 46525F4C 		.ascii	"FR_LOCKED\000"
 18400      4F434B45 
 18400      4400
 18401              	.LASF24:
 18402 051f 77666C61 		.ascii	"wflag\000"
 18402      6700
 18403              	.LASF14:
 18404 0525 75696E74 		.ascii	"uint32_t\000"
 18404      33325F74 
 18404      00
 18405              	.LASF169:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 398


 18406 052e 453A5C68 		.ascii	"E:\\home\\jarik\\src\\psoc\\mpi_rom_emu\\mpi_rom_em"
 18406      6F6D655C 
 18406      6A617269 
 18406      6B5C7372 
 18406      635C7073 
 18407 055b 752E6379 		.ascii	"u.cydsn\000"
 18407      64736E00 
 18408              	.LASF141:
 18409 0563 6E736563 		.ascii	"nsect\000"
 18409      7400
 18410              	.LASF20:
 18411 0569 63686172 		.ascii	"char\000"
 18411      00
 18412              	.LASF128:
 18413 056e 6D6F6465 		.ascii	"mode\000"
 18413      00
 18414              	.LASF92:
 18415 0573 63726561 		.ascii	"create_name\000"
 18415      74655F6E 
 18415      616D6500 
 18416              	.LASF4:
 18417 057f 5F5F7569 		.ascii	"__uint16_t\000"
 18417      6E743136 
 18417      5F7400
 18418              	.LASF54:
 18419 058a 46525F4F 		.ascii	"FR_OK\000"
 18419      4B00
 18420              	.LASF47:
 18421 0590 696E6465 		.ascii	"index\000"
 18421      7800
 18422              	.LASF125:
 18423 0596 72656D6F 		.ascii	"remove_chain\000"
 18423      76655F63 
 18423      6861696E 
 18423      00
 18424              	.LASF75:
 18425 05a3 44535441 		.ascii	"DSTATUS\000"
 18425      54555300 
 18426              	.LASF102:
 18427 05ab 63686B5F 		.ascii	"chk_wp\000"
 18427      777000
 18428              	.LASF168:
 18429 05b2 2E5C7364 		.ascii	".\\sd\\ff.c\000"
 18429      5C66662E 
 18429      6300
 18430              	.LASF143:
 18431 05bc 665F6F70 		.ascii	"f_opendir\000"
 18431      656E6469 
 18431      7200
 18432              	.LASF110:
 18433 05c6 6E727376 		.ascii	"nrsv\000"
 18433      00
 18434              	.LASF60:
 18435 05cb 46525F49 		.ascii	"FR_INVALID_NAME\000"
 18435      4E56414C 
 18435      49445F4E 
 18435      414D4500 
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 399


 18436              	.LASF162:
 18437 05db 6469736B 		.ascii	"disk_write\000"
 18437      5F777269 
 18437      746500
 18438              	.LASF96:
 18439 05e6 6D6F7665 		.ascii	"move_window\000"
 18439      5F77696E 
 18439      646F7700 
 18440              	.LASF25:
 18441 05f2 6673695F 		.ascii	"fsi_flag\000"
 18441      666C6167 
 18441      00
 18442              	.LASF83:
 18443 05fb 6D656D5F 		.ascii	"mem_cpy\000"
 18443      63707900 
 18444              	.LASF131:
 18445 0603 72656D61 		.ascii	"remain\000"
 18445      696E00
 18446              	.LASF39:
 18447 060a 70616431 		.ascii	"pad1\000"
 18447      00
 18448              	.LASF51:
 18449 060f 66617474 		.ascii	"fattrib\000"
 18449      72696200 
 18450              	.LASF161:
 18451 0617 46696C65 		.ascii	"Files\000"
 18451      7300
 18452              	.LASF154:
 18453 061d 6D61736B 		.ascii	"mask\000"
 18453      00
 18454              	.LASF98:
 18455 0622 77736563 		.ascii	"wsect\000"
 18455      7400
 18456              	.LASF148:
 18457 0628 665F7472 		.ascii	"f_truncate\000"
 18457      756E6361 
 18457      746500
 18458              	.LASF53:
 18459 0633 46494C49 		.ascii	"FILINFO\000"
 18459      4E464F00 
 18460              	.LASF12:
 18461 063b 75696E74 		.ascii	"uint8_t\000"
 18461      385F7400 
 18462              	.LASF132:
 18463 0643 72636E74 		.ascii	"rcnt\000"
 18463      00
 18464              	.LASF111:
 18465 0648 73796E63 		.ascii	"sync\000"
 18465      00
 18466              	.LASF29:
 18467 064d 6673695F 		.ascii	"fsi_sector\000"
 18467      73656374 
 18467      6F7200
 18468              	.LASF103:
 18469 0658 73746174 		.ascii	"stat\000"
 18469      00
 18470              	.LASF74:
ARM GAS  C:\Users\Jarik\AppData\Local\Temp\ccOwmDxA.s 			page 400


 18471 065d 46524553 		.ascii	"FRESULT\000"
 18471      554C5400 
 18472              	.LASF77:
 18473 0665 5245535F 		.ascii	"RES_ERROR\000"
 18473      4552524F 
 18473      5200
 18474              	.LASF90:
 18475 066f 6465635F 		.ascii	"dec_lock\000"
 18475      6C6F636B 
 18475      00
 18476              	.LASF124:
 18477 0678 6469725F 		.ascii	"dir_read\000"
 18477      72656164 
 18477      00
 18478              	.LASF127:
 18479 0681 665F6F70 		.ascii	"f_open\000"
 18479      656E00
 18480              	.LASF59:
 18481 0688 46525F4E 		.ascii	"FR_NO_PATH\000"
 18481      4F5F5041 
 18481      544800
 18482              	.LASF163:
 18483 0693 6469736B 		.ascii	"disk_read\000"
 18483      5F726561 
 18483      6400
 18484              	.LASF115:
 18485 069d 6469725F 		.ascii	"dir_sdi\000"
 18485      73646900 
 18486              	.LASF160:
 18487 06a5 46736964 		.ascii	"Fsid\000"
 18487      00
 18488              	.LASF42:
 18489 06aa 636C7573 		.ascii	"clust\000"
 18489      7400
 18490              	.LASF106:
 18491 06b0 74736563 		.ascii	"tsect\000"
 18491      7400
 18492              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
